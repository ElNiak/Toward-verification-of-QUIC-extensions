#include "quic_server_test_connection_close.h"

#include <sstream>
#include <algorithm>

#include <iostream>
#include <stdlib.h>
#include <sys/types.h>          /* See NOTES */
#include <sys/stat.h>
#include <fcntl.h>
#ifdef _WIN32
#include <winsock2.h>
#include <WS2tcpip.h>
#include <io.h>
#define isatty _isatty
#else
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h> 
#include <sys/select.h>
#include <unistd.h>
#define _open open
#define _dup2 dup2
#endif
#include <string.h>
#include <stdio.h>
#include <string>
#if __cplusplus < 201103L
#else
#include <cstdint>
#endif
typedef quic_server_test_connection_close ivy_class;
std::ofstream __ivy_out;
std::ofstream __ivy_modelfile;
void __ivy_exit(int code){exit(code);}

class reader {
public:
    virtual int fdes() = 0;
    virtual void read() = 0;
    virtual void bind() {}
    virtual bool running() {return fdes() >= 0;}
    virtual ~reader() {}
};

class timer {
public:
    virtual int ms_delay() = 0;
    virtual void timeout(int) = 0;
    virtual ~timer() {}
};

#ifdef _WIN32
DWORD WINAPI ReaderThreadFunction( LPVOID lpParam ) 
{
    reader *cr = (reader *) lpParam;
    cr->bind();
    while (true)
        cr->read();
    return 0;
} 

DWORD WINAPI TimerThreadFunction( LPVOID lpParam ) 
{
    timer *cr = (timer *) lpParam;
    while (true) {
        int ms = cr->ms_delay();
        Sleep(ms);
        cr->timeout(ms);
    }
    return 0;
} 
#else
void * _thread_reader(void *rdr_void) {
    reader *rdr = (reader *) rdr_void;
    rdr->bind();
    while(rdr->running()) {
        rdr->read();
    }
    delete rdr;
    return 0; // just to stop warning
}

void * _thread_timer( void *tmr_void ) 
{
    timer *tmr = (timer *) tmr_void;
    while (true) {
        int ms = tmr->ms_delay();
        struct timespec ts;
        ts.tv_sec = ms/1000;
        ts.tv_nsec = (ms % 1000) * 1000000;
        nanosleep(&ts,NULL);
        tmr->timeout(ms);
    }
    return 0;
} 
#endif 

std::vector<reader *> threads;
std::vector<reader *> readers;
std::vector<timer *> timers;
bool initializing = false;

void quic_server_test_connection_close::install_reader(reader *r) {
    readers.push_back(r);
    if (!::initializing)
        r->bind();
}

void quic_server_test_connection_close::install_thread(reader *r) {
    #ifdef _WIN32

        DWORD dummy;
        HANDLE h = CreateThread( 
            NULL,                   // default security attributes
            0,                      // use default stack size  
            ReaderThreadFunction,   // thread function name
            r,                      // argument to thread function 
            0,                      // use default creation flags 
            &dummy);                // returns the thread identifier 
        if (h == NULL) {
            std::cerr << "failed to create thread" << std::endl;
            exit(1);
        }
        thread_ids.push_back(h);
    #else
        pthread_t thread;
        int res = pthread_create(&thread, NULL, _thread_reader, r);
        if (res) {
            std::cerr << "failed to create thread" << std::endl;
            exit(1);
        }
        thread_ids.push_back(thread);
    #endif
}      

void quic_server_test_connection_close::install_timer(timer *r) {
    timers.push_back(r);
}

#ifdef _WIN32
    void quic_server_test_connection_close::__lock() { WaitForSingleObject(mutex,INFINITE); }
    void quic_server_test_connection_close::__unlock() { ReleaseMutex(mutex); }
#else
    void quic_server_test_connection_close::__lock() { pthread_mutex_lock(&mutex); }
    void quic_server_test_connection_close::__unlock() { pthread_mutex_unlock(&mutex); }
#endif
struct thunk__net__impl__handle_recv{
    quic_server_test_connection_close *__ivy;
    quic_server_test_connection_close::endpoint_id prm__V0;
    thunk__net__impl__handle_recv(quic_server_test_connection_close *__ivy, quic_server_test_connection_close::endpoint_id prm__V0): __ivy(__ivy),prm__V0(prm__V0){}
    void operator()(int s, quic_server_test_connection_close::ip__endpoint src, quic_server_test_connection_close::prot__arr x) const {
        __ivy->net__impl__handle_recv(prm__V0,s,src,x);
    }
};
struct thunk__tls_api__lower__send{
    quic_server_test_connection_close *__ivy;
    thunk__tls_api__lower__send(quic_server_test_connection_close *__ivy): __ivy(__ivy){}
    void operator()(unsigned long long c, quic_server_test_connection_close::stream_data data, int lev) const {
        __ivy->tls_api__lower__send(c,data,lev);
    }
};
struct thunk__tls_api__upper__alert{
    quic_server_test_connection_close *__ivy;
    thunk__tls_api__upper__alert(quic_server_test_connection_close *__ivy): __ivy(__ivy){}
    void operator()(unsigned long long c, quic_server_test_connection_close::stream_data data) const {
        __ivy->tls_api__upper__alert(c,data);
    }
};
struct thunk__tls_api__upper__keys_established{
    quic_server_test_connection_close *__ivy;
    thunk__tls_api__upper__keys_established(quic_server_test_connection_close *__ivy): __ivy(__ivy){}
    void operator()(unsigned long long c, int lev) const {
        __ivy->tls_api__upper__keys_established(c,lev);
    }
};
struct thunk__tls_api__upper__recv{
    quic_server_test_connection_close *__ivy;
    thunk__tls_api__upper__recv(quic_server_test_connection_close *__ivy): __ivy(__ivy){}
    void operator()(unsigned long long c, quic_server_test_connection_close::stream_data data) const {
        __ivy->tls_api__upper__recv(c,data);
    }
};

#include <string>
#include <vector>
#include <sstream>
#include <cstdlib>


using namespace hash_space;

class gen : public ivy_gen {

public:
    z3::context ctx;
    z3::solver slvr;
    z3::model model;

protected:
    gen(): slvr(ctx), model(ctx,(Z3_model)0) {}

    hash_map<std::string, z3::sort> enum_sorts;
    hash_map<Z3_sort, z3::func_decl_vector> enum_values;
    hash_map<std::string, z3::func_decl> decls_by_name;
    hash_map<Z3_symbol,int> enum_to_int;
    std::vector<Z3_symbol> sort_names;
    std::vector<Z3_sort> sorts;
    std::vector<Z3_symbol> decl_names;
    std::vector<Z3_func_decl> decls;
    std::vector<z3::expr> alits;


public:
    virtual bool generate(quic_server_test_connection_close& obj)=0;
    virtual void execute(quic_server_test_connection_close& obj)=0;
    virtual ~gen(){}

    z3::expr mk_apply_expr(const char *decl_name, unsigned num_args, const int *args){
        z3::func_decl decl = decls_by_name.find(decl_name)->second;
        std::vector<z3::expr> expr_args;
        unsigned arity = decl.arity();
        assert(arity == num_args);
        for(unsigned i = 0; i < arity; i ++) {
            z3::sort sort = decl.domain(i);
            expr_args.push_back(int_to_z3(sort,args[i]));
        }
        return decl(arity,&expr_args[0]);
    }

    int eval(const z3::expr &apply_expr) {
        try {
            z3::expr foo = model.eval(apply_expr,true);
            // std::cout << apply_expr << " = " << foo << std::endl;
            if (foo.is_int()) {
                assert(foo.is_numeral());
                int v;
                if (Z3_get_numeral_int(ctx,foo,&v) != Z3_TRUE) {
                    std::cerr << "integer value from Z3 too large for machine int: " << foo << std::endl;
                    assert(false);
                }
                return v;
            }
            if (foo.is_bv()) {
                assert(foo.is_numeral());
                unsigned v;
                if (Z3_get_numeral_uint(ctx,foo,&v) != Z3_TRUE) {
                    std::cerr << "bit vector value from Z3 too large for machine int: " << foo << std::endl;
                    assert(false);
                }
                return v;
            }
            assert(foo.is_app());
            if (foo.is_bool())
                return (foo.decl().decl_kind() == Z3_OP_TRUE) ? 1 : 0;
            return enum_to_int[foo.decl().name()];
        }
        catch (const z3::exception &e) {
            std::cerr << e << std::endl;
            throw e;
        }
    }

    __strlit eval_string(const z3::expr &apply_expr) {
        try {
            z3::expr foo = model.eval(apply_expr,true);
            assert(Z3_is_string(ctx,foo));
            return Z3_get_string(ctx,foo);
        }
        catch (const z3::exception &e) {
            std::cerr << e << std::endl;
            throw e;
        }
    }

    int eval_apply(const char *decl_name, unsigned num_args, const int *args) {
        z3::expr apply_expr = mk_apply_expr(decl_name,num_args,args);
        //        std::cout << "apply_expr: " << apply_expr << std::endl;
        try {
            z3::expr foo = model.eval(apply_expr,true);
            if (foo.is_bv() || foo.is_int()) {
                assert(foo.is_numeral());
                unsigned v;
                if (Z3_get_numeral_uint(ctx,foo,&v) != Z3_TRUE)
                    assert(false && "bit vector value too large for machine int");
                return v;
            }
            assert(foo.is_app());
            if (foo.is_bool())
                return (foo.decl().decl_kind() == Z3_OP_TRUE) ? 1 : 0;
            return enum_to_int[foo.decl().name()];
        }
        catch (const z3::exception &e) {
            std::cerr << e << std::endl;
            throw e;
        }
    }

    int eval_apply(const char *decl_name) {
        return eval_apply(decl_name,0,(int *)0);
    }

    int eval_apply(const char *decl_name, int arg0) {
        return eval_apply(decl_name,1,&arg0);
    }
    
    int eval_apply(const char *decl_name, int arg0, int arg1) {
        int args[2] = {arg0,arg1};
        return eval_apply(decl_name,2,args);
    }

    int eval_apply(const char *decl_name, int arg0, int arg1, int arg2) {
        int args[3] = {arg0,arg1,arg2};
        return eval_apply(decl_name,3,args);
    }

    z3::expr apply(const char *decl_name, std::vector<z3::expr> &expr_args) {
        z3::func_decl decl = decls_by_name.find(decl_name)->second;
        unsigned arity = decl.arity();
        assert(arity == expr_args.size());
        return decl(arity,&expr_args[0]);
    }

    z3::expr apply(const char *decl_name) {
        std::vector<z3::expr> a;
        return apply(decl_name,a);
    }

    z3::expr apply(const char *decl_name, z3::expr arg0) {
        std::vector<z3::expr> a;
        a.push_back(arg0);
        return apply(decl_name,a);
    }
    
    z3::expr apply(const char *decl_name, z3::expr arg0, z3::expr arg1) {
        std::vector<z3::expr> a;
        a.push_back(arg0);
        a.push_back(arg1);
        return apply(decl_name,a);
    }
    
    z3::expr apply(const char *decl_name, z3::expr arg0, z3::expr arg1, z3::expr arg2) {
        std::vector<z3::expr> a;
        a.push_back(arg0);
        a.push_back(arg1);
        a.push_back(arg2);
        return apply(decl_name,a);
    }

    z3::expr apply(const char *decl_name, z3::expr arg0, z3::expr arg1, z3::expr arg2, z3::expr arg3) {
        std::vector<z3::expr> a;
        a.push_back(arg0);
        a.push_back(arg1);
        a.push_back(arg2);
        a.push_back(arg3);
        return apply(decl_name,a);
    }

    z3::expr int_to_z3(const z3::sort &range, int64_t value) {
        if (range.is_bool())
            return ctx.bool_val((bool)value);
        if (range.is_bv())
            return ctx.bv_val((int)value,range.bv_size());
        if (range.is_int())
            return ctx.int_val((int)value);
        return enum_values.find(range)->second[(int)value]();
    }

    z3::expr int_to_z3(const z3::sort &range, const std::string& value) {
        return ctx.string_val(value);
    }

    unsigned sort_card(const z3::sort &range) {
        if (range.is_bool())
            return 2;
        if (range.is_bv())
            return 1 << range.bv_size();
        if (range.is_int())
            return 1;  // bogus -- we need a good way to randomize ints
        return enum_values.find(range)->second.size();
    }

    int set(const char *decl_name, unsigned num_args, const int *args, int value) {
        z3::func_decl decl = decls_by_name.find(decl_name)->second;
        std::vector<z3::expr> expr_args;
        unsigned arity = decl.arity();
        assert(arity == num_args);
        for(unsigned i = 0; i < arity; i ++) {
            z3::sort sort = decl.domain(i);
            expr_args.push_back(int_to_z3(sort,args[i]));
        }
        z3::expr apply_expr = decl(arity,&expr_args[0]);
        z3::sort range = decl.range();
        z3::expr val_expr = int_to_z3(range,value);
        z3::expr pred = apply_expr == val_expr;
        //        std::cout << "pred: " << pred << std::endl;
        slvr.add(pred);
    }

    int set(const char *decl_name, int value) {
        return set(decl_name,0,(int *)0,value);
    }

    int set(const char *decl_name, int arg0, int value) {
        return set(decl_name,1,&arg0,value);
    }
    
    int set(const char *decl_name, int arg0, int arg1, int value) {
        int args[2] = {arg0,arg1};
        return set(decl_name,2,args,value);
    }

    int set(const char *decl_name, int arg0, int arg1, int arg2, int value) {
        int args[3] = {arg0,arg1,arg2};
        return set(decl_name,3,args,value);
    }

    void add_alit(const z3::expr &pred){
        // std::cout << "pred: " << pred << std::endl;
        std::ostringstream ss;
        ss << "alit:" << alits.size();
        z3::expr alit = ctx.bool_const(ss.str().c_str());
        // std::cout << "alit: " << alit << std::endl;
        alits.push_back(alit);
        slvr.add(!alit || pred);
    }

    void randomize(const z3::expr &apply_expr) {
        z3::sort range = apply_expr.get_sort();
//        std::cout << apply_expr << " : " << range << std::endl;
        unsigned card = sort_card(range);
        int value = rand() % card;
        z3::expr val_expr = int_to_z3(range,value);
        z3::expr pred = apply_expr == val_expr;
        add_alit(pred);
    }

    void randomize(const char *decl_name, unsigned num_args, const int *args) {
        z3::func_decl decl = decls_by_name.find(decl_name)->second;
        z3::expr apply_expr = mk_apply_expr(decl_name,num_args,args);
        z3::sort range = decl.range();
        unsigned card = sort_card(range);
        int value = rand() % card;
        z3::expr val_expr = int_to_z3(range,value);
        z3::expr pred = apply_expr == val_expr;
        add_alit(pred);
    }

    void randomize(const char *decl_name) {
        randomize(decl_name,0,(int *)0);
    }

    void randomize(const char *decl_name, int arg0) {
        randomize(decl_name,1,&arg0);
    }
    
    void randomize(const char *decl_name, int arg0, int arg1) {
        int args[2] = {arg0,arg1};
        randomize(decl_name,2,args);
    }

    void randomize(const char *decl_name, int arg0, int arg1, int arg2) {
        int args[3] = {arg0,arg1,arg2};
        randomize(decl_name,3,args);
    }

    void push(){
        slvr.push();
    }

    void pop(){
        slvr.pop();
    }

    z3::sort sort(const char *name) {
        if (std::string("bool") == name)
            return ctx.bool_sort();
        return enum_sorts.find(name)->second;
    }

    void mk_enum(const char *sort_name, unsigned num_values, char const * const * value_names) {
        z3::func_decl_vector cs(ctx), ts(ctx);
        z3::sort sort = ctx.enumeration_sort(sort_name, num_values, value_names, cs, ts);
        // can't use operator[] here because the value classes don't have nullary constructors
        enum_sorts.insert(std::pair<std::string, z3::sort>(sort_name,sort));
        enum_values.insert(std::pair<Z3_sort, z3::func_decl_vector>(sort,cs));
        sort_names.push_back(Z3_mk_string_symbol(ctx,sort_name));
        sorts.push_back(sort);
        for(unsigned i = 0; i < num_values; i++){
            Z3_symbol sym = Z3_mk_string_symbol(ctx,value_names[i]);
            decl_names.push_back(sym);
            decls.push_back(cs[i]);
            enum_to_int[sym] = i;
        }
    }

    void mk_bv(const char *sort_name, unsigned width) {
        z3::sort sort = ctx.bv_sort(width);
        // can't use operator[] here because the value classes don't have nullary constructors
        enum_sorts.insert(std::pair<std::string, z3::sort>(sort_name,sort));
    }

    void mk_int(const char *sort_name) {
        z3::sort sort = ctx.int_sort();
        // can't use operator[] here because the value classes don't have nullary constructors
        enum_sorts.insert(std::pair<std::string, z3::sort>(sort_name,sort));
    }

    void mk_string(const char *sort_name) {
        z3::sort sort = ctx.string_sort();
        // can't use operator[] here because the value classes don't have nullary constructors
        enum_sorts.insert(std::pair<std::string, z3::sort>(sort_name,sort));
    }

    void mk_sort(const char *sort_name) {
        Z3_symbol symb = Z3_mk_string_symbol(ctx,sort_name);
        z3::sort sort(ctx,Z3_mk_uninterpreted_sort(ctx, symb));
//        z3::sort sort = ctx.uninterpreted_sort(sort_name);
        // can't use operator[] here because the value classes don't have nullary constructors
        enum_sorts.insert(std::pair<std::string, z3::sort>(sort_name,sort));
        sort_names.push_back(symb);
        sorts.push_back(sort);
    }

    void mk_decl(const char *decl_name, unsigned arity, const char **domain_names, const char *range_name) {
        std::vector<z3::sort> domain;
        for (unsigned i = 0; i < arity; i++)
            domain.push_back(enum_sorts.find(domain_names[i])->second);
        std::string bool_name("Bool");
        z3::sort range = (range_name == bool_name) ? ctx.bool_sort() : enum_sorts.find(range_name)->second;   
        z3::func_decl decl = ctx.function(decl_name,arity,&domain[0],range);
        decl_names.push_back(Z3_mk_string_symbol(ctx,decl_name));
        decls.push_back(decl);
        decls_by_name.insert(std::pair<std::string, z3::func_decl>(decl_name,decl));
    }

    void mk_const(const char *const_name, const char *sort_name) {
        mk_decl(const_name,0,0,sort_name);
    }

    void add(const std::string &z3inp) {
        z3::expr fmla(ctx,Z3_parse_smtlib2_string(ctx, z3inp.c_str(), sort_names.size(), &sort_names[0], &sorts[0], decl_names.size(), &decl_names[0], &decls[0]));
        ctx.check_error();

        slvr.add(fmla);
    }

    bool solve() {
        // std::cout << alits.size();
        static bool show_model = true;
        while(true){
            z3::check_result res = slvr.check(alits.size(),&alits[0]);
            if (res != z3::unsat)
                break;
            z3::expr_vector core = slvr.unsat_core();
            if (core.size() == 0){
//                if (__ivy_modelfile.is_open()) 
//                    __ivy_modelfile << "begin unsat:\n" << slvr << "end unsat:\n" << std::endl;
                return false;
            }
            //for (unsigned i = 0; i < core.size(); i++)
            //    std::cout << "core: " << core[i] << std::endl;
            unsigned idx = rand() % core.size();
            z3::expr to_delete = core[idx];
            // std::cout << "to delete: " << to_delete << std::endl;
            for (unsigned i = 0; i < alits.size(); i++)
                if (z3::eq(alits[i],to_delete)) {
                    alits[i] = alits.back();
                    alits.pop_back();
                    break;
                }
        }
        model = slvr.get_model();
        alits.clear();

        if(__ivy_modelfile.is_open()){
            __ivy_modelfile << "begin sat:\n" << slvr << "end sat:\n" << std::endl;
            __ivy_modelfile << model;
            __ivy_modelfile.flush();
        }

        return true;
    }

    int choose(int rng, const char *name){
        if (decls_by_name.find(name) == decls_by_name.end())
            return 0;
        return eval_apply(name);
    }
};

/*++
Copyright (c) Microsoft Corporation

This string hash function is borrowed from Microsoft Z3
(https://github.com/Z3Prover/z3). 

--*/


#define mix(a,b,c)              \
{                               \
  a -= b; a -= c; a ^= (c>>13); \
  b -= c; b -= a; b ^= (a<<8);  \
  c -= a; c -= b; c ^= (b>>13); \
  a -= b; a -= c; a ^= (c>>12); \
  b -= c; b -= a; b ^= (a<<16); \
  c -= a; c -= b; c ^= (b>>5);  \
  a -= b; a -= c; a ^= (c>>3);  \
  b -= c; b -= a; b ^= (a<<10); \
  c -= a; c -= b; c ^= (b>>15); \
}

#ifndef __fallthrough
#define __fallthrough
#endif

namespace hash_space {

// I'm using Bob Jenkin's hash function.
// http://burtleburtle.net/bob/hash/doobs.html
unsigned string_hash(const char * str, unsigned length, unsigned init_value) {
    register unsigned a, b, c, len;

    /* Set up the internal state */
    len = length;
    a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
    c = init_value;      /* the previous hash value */

    /*---------------------------------------- handle most of the key */
    while (len >= 12) {
        a += reinterpret_cast<const unsigned *>(str)[0];
        b += reinterpret_cast<const unsigned *>(str)[1];
        c += reinterpret_cast<const unsigned *>(str)[2];
        mix(a,b,c);
        str += 12; len -= 12;
    }

    /*------------------------------------- handle the last 11 bytes */
    c += length;
    switch(len) {        /* all the case statements fall through */
    case 11: 
        c+=((unsigned)str[10]<<24);
        __fallthrough;
    case 10: 
        c+=((unsigned)str[9]<<16);
        __fallthrough;
    case 9 : 
        c+=((unsigned)str[8]<<8);
        __fallthrough;
        /* the first byte of c is reserved for the length */
    case 8 : 
        b+=((unsigned)str[7]<<24);
        __fallthrough;
    case 7 : 
        b+=((unsigned)str[6]<<16);
        __fallthrough;
    case 6 : 
        b+=((unsigned)str[5]<<8);
        __fallthrough;
    case 5 : 
        b+=str[4];
        __fallthrough;
    case 4 : 
        a+=((unsigned)str[3]<<24);
        __fallthrough;
    case 3 : 
        a+=((unsigned)str[2]<<16);
        __fallthrough;
    case 2 : 
        a+=((unsigned)str[1]<<8);
        __fallthrough;
    case 1 : 
        a+=str[0];
        __fallthrough;
        /* case 0: nothing left to add */
    }
    mix(a,b,c);
    /*-------------------------------------------- report the result */
    return c;
}

}




struct ivy_value {
    int pos;
    std::string atom;
    std::vector<ivy_value> fields;
    bool is_member() const {
        return atom.size() && fields.size();
    }
};
struct deser_err {
};

struct ivy_ser {
    virtual void  set(long long) = 0;
    virtual void  set(bool) = 0;
    virtual void  setn(long long inp, int len) = 0;
    virtual void  set(const std::string &) = 0;
    virtual void  open_list(int len) = 0;
    virtual void  close_list() = 0;
    virtual void  open_list_elem() = 0;
    virtual void  close_list_elem() = 0;
    virtual void  open_struct() = 0;
    virtual void  close_struct() = 0;
    virtual void  open_field(const std::string &) = 0;
    virtual void  close_field() = 0;
    virtual void  open_tag(int, const std::string &) {throw deser_err();}
    virtual void  close_tag() {}
    virtual ~ivy_ser(){}
};
struct ivy_binary_ser : public ivy_ser {
    std::vector<char> res;
    void setn(long long inp, int len) {
        for (int i = len-1; i >= 0 ; i--)
            res.push_back((inp>>(8*i))&0xff);
    }
    void set(long long inp) {
        setn(inp,sizeof(long long));
    }
    void set(bool inp) {
        set((long long)inp);
    }
    void set(const std::string &inp) {
        for (unsigned i = 0; i < inp.size(); i++)
            res.push_back(inp[i]);
        res.push_back(0);
    }
    void open_list(int len) {
        set((long long)len);
    }
    void close_list() {}
    void open_list_elem() {}
    void close_list_elem() {}
    void open_struct() {}
    void close_struct() {}
    virtual void  open_field(const std::string &) {}
    void close_field() {}
    virtual void  open_tag(int tag, const std::string &) {
        set((long long)tag);
    }
    virtual void  close_tag() {}
};

struct ivy_deser {
    virtual void  get(long long&) = 0;
    virtual void  get(std::string &) = 0;
    virtual void  getn(long long &res, int bytes) = 0;
    virtual void  open_list() = 0;
    virtual void  close_list() = 0;
    virtual bool  open_list_elem() = 0;
    virtual void  close_list_elem() = 0;
    virtual void  open_struct() = 0;
    virtual void  close_struct() = 0;
    virtual void  open_field(const std::string &) = 0;
    virtual void  close_field() = 0;
    virtual int   open_tag(const std::vector<std::string> &) {throw deser_err();}
    virtual void  close_tag() {}
    virtual void  end() = 0;
    virtual ~ivy_deser(){}
};

struct ivy_binary_deser : public ivy_deser {
    std::vector<char> inp;
    int pos;
    std::vector<int> lenstack;
    ivy_binary_deser(const std::vector<char> &inp) : inp(inp),pos(0) {}
    virtual bool more(unsigned bytes) {return inp.size() >= pos + bytes;}
    virtual bool can_end() {return pos == inp.size();}
    void get(long long &res) {
       getn(res,8);
    }
    void getn(long long &res, int bytes) {
        if (!more(bytes))
            throw deser_err();
        res = 0;
        for (int i = 0; i < bytes; i++)
            res = (res << 8) | (((long long)inp[pos++]) & 0xff);
    }
    void get(std::string &res) {
        while (more(1) && inp[pos]) {
//            if (inp[pos] == '"')
//                throw deser_err();
            res.push_back(inp[pos++]);
        }
        if(!(more(1) && inp[pos] == 0))
            throw deser_err();
        pos++;
    }
    void open_list() {
        long long len;
        get(len);
        lenstack.push_back(len);
    }
    void close_list() {
        lenstack.pop_back();
    }
    bool open_list_elem() {
        return lenstack.back();
    }
    void close_list_elem() {
        lenstack.back()--;
    }
    void open_struct() {}
    void close_struct() {}
    virtual void  open_field(const std::string &) {}
    void close_field() {}
    int open_tag(const std::vector<std::string> &tags) {
        long long res;
        get(res);
        if (res >= tags.size())
            throw deser_err();
        return res;
    }
    void end() {
        if (!can_end())
            throw deser_err();
    }
};
struct ivy_socket_deser : public ivy_binary_deser {
      int sock;
    public:
      ivy_socket_deser(int sock, const std::vector<char> &inp)
          : ivy_binary_deser(inp), sock(sock) {}
    virtual bool more(unsigned bytes) {
        while (inp.size() < pos + bytes) {
            int oldsize = inp.size();
            int get = pos + bytes - oldsize;
            get = (get < 1024) ? 1024 : get;
            inp.resize(oldsize + get);
            int newbytes;
	    if ((newbytes = read(sock,&inp[oldsize],get)) < 0)
		 { std::cerr << "recvfrom failed\n"; exit(1); }
            inp.resize(oldsize + newbytes);
            if (newbytes == 0)
                 return false;
        }
        return true;
    }
    virtual bool can_end() {return true;}
};

struct out_of_bounds {
    std::string txt;
    int pos;
    out_of_bounds(int _idx, int pos = 0) : pos(pos){
        std::ostringstream os;
        os << "argument " << _idx+1;
        txt = os.str();
    }
    out_of_bounds(const std::string &s, int pos = 0) : txt(s), pos(pos) {}
};

template <class T> T _arg(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <class T> T __lit(const char *);

template <>
bool _arg<bool>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (!(args[idx].atom == "true" || args[idx].atom == "false") || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return args[idx].atom == "true";
}

template <>
int _arg<int>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    long long res;
    s  >> res;
    // int res = atoi(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}

template <>
long long _arg<long long>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    long long res;
    s  >> res;
//    long long res = atoll(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}

template <>
unsigned long long _arg<unsigned long long>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    unsigned long long res;
    s  >> res;
//    unsigned long long res = atoll(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}

template <>
unsigned _arg<unsigned>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    unsigned res;
    s  >> res;
//    unsigned res = atoll(args[idx].atom.c_str());
    if (bound && (res < 0 || res >= bound) || args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return res;
}


std::ostream &operator <<(std::ostream &s, const __strlit &t){
    s << "\"" << t.c_str() << "\"";
    return s;
}

template <>
__strlit _arg<__strlit>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].fields.size())
        throw out_of_bounds(idx,args[idx].pos);
    return args[idx].atom;
}

template <class T> void __ser(ivy_ser &res, const T &inp);

template <>
void __ser<int>(ivy_ser &res, const int &inp) {
    res.set((long long)inp);
}

template <>
void __ser<long long>(ivy_ser &res, const long long &inp) {
    res.set(inp);
}

template <>
void __ser<unsigned long long>(ivy_ser &res, const unsigned long long &inp) {
    res.set((long long)inp);
}

template <>
void __ser<unsigned>(ivy_ser &res, const unsigned &inp) {
    res.set((long long)inp);
}

template <>
void __ser<bool>(ivy_ser &res, const bool &inp) {
    res.set(inp);
}

template <>
void __ser<__strlit>(ivy_ser &res, const __strlit &inp) {
    res.set(inp);
}

template <class T> void __deser(ivy_deser &inp, T &res);

template <>
void __deser<int>(ivy_deser &inp, int &res) {
    long long temp;
    inp.get(temp);
    res = temp;
}

template <>
void __deser<long long>(ivy_deser &inp, long long &res) {
    inp.get(res);
}

template <>
void __deser<unsigned long long>(ivy_deser &inp, unsigned long long &res) {
    long long temp;
    inp.get(temp);
    res = temp;
}

template <>
void __deser<unsigned>(ivy_deser &inp, unsigned &res) {
    long long temp;
    inp.get(temp);
    res = temp;
}

template <>
void __deser<__strlit>(ivy_deser &inp, __strlit &res) {
    inp.get(res);
}

template <>
void __deser<bool>(ivy_deser &inp, bool &res) {
    long long thing;
    inp.get(thing);
    res = thing;
}

class gen;


template <class T> void __from_solver( gen &g, const  z3::expr &v, T &res);

template <>
void __from_solver<int>( gen &g, const  z3::expr &v, int &res) {
    res = g.eval(v);
}

template <>
void __from_solver<long long>( gen &g, const  z3::expr &v, long long &res) {
    res = g.eval(v);
}

template <>
void __from_solver<unsigned long long>( gen &g, const  z3::expr &v, unsigned long long &res) {
    res = g.eval(v);
}

template <>
void __from_solver<unsigned>( gen &g, const  z3::expr &v, unsigned &res) {
    res = g.eval(v);
}

template <>
void __from_solver<bool>( gen &g, const  z3::expr &v, bool &res) {
    res = g.eval(v);
}

template <>
void __from_solver<__strlit>( gen &g, const  z3::expr &v, __strlit &res) {
    res = g.eval_string(v);
}

template <class T>
class to_solver_class {
};

template <class T> z3::expr __to_solver( gen &g, const  z3::expr &v, T &val) {
    return to_solver_class<T>()(g,v,val);
}


template <>
z3::expr __to_solver<int>( gen &g, const  z3::expr &v, int &val) {
    return v == g.int_to_z3(v.get_sort(),val);
}

template <>
z3::expr __to_solver<long long>( gen &g, const  z3::expr &v, long long &val) {
    return v == g.int_to_z3(v.get_sort(),val);
}

template <>
z3::expr __to_solver<unsigned long long>( gen &g, const  z3::expr &v, unsigned long long &val) {
    return v == g.int_to_z3(v.get_sort(),val);
}

template <>
z3::expr __to_solver<unsigned>( gen &g, const  z3::expr &v, unsigned &val) {
    return v == g.int_to_z3(v.get_sort(),val);
}

template <>
z3::expr __to_solver<bool>( gen &g, const  z3::expr &v, bool &val) {
    return v == g.int_to_z3(v.get_sort(),val);
}

template <>
z3::expr __to_solver<__strlit>( gen &g, const  z3::expr &v, __strlit &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    return v == g.int_to_z3(v.get_sort(),val);
}

template <class T>
class __random_string_class {
public:
    std::string operator()() {
        std::string res;
        res.push_back('a' + (rand() % 26)); // no empty strings for now
        while (rand() %2)
            res.push_back('a' + (rand() % 26));
        return res;
    }
};

template <class T> std::string __random_string(){
    return __random_string_class<T>()();
}

template <class T> void __randomize( gen &g, const  z3::expr &v);

template <>
void __randomize<int>( gen &g, const  z3::expr &v) {
    g.randomize(v);
}

template <>
void __randomize<long long>( gen &g, const  z3::expr &v) {
    g.randomize(v);
}

template <>
void __randomize<unsigned long long>( gen &g, const  z3::expr &v) {
    g.randomize(v);
}

template <>
void __randomize<unsigned>( gen &g, const  z3::expr &v) {
    g.randomize(v);
}

template <>
void __randomize<bool>( gen &g, const  z3::expr &v) {
    g.randomize(v);
}

template <>
        void __randomize<__strlit>( gen &g, const  z3::expr &apply_expr) {
    z3::sort range = apply_expr.get_sort();
    __strlit value = (rand() % 2) ? "a" : "b";
    z3::expr val_expr = g.int_to_z3(range,value);
    z3::expr pred = apply_expr == val_expr;
    g.add_alit(pred);
}

template<typename D, typename R>
class z3_thunk : public thunk<D,R> {
    public:
       virtual z3::expr to_z3(gen &g, const  z3::expr &v) = 0;
};

std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::endpoint_id &t);
template <>
quic_server_test_connection_close::endpoint_id _arg<quic_server_test_connection_close::endpoint_id>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::endpoint_id>(ivy_ser &res, const quic_server_test_connection_close::endpoint_id&);
template <>
void  __deser<quic_server_test_connection_close::endpoint_id>(ivy_deser &inp, quic_server_test_connection_close::endpoint_id &res);
template <>
void __from_solver<quic_server_test_connection_close::endpoint_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::endpoint_id &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::endpoint_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::endpoint_id &val);
template <>
void __randomize<quic_server_test_connection_close::endpoint_id>( gen &g, const  z3::expr &v);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::ip__protocol &t);
template <>
quic_server_test_connection_close::ip__protocol _arg<quic_server_test_connection_close::ip__protocol>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::ip__protocol>(ivy_ser &res, const quic_server_test_connection_close::ip__protocol&);
template <>
void  __deser<quic_server_test_connection_close::ip__protocol>(ivy_deser &inp, quic_server_test_connection_close::ip__protocol &res);
template <>
void __from_solver<quic_server_test_connection_close::ip__protocol>( gen &g, const  z3::expr &v, quic_server_test_connection_close::ip__protocol &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::ip__protocol>( gen &g, const  z3::expr &v, quic_server_test_connection_close::ip__protocol &val);
template <>
void __randomize<quic_server_test_connection_close::ip__protocol>( gen &g, const  z3::expr &v);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_packet_type &t);
template <>
quic_server_test_connection_close::quic_packet_type _arg<quic_server_test_connection_close::quic_packet_type>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::quic_packet_type>(ivy_ser &res, const quic_server_test_connection_close::quic_packet_type&);
template <>
void  __deser<quic_server_test_connection_close::quic_packet_type>(ivy_deser &inp, quic_server_test_connection_close::quic_packet_type &res);
template <>
void __from_solver<quic_server_test_connection_close::quic_packet_type>( gen &g, const  z3::expr &v, quic_server_test_connection_close::quic_packet_type &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::quic_packet_type>( gen &g, const  z3::expr &v, quic_server_test_connection_close::quic_packet_type &val);
template <>
void __randomize<quic_server_test_connection_close::quic_packet_type>( gen &g, const  z3::expr &v);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::role &t);
template <>
quic_server_test_connection_close::role _arg<quic_server_test_connection_close::role>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::role>(ivy_ser &res, const quic_server_test_connection_close::role&);
template <>
void  __deser<quic_server_test_connection_close::role>(ivy_deser &inp, quic_server_test_connection_close::role &res);
template <>
void __from_solver<quic_server_test_connection_close::role>( gen &g, const  z3::expr &v, quic_server_test_connection_close::role &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::role>( gen &g, const  z3::expr &v, quic_server_test_connection_close::role &val);
template <>
void __randomize<quic_server_test_connection_close::role>( gen &g, const  z3::expr &v);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::stream_kind &t);
template <>
quic_server_test_connection_close::stream_kind _arg<quic_server_test_connection_close::stream_kind>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::stream_kind>(ivy_ser &res, const quic_server_test_connection_close::stream_kind&);
template <>
void  __deser<quic_server_test_connection_close::stream_kind>(ivy_deser &inp, quic_server_test_connection_close::stream_kind &res);
template <>
void __from_solver<quic_server_test_connection_close::stream_kind>( gen &g, const  z3::expr &v, quic_server_test_connection_close::stream_kind &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::stream_kind>( gen &g, const  z3::expr &v, quic_server_test_connection_close::stream_kind &val);
template <>
void __randomize<quic_server_test_connection_close::stream_kind>( gen &g, const  z3::expr &v);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::ack_delay_exponent &t);
template <>
quic_server_test_connection_close::ack_delay_exponent _arg<quic_server_test_connection_close::ack_delay_exponent>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::ack_delay_exponent>(ivy_ser &res, const quic_server_test_connection_close::ack_delay_exponent&);
template <>
void  __deser<quic_server_test_connection_close::ack_delay_exponent>(ivy_deser &inp, quic_server_test_connection_close::ack_delay_exponent &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::active_connection_id_limit &t);
template <>
quic_server_test_connection_close::active_connection_id_limit _arg<quic_server_test_connection_close::active_connection_id_limit>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::active_connection_id_limit>(ivy_ser &res, const quic_server_test_connection_close::active_connection_id_limit&);
template <>
void  __deser<quic_server_test_connection_close::active_connection_id_limit>(ivy_deser &inp, quic_server_test_connection_close::active_connection_id_limit &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::disable_migration &t);
template <>
quic_server_test_connection_close::disable_migration _arg<quic_server_test_connection_close::disable_migration>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::disable_migration>(ivy_ser &res, const quic_server_test_connection_close::disable_migration&);
template <>
void  __deser<quic_server_test_connection_close::disable_migration>(ivy_deser &inp, quic_server_test_connection_close::disable_migration &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ack &t);
template <>
quic_server_test_connection_close::frame__ack _arg<quic_server_test_connection_close::frame__ack>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__ack>(ivy_ser &res, const quic_server_test_connection_close::frame__ack&);
template <>
void  __deser<quic_server_test_connection_close::frame__ack>(ivy_deser &inp, quic_server_test_connection_close::frame__ack &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ack__block &t);
template <>
quic_server_test_connection_close::frame__ack__block _arg<quic_server_test_connection_close::frame__ack__block>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__ack__block>(ivy_ser &res, const quic_server_test_connection_close::frame__ack__block&);
template <>
void  __deser<quic_server_test_connection_close::frame__ack__block>(ivy_deser &inp, quic_server_test_connection_close::frame__ack__block &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__application_close &t);
template <>
quic_server_test_connection_close::frame__application_close _arg<quic_server_test_connection_close::frame__application_close>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__application_close>(ivy_ser &res, const quic_server_test_connection_close::frame__application_close&);
template <>
void  __deser<quic_server_test_connection_close::frame__application_close>(ivy_deser &inp, quic_server_test_connection_close::frame__application_close &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__blocked &t);
template <>
quic_server_test_connection_close::frame__blocked _arg<quic_server_test_connection_close::frame__blocked>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__blocked>(ivy_ser &res, const quic_server_test_connection_close::frame__blocked&);
template <>
void  __deser<quic_server_test_connection_close::frame__blocked>(ivy_deser &inp, quic_server_test_connection_close::frame__blocked &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__connection_close &t);
template <>
quic_server_test_connection_close::frame__connection_close _arg<quic_server_test_connection_close::frame__connection_close>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__connection_close>(ivy_ser &res, const quic_server_test_connection_close::frame__connection_close&);
template <>
void  __deser<quic_server_test_connection_close::frame__connection_close>(ivy_deser &inp, quic_server_test_connection_close::frame__connection_close &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__crypto &t);
template <>
quic_server_test_connection_close::frame__crypto _arg<quic_server_test_connection_close::frame__crypto>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__crypto>(ivy_ser &res, const quic_server_test_connection_close::frame__crypto&);
template <>
void  __deser<quic_server_test_connection_close::frame__crypto>(ivy_deser &inp, quic_server_test_connection_close::frame__crypto &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__max_data &t);
template <>
quic_server_test_connection_close::frame__max_data _arg<quic_server_test_connection_close::frame__max_data>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__max_data>(ivy_ser &res, const quic_server_test_connection_close::frame__max_data&);
template <>
void  __deser<quic_server_test_connection_close::frame__max_data>(ivy_deser &inp, quic_server_test_connection_close::frame__max_data &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__max_stream_data &t);
template <>
quic_server_test_connection_close::frame__max_stream_data _arg<quic_server_test_connection_close::frame__max_stream_data>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__max_stream_data>(ivy_ser &res, const quic_server_test_connection_close::frame__max_stream_data&);
template <>
void  __deser<quic_server_test_connection_close::frame__max_stream_data>(ivy_deser &inp, quic_server_test_connection_close::frame__max_stream_data &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__max_stream_id &t);
template <>
quic_server_test_connection_close::frame__max_stream_id _arg<quic_server_test_connection_close::frame__max_stream_id>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__max_stream_id>(ivy_ser &res, const quic_server_test_connection_close::frame__max_stream_id&);
template <>
void  __deser<quic_server_test_connection_close::frame__max_stream_id>(ivy_deser &inp, quic_server_test_connection_close::frame__max_stream_id &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__new_connection_id &t);
template <>
quic_server_test_connection_close::frame__new_connection_id _arg<quic_server_test_connection_close::frame__new_connection_id>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__new_connection_id>(ivy_ser &res, const quic_server_test_connection_close::frame__new_connection_id&);
template <>
void  __deser<quic_server_test_connection_close::frame__new_connection_id>(ivy_deser &inp, quic_server_test_connection_close::frame__new_connection_id &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__new_token &t);
template <>
quic_server_test_connection_close::frame__new_token _arg<quic_server_test_connection_close::frame__new_token>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__new_token>(ivy_ser &res, const quic_server_test_connection_close::frame__new_token&);
template <>
void  __deser<quic_server_test_connection_close::frame__new_token>(ivy_deser &inp, quic_server_test_connection_close::frame__new_token &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__path_challenge &t);
template <>
quic_server_test_connection_close::frame__path_challenge _arg<quic_server_test_connection_close::frame__path_challenge>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__path_challenge>(ivy_ser &res, const quic_server_test_connection_close::frame__path_challenge&);
template <>
void  __deser<quic_server_test_connection_close::frame__path_challenge>(ivy_deser &inp, quic_server_test_connection_close::frame__path_challenge &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__path_response &t);
template <>
quic_server_test_connection_close::frame__path_response _arg<quic_server_test_connection_close::frame__path_response>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__path_response>(ivy_ser &res, const quic_server_test_connection_close::frame__path_response&);
template <>
void  __deser<quic_server_test_connection_close::frame__path_response>(ivy_deser &inp, quic_server_test_connection_close::frame__path_response &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ping &t);
template <>
quic_server_test_connection_close::frame__ping _arg<quic_server_test_connection_close::frame__ping>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__ping>(ivy_ser &res, const quic_server_test_connection_close::frame__ping&);
template <>
void  __deser<quic_server_test_connection_close::frame__ping>(ivy_deser &inp, quic_server_test_connection_close::frame__ping &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__retire_connection_id &t);
template <>
quic_server_test_connection_close::frame__retire_connection_id _arg<quic_server_test_connection_close::frame__retire_connection_id>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__retire_connection_id>(ivy_ser &res, const quic_server_test_connection_close::frame__retire_connection_id&);
template <>
void  __deser<quic_server_test_connection_close::frame__retire_connection_id>(ivy_deser &inp, quic_server_test_connection_close::frame__retire_connection_id &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__rst_stream &t);
template <>
quic_server_test_connection_close::frame__rst_stream _arg<quic_server_test_connection_close::frame__rst_stream>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__rst_stream>(ivy_ser &res, const quic_server_test_connection_close::frame__rst_stream&);
template <>
void  __deser<quic_server_test_connection_close::frame__rst_stream>(ivy_deser &inp, quic_server_test_connection_close::frame__rst_stream &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stop_sending &t);
template <>
quic_server_test_connection_close::frame__stop_sending _arg<quic_server_test_connection_close::frame__stop_sending>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__stop_sending>(ivy_ser &res, const quic_server_test_connection_close::frame__stop_sending&);
template <>
void  __deser<quic_server_test_connection_close::frame__stop_sending>(ivy_deser &inp, quic_server_test_connection_close::frame__stop_sending &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stream &t);
template <>
quic_server_test_connection_close::frame__stream _arg<quic_server_test_connection_close::frame__stream>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__stream>(ivy_ser &res, const quic_server_test_connection_close::frame__stream&);
template <>
void  __deser<quic_server_test_connection_close::frame__stream>(ivy_deser &inp, quic_server_test_connection_close::frame__stream &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stream_blocked &t);
template <>
quic_server_test_connection_close::frame__stream_blocked _arg<quic_server_test_connection_close::frame__stream_blocked>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__stream_blocked>(ivy_ser &res, const quic_server_test_connection_close::frame__stream_blocked&);
template <>
void  __deser<quic_server_test_connection_close::frame__stream_blocked>(ivy_deser &inp, quic_server_test_connection_close::frame__stream_blocked &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stream_id_blocked &t);
template <>
quic_server_test_connection_close::frame__stream_id_blocked _arg<quic_server_test_connection_close::frame__stream_id_blocked>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::frame__stream_id_blocked>(ivy_ser &res, const quic_server_test_connection_close::frame__stream_id_blocked&);
template <>
void  __deser<quic_server_test_connection_close::frame__stream_id_blocked>(ivy_deser &inp, quic_server_test_connection_close::frame__stream_id_blocked &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::idle_timeout &t);
template <>
quic_server_test_connection_close::idle_timeout _arg<quic_server_test_connection_close::idle_timeout>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::idle_timeout>(ivy_ser &res, const quic_server_test_connection_close::idle_timeout&);
template <>
void  __deser<quic_server_test_connection_close::idle_timeout>(ivy_deser &inp, quic_server_test_connection_close::idle_timeout &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_data &t);
template <>
quic_server_test_connection_close::initial_max_data _arg<quic_server_test_connection_close::initial_max_data>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::initial_max_data>(ivy_ser &res, const quic_server_test_connection_close::initial_max_data&);
template <>
void  __deser<quic_server_test_connection_close::initial_max_data>(ivy_deser &inp, quic_server_test_connection_close::initial_max_data &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_data_bidi_local &t);
template <>
quic_server_test_connection_close::initial_max_stream_data_bidi_local _arg<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_data_bidi_local&);
template <>
void  __deser<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_data_bidi_local &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_data_bidi_remote &t);
template <>
quic_server_test_connection_close::initial_max_stream_data_bidi_remote _arg<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_data_bidi_remote&);
template <>
void  __deser<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_data_bidi_remote &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_data_uni &t);
template <>
quic_server_test_connection_close::initial_max_stream_data_uni _arg<quic_server_test_connection_close::initial_max_stream_data_uni>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_data_uni>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_data_uni&);
template <>
void  __deser<quic_server_test_connection_close::initial_max_stream_data_uni>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_data_uni &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_id_bidi &t);
template <>
quic_server_test_connection_close::initial_max_stream_id_bidi _arg<quic_server_test_connection_close::initial_max_stream_id_bidi>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_id_bidi>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_id_bidi&);
template <>
void  __deser<quic_server_test_connection_close::initial_max_stream_id_bidi>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_id_bidi &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_id_uni &t);
template <>
quic_server_test_connection_close::initial_max_stream_id_uni _arg<quic_server_test_connection_close::initial_max_stream_id_uni>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_id_uni>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_id_uni&);
template <>
void  __deser<quic_server_test_connection_close::initial_max_stream_id_uni>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_id_uni &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::ip__endpoint &t);
template <>
quic_server_test_connection_close::ip__endpoint _arg<quic_server_test_connection_close::ip__endpoint>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::ip__endpoint>(ivy_ser &res, const quic_server_test_connection_close::ip__endpoint&);
template <>
void  __deser<quic_server_test_connection_close::ip__endpoint>(ivy_deser &inp, quic_server_test_connection_close::ip__endpoint &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::max_ack_delay &t);
template <>
quic_server_test_connection_close::max_ack_delay _arg<quic_server_test_connection_close::max_ack_delay>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::max_ack_delay>(ivy_ser &res, const quic_server_test_connection_close::max_ack_delay&);
template <>
void  __deser<quic_server_test_connection_close::max_ack_delay>(ivy_deser &inp, quic_server_test_connection_close::max_ack_delay &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::max_packet_size &t);
template <>
quic_server_test_connection_close::max_packet_size _arg<quic_server_test_connection_close::max_packet_size>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::max_packet_size>(ivy_ser &res, const quic_server_test_connection_close::max_packet_size&);
template <>
void  __deser<quic_server_test_connection_close::max_packet_size>(ivy_deser &inp, quic_server_test_connection_close::max_packet_size &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::preferred_address &t);
template <>
quic_server_test_connection_close::preferred_address _arg<quic_server_test_connection_close::preferred_address>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::preferred_address>(ivy_ser &res, const quic_server_test_connection_close::preferred_address&);
template <>
void  __deser<quic_server_test_connection_close::preferred_address>(ivy_deser &inp, quic_server_test_connection_close::preferred_address &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::prot__header_info &t);
template <>
quic_server_test_connection_close::prot__header_info _arg<quic_server_test_connection_close::prot__header_info>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::prot__header_info>(ivy_ser &res, const quic_server_test_connection_close::prot__header_info&);
template <>
void  __deser<quic_server_test_connection_close::prot__header_info>(ivy_deser &inp, quic_server_test_connection_close::prot__header_info &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_packet &t);
template <>
quic_server_test_connection_close::quic_packet _arg<quic_server_test_connection_close::quic_packet>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::quic_packet>(ivy_ser &res, const quic_server_test_connection_close::quic_packet&);
template <>
void  __deser<quic_server_test_connection_close::quic_packet>(ivy_deser &inp, quic_server_test_connection_close::quic_packet &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_transport_parameters &t);
template <>
quic_server_test_connection_close::quic_transport_parameters _arg<quic_server_test_connection_close::quic_transport_parameters>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::quic_transport_parameters>(ivy_ser &res, const quic_server_test_connection_close::quic_transport_parameters&);
template <>
void  __deser<quic_server_test_connection_close::quic_transport_parameters>(ivy_deser &inp, quic_server_test_connection_close::quic_transport_parameters &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::stateless_reset_token &t);
template <>
quic_server_test_connection_close::stateless_reset_token _arg<quic_server_test_connection_close::stateless_reset_token>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::stateless_reset_token>(ivy_ser &res, const quic_server_test_connection_close::stateless_reset_token&);
template <>
void  __deser<quic_server_test_connection_close::stateless_reset_token>(ivy_deser &inp, quic_server_test_connection_close::stateless_reset_token &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__client_hello &t);
template <>
quic_server_test_connection_close::tls__client_hello _arg<quic_server_test_connection_close::tls__client_hello>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__client_hello>(ivy_ser &res, const quic_server_test_connection_close::tls__client_hello&);
template <>
void  __deser<quic_server_test_connection_close::tls__client_hello>(ivy_deser &inp, quic_server_test_connection_close::tls__client_hello &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__encrypted_extensions &t);
template <>
quic_server_test_connection_close::tls__encrypted_extensions _arg<quic_server_test_connection_close::tls__encrypted_extensions>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__encrypted_extensions>(ivy_ser &res, const quic_server_test_connection_close::tls__encrypted_extensions&);
template <>
void  __deser<quic_server_test_connection_close::tls__encrypted_extensions>(ivy_deser &inp, quic_server_test_connection_close::tls__encrypted_extensions &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__handshake_parser__result &t);
template <>
quic_server_test_connection_close::tls__handshake_parser__result _arg<quic_server_test_connection_close::tls__handshake_parser__result>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__handshake_parser__result>(ivy_ser &res, const quic_server_test_connection_close::tls__handshake_parser__result&);
template <>
void  __deser<quic_server_test_connection_close::tls__handshake_parser__result>(ivy_deser &inp, quic_server_test_connection_close::tls__handshake_parser__result &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__random &t);
template <>
quic_server_test_connection_close::tls__random _arg<quic_server_test_connection_close::tls__random>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__random>(ivy_ser &res, const quic_server_test_connection_close::tls__random&);
template <>
void  __deser<quic_server_test_connection_close::tls__random>(ivy_deser &inp, quic_server_test_connection_close::tls__random &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__server_hello &t);
template <>
quic_server_test_connection_close::tls__server_hello _arg<quic_server_test_connection_close::tls__server_hello>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__server_hello>(ivy_ser &res, const quic_server_test_connection_close::tls__server_hello&);
template <>
void  __deser<quic_server_test_connection_close::tls__server_hello>(ivy_deser &inp, quic_server_test_connection_close::tls__server_hello &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__unknown_extension &t);
template <>
quic_server_test_connection_close::tls__unknown_extension _arg<quic_server_test_connection_close::tls__unknown_extension>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__unknown_extension>(ivy_ser &res, const quic_server_test_connection_close::tls__unknown_extension&);
template <>
void  __deser<quic_server_test_connection_close::tls__unknown_extension>(ivy_deser &inp, quic_server_test_connection_close::tls__unknown_extension &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__unknown_message &t);
template <>
quic_server_test_connection_close::tls__unknown_message _arg<quic_server_test_connection_close::tls__unknown_message>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls__unknown_message>(ivy_ser &res, const quic_server_test_connection_close::tls__unknown_message&);
template <>
void  __deser<quic_server_test_connection_close::tls__unknown_message>(ivy_deser &inp, quic_server_test_connection_close::tls__unknown_message &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls_api__upper__decrypt_result &t);
template <>
quic_server_test_connection_close::tls_api__upper__decrypt_result _arg<quic_server_test_connection_close::tls_api__upper__decrypt_result>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::tls_api__upper__decrypt_result>(ivy_ser &res, const quic_server_test_connection_close::tls_api__upper__decrypt_result&);
template <>
void  __deser<quic_server_test_connection_close::tls_api__upper__decrypt_result>(ivy_deser &inp, quic_server_test_connection_close::tls_api__upper__decrypt_result &res);
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::trans_params_struct &t);
template <>
quic_server_test_connection_close::trans_params_struct _arg<quic_server_test_connection_close::trans_params_struct>(std::vector<ivy_value> &args, unsigned idx, long long bound);
template <>
void  __ser<quic_server_test_connection_close::trans_params_struct>(ivy_ser &res, const quic_server_test_connection_close::trans_params_struct&);
template <>
void  __deser<quic_server_test_connection_close::trans_params_struct>(ivy_deser &inp, quic_server_test_connection_close::trans_params_struct &res);
template <>
void __from_solver<quic_server_test_connection_close::ack_delay_exponent>( gen &g, const  z3::expr &v, quic_server_test_connection_close::ack_delay_exponent &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::ack_delay_exponent>( gen &g, const  z3::expr &v, quic_server_test_connection_close::ack_delay_exponent &val);
template <>
void __randomize<quic_server_test_connection_close::ack_delay_exponent>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::active_connection_id_limit>( gen &g, const  z3::expr &v, quic_server_test_connection_close::active_connection_id_limit &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::active_connection_id_limit>( gen &g, const  z3::expr &v, quic_server_test_connection_close::active_connection_id_limit &val);
template <>
void __randomize<quic_server_test_connection_close::active_connection_id_limit>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::disable_migration>( gen &g, const  z3::expr &v, quic_server_test_connection_close::disable_migration &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::disable_migration>( gen &g, const  z3::expr &v, quic_server_test_connection_close::disable_migration &val);
template <>
void __randomize<quic_server_test_connection_close::disable_migration>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__ack>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__ack &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__ack>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__ack &val);
template <>
void __randomize<quic_server_test_connection_close::frame__ack>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__ack__block>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__ack__block &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__ack__block>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__ack__block &val);
template <>
void __randomize<quic_server_test_connection_close::frame__ack__block>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__application_close>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__application_close &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__application_close>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__application_close &val);
template <>
void __randomize<quic_server_test_connection_close::frame__application_close>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__blocked>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__blocked &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__blocked>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__blocked &val);
template <>
void __randomize<quic_server_test_connection_close::frame__blocked>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__connection_close>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__connection_close &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__connection_close>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__connection_close &val);
template <>
void __randomize<quic_server_test_connection_close::frame__connection_close>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__crypto>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__crypto &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__crypto>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__crypto &val);
template <>
void __randomize<quic_server_test_connection_close::frame__crypto>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__max_data>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__max_data &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__max_data>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__max_data &val);
template <>
void __randomize<quic_server_test_connection_close::frame__max_data>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__max_stream_data>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__max_stream_data &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__max_stream_data>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__max_stream_data &val);
template <>
void __randomize<quic_server_test_connection_close::frame__max_stream_data>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__max_stream_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__max_stream_id &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__max_stream_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__max_stream_id &val);
template <>
void __randomize<quic_server_test_connection_close::frame__max_stream_id>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__new_connection_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__new_connection_id &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__new_connection_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__new_connection_id &val);
template <>
void __randomize<quic_server_test_connection_close::frame__new_connection_id>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__new_token>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__new_token &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__new_token>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__new_token &val);
template <>
void __randomize<quic_server_test_connection_close::frame__new_token>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__path_challenge>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__path_challenge &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__path_challenge>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__path_challenge &val);
template <>
void __randomize<quic_server_test_connection_close::frame__path_challenge>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__path_response>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__path_response &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__path_response>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__path_response &val);
template <>
void __randomize<quic_server_test_connection_close::frame__path_response>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__ping>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__ping &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__ping>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__ping &val);
template <>
void __randomize<quic_server_test_connection_close::frame__ping>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__retire_connection_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__retire_connection_id &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__retire_connection_id>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__retire_connection_id &val);
template <>
void __randomize<quic_server_test_connection_close::frame__retire_connection_id>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__rst_stream>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__rst_stream &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__rst_stream>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__rst_stream &val);
template <>
void __randomize<quic_server_test_connection_close::frame__rst_stream>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__stop_sending>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stop_sending &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__stop_sending>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stop_sending &val);
template <>
void __randomize<quic_server_test_connection_close::frame__stop_sending>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__stream>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stream &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__stream>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stream &val);
template <>
void __randomize<quic_server_test_connection_close::frame__stream>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__stream_blocked>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stream_blocked &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__stream_blocked>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stream_blocked &val);
template <>
void __randomize<quic_server_test_connection_close::frame__stream_blocked>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::frame__stream_id_blocked>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stream_id_blocked &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame__stream_id_blocked>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame__stream_id_blocked &val);
template <>
void __randomize<quic_server_test_connection_close::frame__stream_id_blocked>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::idle_timeout>( gen &g, const  z3::expr &v, quic_server_test_connection_close::idle_timeout &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::idle_timeout>( gen &g, const  z3::expr &v, quic_server_test_connection_close::idle_timeout &val);
template <>
void __randomize<quic_server_test_connection_close::idle_timeout>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::initial_max_data>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_data &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::initial_max_data>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_data &val);
template <>
void __randomize<quic_server_test_connection_close::initial_max_data>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_local>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_data_bidi_local &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_local>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_data_bidi_local &val);
template <>
void __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_local>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_data_bidi_remote &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_data_bidi_remote &val);
template <>
void __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::initial_max_stream_data_uni>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_data_uni &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::initial_max_stream_data_uni>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_data_uni &val);
template <>
void __randomize<quic_server_test_connection_close::initial_max_stream_data_uni>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::initial_max_stream_id_bidi>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_id_bidi &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::initial_max_stream_id_bidi>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_id_bidi &val);
template <>
void __randomize<quic_server_test_connection_close::initial_max_stream_id_bidi>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::initial_max_stream_id_uni>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_id_uni &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::initial_max_stream_id_uni>( gen &g, const  z3::expr &v, quic_server_test_connection_close::initial_max_stream_id_uni &val);
template <>
void __randomize<quic_server_test_connection_close::initial_max_stream_id_uni>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::ip__endpoint>( gen &g, const  z3::expr &v, quic_server_test_connection_close::ip__endpoint &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::ip__endpoint>( gen &g, const  z3::expr &v, quic_server_test_connection_close::ip__endpoint &val);
template <>
void __randomize<quic_server_test_connection_close::ip__endpoint>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::max_ack_delay>( gen &g, const  z3::expr &v, quic_server_test_connection_close::max_ack_delay &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::max_ack_delay>( gen &g, const  z3::expr &v, quic_server_test_connection_close::max_ack_delay &val);
template <>
void __randomize<quic_server_test_connection_close::max_ack_delay>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::max_packet_size>( gen &g, const  z3::expr &v, quic_server_test_connection_close::max_packet_size &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::max_packet_size>( gen &g, const  z3::expr &v, quic_server_test_connection_close::max_packet_size &val);
template <>
void __randomize<quic_server_test_connection_close::max_packet_size>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::preferred_address>( gen &g, const  z3::expr &v, quic_server_test_connection_close::preferred_address &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::preferred_address>( gen &g, const  z3::expr &v, quic_server_test_connection_close::preferred_address &val);
template <>
void __randomize<quic_server_test_connection_close::preferred_address>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::prot__header_info>( gen &g, const  z3::expr &v, quic_server_test_connection_close::prot__header_info &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::prot__header_info>( gen &g, const  z3::expr &v, quic_server_test_connection_close::prot__header_info &val);
template <>
void __randomize<quic_server_test_connection_close::prot__header_info>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::quic_packet>( gen &g, const  z3::expr &v, quic_server_test_connection_close::quic_packet &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::quic_packet>( gen &g, const  z3::expr &v, quic_server_test_connection_close::quic_packet &val);
template <>
void __randomize<quic_server_test_connection_close::quic_packet>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::quic_transport_parameters>( gen &g, const  z3::expr &v, quic_server_test_connection_close::quic_transport_parameters &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::quic_transport_parameters>( gen &g, const  z3::expr &v, quic_server_test_connection_close::quic_transport_parameters &val);
template <>
void __randomize<quic_server_test_connection_close::quic_transport_parameters>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::stateless_reset_token>( gen &g, const  z3::expr &v, quic_server_test_connection_close::stateless_reset_token &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::stateless_reset_token>( gen &g, const  z3::expr &v, quic_server_test_connection_close::stateless_reset_token &val);
template <>
void __randomize<quic_server_test_connection_close::stateless_reset_token>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__client_hello>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__client_hello &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__client_hello>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__client_hello &val);
template <>
void __randomize<quic_server_test_connection_close::tls__client_hello>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__encrypted_extensions>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__encrypted_extensions &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__encrypted_extensions>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__encrypted_extensions &val);
template <>
void __randomize<quic_server_test_connection_close::tls__encrypted_extensions>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__handshake_parser__result>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__handshake_parser__result &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__handshake_parser__result>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__handshake_parser__result &val);
template <>
void __randomize<quic_server_test_connection_close::tls__handshake_parser__result>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__random>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__random &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__random>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__random &val);
template <>
void __randomize<quic_server_test_connection_close::tls__random>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__server_hello>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__server_hello &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__server_hello>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__server_hello &val);
template <>
void __randomize<quic_server_test_connection_close::tls__server_hello>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__unknown_extension>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__unknown_extension &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__unknown_extension>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__unknown_extension &val);
template <>
void __randomize<quic_server_test_connection_close::tls__unknown_extension>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls__unknown_message>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__unknown_message &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__unknown_message>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__unknown_message &val);
template <>
void __randomize<quic_server_test_connection_close::tls__unknown_message>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::tls_api__upper__decrypt_result>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls_api__upper__decrypt_result &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls_api__upper__decrypt_result>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls_api__upper__decrypt_result &val);
template <>
void __randomize<quic_server_test_connection_close::tls_api__upper__decrypt_result>( gen &g, const  z3::expr &v);
template <>
void __from_solver<quic_server_test_connection_close::trans_params_struct>( gen &g, const  z3::expr &v, quic_server_test_connection_close::trans_params_struct &res);
template <>
z3::expr __to_solver<quic_server_test_connection_close::trans_params_struct>( gen &g, const  z3::expr &v, quic_server_test_connection_close::trans_params_struct &val);
template <>
void __randomize<quic_server_test_connection_close::trans_params_struct>( gen &g, const  z3::expr &v);
bool operator==(const quic_server_test_connection_close::__tup__cid__unsigned &x, const quic_server_test_connection_close::__tup__cid__unsigned &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1;
}
bool operator==(const quic_server_test_connection_close::__tup__cid__stream_kind &x, const quic_server_test_connection_close::__tup__cid__stream_kind &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1;
}
bool operator==(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &x, const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1 && x.arg2 == y.arg2;
}
bool operator==(const quic_server_test_connection_close::__tup__cid__quic_packet_type &x, const quic_server_test_connection_close::__tup__cid__quic_packet_type &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1;
}
bool operator==(const quic_server_test_connection_close::__tup__ip__endpoint__cid &x, const quic_server_test_connection_close::__tup__ip__endpoint__cid &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1;
}
bool operator==(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long &x, const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1 && x.arg2 == y.arg2;
}
bool operator==(const quic_server_test_connection_close::__tup__cid__ip__endpoint &x, const quic_server_test_connection_close::__tup__cid__ip__endpoint &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1;
}
bool operator==(const quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid &x, const quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1 && x.arg2 == y.arg2;
}
bool operator==(const quic_server_test_connection_close::__tup__cid__stream_data &x, const quic_server_test_connection_close::__tup__cid__stream_data &y){
    return x.arg0 == y.arg0 && x.arg1 == y.arg1;
}

hash_space::hash_map<IntClass,int> quic_server_test_connection_close::cid::x_to_bv_hash;
hash_space::hash_map<int,IntClass> quic_server_test_connection_close::cid::bv_to_x_hash;
std::vector<IntClass> quic_server_test_connection_close::cid::nonces;
int quic_server_test_connection_close::cid::next_bv = 0;

#ifdef Z3PP_H_
template <>
void __from_solver<quic_server_test_connection_close::cid>( gen &g, const  z3::expr &v, quic_server_test_connection_close::cid &res) {
    res = quic_server_test_connection_close::cid::bv_to_x(g.eval(v));
}
template <>
z3::expr __to_solver<quic_server_test_connection_close::cid>( gen &g, const  z3::expr &v, quic_server_test_connection_close::cid &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    return v == g.int_to_z3(v.get_sort(),quic_server_test_connection_close::cid::x_to_bv(val));
}
template <>
void __randomize<quic_server_test_connection_close::cid>( gen &g, const  z3::expr &apply_expr) {
    z3::sort range = apply_expr.get_sort();
    quic_server_test_connection_close::cid value;
    if (quic_server_test_connection_close::cid::bv_to_x_hash.size() == (1<<2)) {
        value = quic_server_test_connection_close::cid::bv_to_x(rand() % (1<<2));
    } else {
        if (quic_server_test_connection_close::cid::nonces.size() == 0) 
           for (int i = 0; i < 2; i++)
               quic_server_test_connection_close::cid::nonces.push_back(quic_server_test_connection_close::cid::random_x());
        value = quic_server_test_connection_close::cid::nonces[rand() % quic_server_test_connection_close::cid::nonces.size()];
    }
    z3::expr val_expr = g.int_to_z3(range,quic_server_test_connection_close::cid::x_to_bv(value));
    z3::expr pred = apply_expr == val_expr;
    g.add_alit(pred);
}

#endif

std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::cid &t){
    s << t.val;
    return s;
}
template <>
quic_server_test_connection_close::cid _arg<quic_server_test_connection_close::cid>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].fields.size())
        throw out_of_bounds(idx);
    quic_server_test_connection_close::cid res;
//    res.val = atoll(args[idx].atom.c_str());
    std::istringstream s(args[idx].atom.c_str());
    s.unsetf(std::ios::dec);
    s.unsetf(std::ios::hex);
    s.unsetf(std::ios::oct);
    s  >> res.val;
//    unsigned long long res = atoll(args[idx].atom.c_str());
    return res;
}
template <>
void __ser<quic_server_test_connection_close::cid>(ivy_ser &res, const quic_server_test_connection_close::cid &inp) {
    res.set(inp.val);
}
template <>
void __deser<quic_server_test_connection_close::cid>(ivy_deser &inp, quic_server_test_connection_close::cid &res) {
    inp.get(res.val);
}
IntClass quic_server_test_connection_close::cid::random_x(){
    return ((rand()%13) + 1);
}

int quic_server_test_connection_close::tls__handshake::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__handshake &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "tls.client_hello:" << quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__client_hello >(t); break;
        case 1: s << "tls.server_hello:" << quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__server_hello >(t); break;
        case 2: s << "tls.encrypted_extensions:" << quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__encrypted_extensions >(t); break;
        case 3: s << "tls.unknown_message:" << quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__unknown_message >(t); break;

    }
    s << "}";
    return s;
}
template <>
quic_server_test_connection_close::tls__handshake _arg<quic_server_test_connection_close::tls__handshake>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort tls.handshake: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return quic_server_test_connection_close::tls__handshake();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort tls.handshake (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "tls.client_hello") return quic_server_test_connection_close::tls__handshake(0, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__client_hello>(_arg<quic_server_test_connection_close::tls__client_hello>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "tls.server_hello") return quic_server_test_connection_close::tls__handshake(1, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__server_hello>(_arg<quic_server_test_connection_close::tls__server_hello>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "tls.encrypted_extensions") return quic_server_test_connection_close::tls__handshake(2, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__encrypted_extensions>(_arg<quic_server_test_connection_close::tls__encrypted_extensions>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "tls.unknown_message") return quic_server_test_connection_close::tls__handshake(3, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__unknown_message>(_arg<quic_server_test_connection_close::tls__unknown_message>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<quic_server_test_connection_close::tls__handshake>(ivy_ser &res, const quic_server_test_connection_close::tls__handshake &inp) {
    if (inp.tag == 0) {res.open_tag(0,"tls.client_hello"); __ser(res,quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__client_hello >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"tls.server_hello"); __ser(res,quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__server_hello >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"tls.encrypted_extensions"); __ser(res,quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__encrypted_extensions >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"tls.unknown_message"); __ser(res,quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__unknown_message >(inp)); res.close_tag();}

}
template <>
void __deser<quic_server_test_connection_close::tls__handshake>(ivy_deser &res, quic_server_test_connection_close::tls__handshake &inp) {
    std::vector<std::string> tags;
    tags.push_back("tls.client_hello");
    tags.push_back("tls.server_hello");
    tags.push_back("tls.encrypted_extensions");
    tags.push_back("tls.unknown_message");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {quic_server_test_connection_close::tls__client_hello tmp; __deser(res,tmp); inp = quic_server_test_connection_close::tls__handshake(0, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__client_hello>(tmp)); break;} 
    case 1: {quic_server_test_connection_close::tls__server_hello tmp; __deser(res,tmp); inp = quic_server_test_connection_close::tls__handshake(1, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__server_hello>(tmp)); break;} 
    case 2: {quic_server_test_connection_close::tls__encrypted_extensions tmp; __deser(res,tmp); inp = quic_server_test_connection_close::tls__handshake(2, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__encrypted_extensions>(tmp)); break;} 
    case 3: {quic_server_test_connection_close::tls__unknown_message tmp; __deser(res,tmp); inp = quic_server_test_connection_close::tls__handshake(3, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__unknown_message>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<quic_server_test_connection_close::tls__handshake>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__handshake &res) {
    {
        z3::sort sort = g.sort("tls.client_hello");
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.client_hello",g.sort("tls.handshake"),g.sort("tls.client_hello"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::tls__client_hello tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::tls__handshake(0, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__client_hello>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("tls.server_hello");
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.server_hello",g.sort("tls.handshake"),g.sort("tls.server_hello"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::tls__server_hello tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::tls__handshake(1, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__server_hello>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("tls.encrypted_extensions");
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.encrypted_extensions",g.sort("tls.handshake"),g.sort("tls.encrypted_extensions"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::tls__encrypted_extensions tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::tls__handshake(2, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__encrypted_extensions>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("tls.unknown_message");
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.unknown_message",g.sort("tls.handshake"),g.sort("tls.unknown_message"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::tls__unknown_message tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::tls__handshake(3, new quic_server_test_connection_close::tls__handshake::twrap<quic_server_test_connection_close::tls__unknown_message>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__handshake>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__handshake &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.client_hello",g.sort("tls.handshake"),g.sort("tls.client_hello"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("tls.client_hello"));
        quic_server_test_connection_close::tls__client_hello tmp = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__client_hello >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.server_hello",g.sort("tls.handshake"),g.sort("tls.server_hello"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("tls.server_hello"));
        quic_server_test_connection_close::tls__server_hello tmp = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__server_hello >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.encrypted_extensions",g.sort("tls.handshake"),g.sort("tls.encrypted_extensions"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("tls.encrypted_extensions"));
        quic_server_test_connection_close::tls__encrypted_extensions tmp = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__encrypted_extensions >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.unknown_message",g.sort("tls.handshake"),g.sort("tls.unknown_message"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("tls.unknown_message"));
        quic_server_test_connection_close::tls__unknown_message tmp = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__unknown_message >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.client_hello",g.sort("tls.handshake"),g.sort("tls.client_hello"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("tls.client_hello"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.server_hello",g.sort("tls.handshake"),g.sort("tls.server_hello"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("tls.server_hello"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.encrypted_extensions",g.sort("tls.handshake"),g.sort("tls.encrypted_extensions"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("tls.encrypted_extensions"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.unknown_message",g.sort("tls.handshake"),g.sort("tls.unknown_message"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("tls.unknown_message"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<quic_server_test_connection_close::tls__handshake>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__tls.handshake__tmp" << quic_server_test_connection_close::tls__handshake::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 4;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.client_hello",g.sort("tls.handshake"),g.sort("tls.client_hello"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("tls.client_hello"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::tls__client_hello>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.server_hello",g.sort("tls.handshake"),g.sort("tls.server_hello"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("tls.server_hello"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::tls__server_hello>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.encrypted_extensions",g.sort("tls.handshake"),g.sort("tls.encrypted_extensions"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("tls.encrypted_extensions"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::tls__encrypted_extensions>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:tls.handshake:tls.unknown_message",g.sort("tls.handshake"),g.sort("tls.unknown_message"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("tls.unknown_message"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::tls__unknown_message>(g,X);
    }

}
#endif

int quic_server_test_connection_close::tls__extension::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__extension &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "tls.unknown_extension:" << quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::tls__unknown_extension >(t); break;
        case 1: s << "quic_transport_parameters:" << quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::quic_transport_parameters >(t); break;

    }
    s << "}";
    return s;
}
template <>
quic_server_test_connection_close::tls__extension _arg<quic_server_test_connection_close::tls__extension>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort tls.extension: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return quic_server_test_connection_close::tls__extension();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort tls.extension (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "tls.unknown_extension") return quic_server_test_connection_close::tls__extension(0, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::tls__unknown_extension>(_arg<quic_server_test_connection_close::tls__unknown_extension>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "quic_transport_parameters") return quic_server_test_connection_close::tls__extension(1, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::quic_transport_parameters>(_arg<quic_server_test_connection_close::quic_transport_parameters>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<quic_server_test_connection_close::tls__extension>(ivy_ser &res, const quic_server_test_connection_close::tls__extension &inp) {
    if (inp.tag == 0) {res.open_tag(0,"tls.unknown_extension"); __ser(res,quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::tls__unknown_extension >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"quic_transport_parameters"); __ser(res,quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::quic_transport_parameters >(inp)); res.close_tag();}

}
template <>
void __deser<quic_server_test_connection_close::tls__extension>(ivy_deser &res, quic_server_test_connection_close::tls__extension &inp) {
    std::vector<std::string> tags;
    tags.push_back("tls.unknown_extension");
    tags.push_back("quic_transport_parameters");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {quic_server_test_connection_close::tls__unknown_extension tmp; __deser(res,tmp); inp = quic_server_test_connection_close::tls__extension(0, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::tls__unknown_extension>(tmp)); break;} 
    case 1: {quic_server_test_connection_close::quic_transport_parameters tmp; __deser(res,tmp); inp = quic_server_test_connection_close::tls__extension(1, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::quic_transport_parameters>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<quic_server_test_connection_close::tls__extension>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__extension &res) {
    {
        z3::sort sort = g.sort("tls.unknown_extension");
        z3::func_decl pto = g.ctx.function("*>:tls.extension:tls.unknown_extension",g.sort("tls.extension"),g.sort("tls.unknown_extension"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::tls__unknown_extension tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::tls__extension(0, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::tls__unknown_extension>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("quic_transport_parameters");
        z3::func_decl pto = g.ctx.function("*>:tls.extension:quic_transport_parameters",g.sort("tls.extension"),g.sort("quic_transport_parameters"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::quic_transport_parameters tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::tls__extension(1, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::quic_transport_parameters>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<quic_server_test_connection_close::tls__extension>( gen &g, const  z3::expr &v, quic_server_test_connection_close::tls__extension &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:tls.extension:tls.unknown_extension",g.sort("tls.extension"),g.sort("tls.unknown_extension"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("tls.unknown_extension"));
        quic_server_test_connection_close::tls__unknown_extension tmp = quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::tls__unknown_extension >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:tls.extension:quic_transport_parameters",g.sort("tls.extension"),g.sort("quic_transport_parameters"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("quic_transport_parameters"));
        quic_server_test_connection_close::quic_transport_parameters tmp = quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::quic_transport_parameters >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:tls.extension:tls.unknown_extension",g.sort("tls.extension"),g.sort("tls.unknown_extension"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("tls.unknown_extension"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:tls.extension:quic_transport_parameters",g.sort("tls.extension"),g.sort("quic_transport_parameters"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("quic_transport_parameters"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<quic_server_test_connection_close::tls__extension>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__tls.extension__tmp" << quic_server_test_connection_close::tls__extension::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 2;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:tls.extension:tls.unknown_extension",g.sort("tls.extension"),g.sort("tls.unknown_extension"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("tls.unknown_extension"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::tls__unknown_extension>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:tls.extension:quic_transport_parameters",g.sort("tls.extension"),g.sort("quic_transport_parameters"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("quic_transport_parameters"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::quic_transport_parameters>(g,X);
    }

}
#endif

int quic_server_test_connection_close::frame::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "frame.stream:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream >(t); break;
        case 1: s << "frame.ack:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ack >(t); break;
        case 2: s << "frame.rst_stream:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__rst_stream >(t); break;
        case 3: s << "frame.max_stream_id:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_id >(t); break;
        case 4: s << "frame.connection_close:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__connection_close >(t); break;
        case 5: s << "frame.max_stream_data:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_data >(t); break;
        case 6: s << "frame.stream_id_blocked:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_id_blocked >(t); break;
        case 7: s << "frame.crypto:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__crypto >(t); break;
        case 8: s << "frame.ping:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ping >(t); break;
        case 9: s << "frame.application_close:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__application_close >(t); break;
        case 10: s << "frame.new_connection_id:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_connection_id >(t); break;
        case 11: s << "frame.path_challenge:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_challenge >(t); break;
        case 12: s << "frame.path_response:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_response >(t); break;
        case 13: s << "frame.new_token:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_token >(t); break;
        case 14: s << "frame.max_data:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_data >(t); break;
        case 15: s << "frame.stream_blocked:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_blocked >(t); break;
        case 16: s << "frame.stop_sending:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stop_sending >(t); break;
        case 17: s << "frame.blocked:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__blocked >(t); break;
        case 18: s << "frame.retire_connection_id:" << quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__retire_connection_id >(t); break;

    }
    s << "}";
    return s;
}
template <>
quic_server_test_connection_close::frame _arg<quic_server_test_connection_close::frame>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort frame: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return quic_server_test_connection_close::frame();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort frame (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "frame.stream") return quic_server_test_connection_close::frame(0, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream>(_arg<quic_server_test_connection_close::frame__stream>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.ack") return quic_server_test_connection_close::frame(1, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ack>(_arg<quic_server_test_connection_close::frame__ack>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.rst_stream") return quic_server_test_connection_close::frame(2, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__rst_stream>(_arg<quic_server_test_connection_close::frame__rst_stream>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.max_stream_id") return quic_server_test_connection_close::frame(3, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_id>(_arg<quic_server_test_connection_close::frame__max_stream_id>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.connection_close") return quic_server_test_connection_close::frame(4, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__connection_close>(_arg<quic_server_test_connection_close::frame__connection_close>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.max_stream_data") return quic_server_test_connection_close::frame(5, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_data>(_arg<quic_server_test_connection_close::frame__max_stream_data>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.stream_id_blocked") return quic_server_test_connection_close::frame(6, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_id_blocked>(_arg<quic_server_test_connection_close::frame__stream_id_blocked>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.crypto") return quic_server_test_connection_close::frame(7, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__crypto>(_arg<quic_server_test_connection_close::frame__crypto>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.ping") return quic_server_test_connection_close::frame(8, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ping>(_arg<quic_server_test_connection_close::frame__ping>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.application_close") return quic_server_test_connection_close::frame(9, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__application_close>(_arg<quic_server_test_connection_close::frame__application_close>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.new_connection_id") return quic_server_test_connection_close::frame(10, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_connection_id>(_arg<quic_server_test_connection_close::frame__new_connection_id>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.path_challenge") return quic_server_test_connection_close::frame(11, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_challenge>(_arg<quic_server_test_connection_close::frame__path_challenge>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.path_response") return quic_server_test_connection_close::frame(12, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_response>(_arg<quic_server_test_connection_close::frame__path_response>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.new_token") return quic_server_test_connection_close::frame(13, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_token>(_arg<quic_server_test_connection_close::frame__new_token>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.max_data") return quic_server_test_connection_close::frame(14, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_data>(_arg<quic_server_test_connection_close::frame__max_data>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.stream_blocked") return quic_server_test_connection_close::frame(15, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_blocked>(_arg<quic_server_test_connection_close::frame__stream_blocked>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.stop_sending") return quic_server_test_connection_close::frame(16, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stop_sending>(_arg<quic_server_test_connection_close::frame__stop_sending>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.blocked") return quic_server_test_connection_close::frame(17, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__blocked>(_arg<quic_server_test_connection_close::frame__blocked>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "frame.retire_connection_id") return quic_server_test_connection_close::frame(18, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__retire_connection_id>(_arg<quic_server_test_connection_close::frame__retire_connection_id>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<quic_server_test_connection_close::frame>(ivy_ser &res, const quic_server_test_connection_close::frame &inp) {
    if (inp.tag == 0) {res.open_tag(0,"frame.stream"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"frame.ack"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ack >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"frame.rst_stream"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__rst_stream >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"frame.max_stream_id"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_id >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"frame.connection_close"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__connection_close >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"frame.max_stream_data"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_data >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"frame.stream_id_blocked"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_id_blocked >(inp)); res.close_tag();}
    if (inp.tag == 7) {res.open_tag(7,"frame.crypto"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__crypto >(inp)); res.close_tag();}
    if (inp.tag == 8) {res.open_tag(8,"frame.ping"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ping >(inp)); res.close_tag();}
    if (inp.tag == 9) {res.open_tag(9,"frame.application_close"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__application_close >(inp)); res.close_tag();}
    if (inp.tag == 10) {res.open_tag(10,"frame.new_connection_id"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_connection_id >(inp)); res.close_tag();}
    if (inp.tag == 11) {res.open_tag(11,"frame.path_challenge"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_challenge >(inp)); res.close_tag();}
    if (inp.tag == 12) {res.open_tag(12,"frame.path_response"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_response >(inp)); res.close_tag();}
    if (inp.tag == 13) {res.open_tag(13,"frame.new_token"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_token >(inp)); res.close_tag();}
    if (inp.tag == 14) {res.open_tag(14,"frame.max_data"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_data >(inp)); res.close_tag();}
    if (inp.tag == 15) {res.open_tag(15,"frame.stream_blocked"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_blocked >(inp)); res.close_tag();}
    if (inp.tag == 16) {res.open_tag(16,"frame.stop_sending"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stop_sending >(inp)); res.close_tag();}
    if (inp.tag == 17) {res.open_tag(17,"frame.blocked"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__blocked >(inp)); res.close_tag();}
    if (inp.tag == 18) {res.open_tag(18,"frame.retire_connection_id"); __ser(res,quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__retire_connection_id >(inp)); res.close_tag();}

}
template <>
void __deser<quic_server_test_connection_close::frame>(ivy_deser &res, quic_server_test_connection_close::frame &inp) {
    std::vector<std::string> tags;
    tags.push_back("frame.stream");
    tags.push_back("frame.ack");
    tags.push_back("frame.rst_stream");
    tags.push_back("frame.max_stream_id");
    tags.push_back("frame.connection_close");
    tags.push_back("frame.max_stream_data");
    tags.push_back("frame.stream_id_blocked");
    tags.push_back("frame.crypto");
    tags.push_back("frame.ping");
    tags.push_back("frame.application_close");
    tags.push_back("frame.new_connection_id");
    tags.push_back("frame.path_challenge");
    tags.push_back("frame.path_response");
    tags.push_back("frame.new_token");
    tags.push_back("frame.max_data");
    tags.push_back("frame.stream_blocked");
    tags.push_back("frame.stop_sending");
    tags.push_back("frame.blocked");
    tags.push_back("frame.retire_connection_id");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {quic_server_test_connection_close::frame__stream tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(0, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream>(tmp)); break;} 
    case 1: {quic_server_test_connection_close::frame__ack tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(1, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ack>(tmp)); break;} 
    case 2: {quic_server_test_connection_close::frame__rst_stream tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(2, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__rst_stream>(tmp)); break;} 
    case 3: {quic_server_test_connection_close::frame__max_stream_id tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(3, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_id>(tmp)); break;} 
    case 4: {quic_server_test_connection_close::frame__connection_close tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(4, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__connection_close>(tmp)); break;} 
    case 5: {quic_server_test_connection_close::frame__max_stream_data tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(5, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_data>(tmp)); break;} 
    case 6: {quic_server_test_connection_close::frame__stream_id_blocked tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(6, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_id_blocked>(tmp)); break;} 
    case 7: {quic_server_test_connection_close::frame__crypto tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(7, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__crypto>(tmp)); break;} 
    case 8: {quic_server_test_connection_close::frame__ping tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(8, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ping>(tmp)); break;} 
    case 9: {quic_server_test_connection_close::frame__application_close tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(9, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__application_close>(tmp)); break;} 
    case 10: {quic_server_test_connection_close::frame__new_connection_id tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(10, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_connection_id>(tmp)); break;} 
    case 11: {quic_server_test_connection_close::frame__path_challenge tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(11, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_challenge>(tmp)); break;} 
    case 12: {quic_server_test_connection_close::frame__path_response tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(12, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_response>(tmp)); break;} 
    case 13: {quic_server_test_connection_close::frame__new_token tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(13, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_token>(tmp)); break;} 
    case 14: {quic_server_test_connection_close::frame__max_data tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(14, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_data>(tmp)); break;} 
    case 15: {quic_server_test_connection_close::frame__stream_blocked tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(15, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_blocked>(tmp)); break;} 
    case 16: {quic_server_test_connection_close::frame__stop_sending tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(16, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stop_sending>(tmp)); break;} 
    case 17: {quic_server_test_connection_close::frame__blocked tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(17, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__blocked>(tmp)); break;} 
    case 18: {quic_server_test_connection_close::frame__retire_connection_id tmp; __deser(res,tmp); inp = quic_server_test_connection_close::frame(18, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__retire_connection_id>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<quic_server_test_connection_close::frame>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame &res) {
    {
        z3::sort sort = g.sort("frame.stream");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream",g.sort("frame"),g.sort("frame.stream"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__stream tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(0, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.ack");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ack",g.sort("frame"),g.sort("frame.ack"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__ack tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(1, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ack>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.rst_stream");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.rst_stream",g.sort("frame"),g.sort("frame.rst_stream"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__rst_stream tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(2, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__rst_stream>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.max_stream_id");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_id",g.sort("frame"),g.sort("frame.max_stream_id"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__max_stream_id tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(3, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_id>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.connection_close");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.connection_close",g.sort("frame"),g.sort("frame.connection_close"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__connection_close tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(4, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__connection_close>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.max_stream_data");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_data",g.sort("frame"),g.sort("frame.max_stream_data"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__max_stream_data tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(5, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_data>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.stream_id_blocked");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_id_blocked",g.sort("frame"),g.sort("frame.stream_id_blocked"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__stream_id_blocked tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(6, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_id_blocked>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.crypto");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.crypto",g.sort("frame"),g.sort("frame.crypto"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__crypto tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(7, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__crypto>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.ping");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ping",g.sort("frame"),g.sort("frame.ping"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__ping tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(8, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ping>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.application_close");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.application_close",g.sort("frame"),g.sort("frame.application_close"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__application_close tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(9, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__application_close>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.new_connection_id");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_connection_id",g.sort("frame"),g.sort("frame.new_connection_id"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__new_connection_id tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(10, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_connection_id>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.path_challenge");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_challenge",g.sort("frame"),g.sort("frame.path_challenge"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__path_challenge tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(11, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_challenge>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.path_response");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_response",g.sort("frame"),g.sort("frame.path_response"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__path_response tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(12, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_response>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.new_token");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_token",g.sort("frame"),g.sort("frame.new_token"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__new_token tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(13, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_token>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.max_data");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_data",g.sort("frame"),g.sort("frame.max_data"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__max_data tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(14, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_data>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.stream_blocked");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_blocked",g.sort("frame"),g.sort("frame.stream_blocked"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__stream_blocked tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(15, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_blocked>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.stop_sending");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stop_sending",g.sort("frame"),g.sort("frame.stop_sending"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__stop_sending tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(16, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stop_sending>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.blocked");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.blocked",g.sort("frame"),g.sort("frame.blocked"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__blocked tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(17, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__blocked>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("frame.retire_connection_id");
        z3::func_decl pto = g.ctx.function("*>:frame:frame.retire_connection_id",g.sort("frame"),g.sort("frame.retire_connection_id"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::frame__retire_connection_id tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::frame(18, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__retire_connection_id>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<quic_server_test_connection_close::frame>( gen &g, const  z3::expr &v, quic_server_test_connection_close::frame &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream",g.sort("frame"),g.sort("frame.stream"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.stream"));
        quic_server_test_connection_close::frame__stream tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ack",g.sort("frame"),g.sort("frame.ack"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.ack"));
        quic_server_test_connection_close::frame__ack tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ack >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.rst_stream",g.sort("frame"),g.sort("frame.rst_stream"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.rst_stream"));
        quic_server_test_connection_close::frame__rst_stream tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__rst_stream >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_id",g.sort("frame"),g.sort("frame.max_stream_id"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.max_stream_id"));
        quic_server_test_connection_close::frame__max_stream_id tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_id >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.connection_close",g.sort("frame"),g.sort("frame.connection_close"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.connection_close"));
        quic_server_test_connection_close::frame__connection_close tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__connection_close >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_data",g.sort("frame"),g.sort("frame.max_stream_data"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.max_stream_data"));
        quic_server_test_connection_close::frame__max_stream_data tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_data >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_id_blocked",g.sort("frame"),g.sort("frame.stream_id_blocked"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.stream_id_blocked"));
        quic_server_test_connection_close::frame__stream_id_blocked tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_id_blocked >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.crypto",g.sort("frame"),g.sort("frame.crypto"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.crypto"));
        quic_server_test_connection_close::frame__crypto tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__crypto >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ping",g.sort("frame"),g.sort("frame.ping"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.ping"));
        quic_server_test_connection_close::frame__ping tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ping >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 9) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.application_close",g.sort("frame"),g.sort("frame.application_close"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.application_close"));
        quic_server_test_connection_close::frame__application_close tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__application_close >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 10) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_connection_id",g.sort("frame"),g.sort("frame.new_connection_id"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.new_connection_id"));
        quic_server_test_connection_close::frame__new_connection_id tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_connection_id >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 11) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_challenge",g.sort("frame"),g.sort("frame.path_challenge"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.path_challenge"));
        quic_server_test_connection_close::frame__path_challenge tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_challenge >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 12) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_response",g.sort("frame"),g.sort("frame.path_response"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.path_response"));
        quic_server_test_connection_close::frame__path_response tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_response >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 13) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_token",g.sort("frame"),g.sort("frame.new_token"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.new_token"));
        quic_server_test_connection_close::frame__new_token tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_token >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 14) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_data",g.sort("frame"),g.sort("frame.max_data"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.max_data"));
        quic_server_test_connection_close::frame__max_data tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_data >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 15) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_blocked",g.sort("frame"),g.sort("frame.stream_blocked"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.stream_blocked"));
        quic_server_test_connection_close::frame__stream_blocked tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_blocked >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 16) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stop_sending",g.sort("frame"),g.sort("frame.stop_sending"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.stop_sending"));
        quic_server_test_connection_close::frame__stop_sending tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stop_sending >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 17) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.blocked",g.sort("frame"),g.sort("frame.blocked"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.blocked"));
        quic_server_test_connection_close::frame__blocked tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__blocked >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 18) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.retire_connection_id",g.sort("frame"),g.sort("frame.retire_connection_id"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("frame.retire_connection_id"));
        quic_server_test_connection_close::frame__retire_connection_id tmp = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__retire_connection_id >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream",g.sort("frame"),g.sort("frame.stream"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.stream"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ack",g.sort("frame"),g.sort("frame.ack"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.ack"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.rst_stream",g.sort("frame"),g.sort("frame.rst_stream"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.rst_stream"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_id",g.sort("frame"),g.sort("frame.max_stream_id"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.max_stream_id"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.connection_close",g.sort("frame"),g.sort("frame.connection_close"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.connection_close"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_data",g.sort("frame"),g.sort("frame.max_stream_data"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.max_stream_data"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_id_blocked",g.sort("frame"),g.sort("frame.stream_id_blocked"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.stream_id_blocked"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.crypto",g.sort("frame"),g.sort("frame.crypto"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.crypto"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ping",g.sort("frame"),g.sort("frame.ping"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.ping"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.application_close",g.sort("frame"),g.sort("frame.application_close"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.application_close"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_connection_id",g.sort("frame"),g.sort("frame.new_connection_id"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.new_connection_id"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_challenge",g.sort("frame"),g.sort("frame.path_challenge"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.path_challenge"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_response",g.sort("frame"),g.sort("frame.path_response"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.path_response"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_token",g.sort("frame"),g.sort("frame.new_token"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.new_token"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_data",g.sort("frame"),g.sort("frame.max_data"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.max_data"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_blocked",g.sort("frame"),g.sort("frame.stream_blocked"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.stream_blocked"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stop_sending",g.sort("frame"),g.sort("frame.stop_sending"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.stop_sending"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.blocked",g.sort("frame"),g.sort("frame.blocked"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.blocked"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.retire_connection_id",g.sort("frame"),g.sort("frame.retire_connection_id"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("frame.retire_connection_id"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<quic_server_test_connection_close::frame>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__frame__tmp" << quic_server_test_connection_close::frame::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 19;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream",g.sort("frame"),g.sort("frame.stream"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.stream"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__stream>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ack",g.sort("frame"),g.sort("frame.ack"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.ack"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__ack>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.rst_stream",g.sort("frame"),g.sort("frame.rst_stream"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.rst_stream"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__rst_stream>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_id",g.sort("frame"),g.sort("frame.max_stream_id"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.max_stream_id"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__max_stream_id>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.connection_close",g.sort("frame"),g.sort("frame.connection_close"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.connection_close"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__connection_close>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_stream_data",g.sort("frame"),g.sort("frame.max_stream_data"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.max_stream_data"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__max_stream_data>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_id_blocked",g.sort("frame"),g.sort("frame.stream_id_blocked"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.stream_id_blocked"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__stream_id_blocked>(g,X);
    }
    if (tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.crypto",g.sort("frame"),g.sort("frame.crypto"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.crypto"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__crypto>(g,X);
    }
    if (tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.ping",g.sort("frame"),g.sort("frame.ping"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.ping"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__ping>(g,X);
    }
    if (tag == 9) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.application_close",g.sort("frame"),g.sort("frame.application_close"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.application_close"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__application_close>(g,X);
    }
    if (tag == 10) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_connection_id",g.sort("frame"),g.sort("frame.new_connection_id"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.new_connection_id"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__new_connection_id>(g,X);
    }
    if (tag == 11) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_challenge",g.sort("frame"),g.sort("frame.path_challenge"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.path_challenge"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__path_challenge>(g,X);
    }
    if (tag == 12) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.path_response",g.sort("frame"),g.sort("frame.path_response"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.path_response"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__path_response>(g,X);
    }
    if (tag == 13) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.new_token",g.sort("frame"),g.sort("frame.new_token"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.new_token"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__new_token>(g,X);
    }
    if (tag == 14) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.max_data",g.sort("frame"),g.sort("frame.max_data"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.max_data"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__max_data>(g,X);
    }
    if (tag == 15) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stream_blocked",g.sort("frame"),g.sort("frame.stream_blocked"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.stream_blocked"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__stream_blocked>(g,X);
    }
    if (tag == 16) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.stop_sending",g.sort("frame"),g.sort("frame.stop_sending"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.stop_sending"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__stop_sending>(g,X);
    }
    if (tag == 17) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.blocked",g.sort("frame"),g.sort("frame.blocked"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.blocked"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__blocked>(g,X);
    }
    if (tag == 18) {
        z3::func_decl pto = g.ctx.function("*>:frame:frame.retire_connection_id",g.sort("frame"),g.sort("frame.retire_connection_id"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("frame.retire_connection_id"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::frame__retire_connection_id>(g,X);
    }

}
#endif

int quic_server_test_connection_close::transport_parameter::temp_counter = 0;

std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::transport_parameter &t){
    s << "{";
    switch (t.tag) {
        case 0: s << "initial_max_stream_data_bidi_local:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_local >(t); break;
        case 1: s << "initial_max_data:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_data >(t); break;
        case 2: s << "initial_max_stream_id_bidi:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_bidi >(t); break;
        case 3: s << "idle_timeout:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::idle_timeout >(t); break;
        case 4: s << "preferred_address:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::preferred_address >(t); break;
        case 5: s << "max_packet_size:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_packet_size >(t); break;
        case 6: s << "stateless_reset_token:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::stateless_reset_token >(t); break;
        case 7: s << "ack_delay_exponent:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::ack_delay_exponent >(t); break;
        case 8: s << "initial_max_stream_id_uni:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_uni >(t); break;
        case 9: s << "disable_migration:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::disable_migration >(t); break;
        case 10: s << "initial_max_stream_data_bidi_remote:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_remote >(t); break;
        case 11: s << "initial_max_stream_data_uni:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_uni >(t); break;
        case 12: s << "max_ack_delay:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_ack_delay >(t); break;
        case 13: s << "active_connection_id_limit:" << quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::active_connection_id_limit >(t); break;

    }
    s << "}";
    return s;
}
template <>
quic_server_test_connection_close::transport_parameter _arg<quic_server_test_connection_close::transport_parameter>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
    if (args[idx].atom.size())
        throw out_of_bounds("unexpected value for sort transport_parameter: " + args[idx].atom,args[idx].pos);
    if (args[idx].fields.size() == 0)
        return quic_server_test_connection_close::transport_parameter();
    if (args[idx].fields.size() != 1)
        throw out_of_bounds("too many fields for sort transport_parameter (expected one)",args[idx].pos);
    if (args[idx].fields[0].atom == "initial_max_stream_data_bidi_local") return quic_server_test_connection_close::transport_parameter(0, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(_arg<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "initial_max_data") return quic_server_test_connection_close::transport_parameter(1, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_data>(_arg<quic_server_test_connection_close::initial_max_data>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "initial_max_stream_id_bidi") return quic_server_test_connection_close::transport_parameter(2, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_id_bidi>(_arg<quic_server_test_connection_close::initial_max_stream_id_bidi>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "idle_timeout") return quic_server_test_connection_close::transport_parameter(3, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::idle_timeout>(_arg<quic_server_test_connection_close::idle_timeout>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "preferred_address") return quic_server_test_connection_close::transport_parameter(4, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::preferred_address>(_arg<quic_server_test_connection_close::preferred_address>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "max_packet_size") return quic_server_test_connection_close::transport_parameter(5, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::max_packet_size>(_arg<quic_server_test_connection_close::max_packet_size>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "stateless_reset_token") return quic_server_test_connection_close::transport_parameter(6, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::stateless_reset_token>(_arg<quic_server_test_connection_close::stateless_reset_token>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "ack_delay_exponent") return quic_server_test_connection_close::transport_parameter(7, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::ack_delay_exponent>(_arg<quic_server_test_connection_close::ack_delay_exponent>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "initial_max_stream_id_uni") return quic_server_test_connection_close::transport_parameter(8, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_id_uni>(_arg<quic_server_test_connection_close::initial_max_stream_id_uni>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "disable_migration") return quic_server_test_connection_close::transport_parameter(9, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::disable_migration>(_arg<quic_server_test_connection_close::disable_migration>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "initial_max_stream_data_bidi_remote") return quic_server_test_connection_close::transport_parameter(10, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(_arg<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "initial_max_stream_data_uni") return quic_server_test_connection_close::transport_parameter(11, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_uni>(_arg<quic_server_test_connection_close::initial_max_stream_data_uni>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "max_ack_delay") return quic_server_test_connection_close::transport_parameter(12, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::max_ack_delay>(_arg<quic_server_test_connection_close::max_ack_delay>(args[idx].fields[0].fields,0,0)));
    if (args[idx].fields[0].atom == "active_connection_id_limit") return quic_server_test_connection_close::transport_parameter(13, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::active_connection_id_limit>(_arg<quic_server_test_connection_close::active_connection_id_limit>(args[idx].fields[0].fields,0,0)));

        throw out_of_bounds("unexpected field sort SORTNAME: " + args[idx].fields[0].atom, args[idx].pos);
}
template <>
void __ser<quic_server_test_connection_close::transport_parameter>(ivy_ser &res, const quic_server_test_connection_close::transport_parameter &inp) {
    if (inp.tag == 0) {res.open_tag(0,"initial_max_stream_data_bidi_local"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_local >(inp)); res.close_tag();}
    if (inp.tag == 1) {res.open_tag(1,"initial_max_data"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_data >(inp)); res.close_tag();}
    if (inp.tag == 2) {res.open_tag(2,"initial_max_stream_id_bidi"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_bidi >(inp)); res.close_tag();}
    if (inp.tag == 3) {res.open_tag(3,"idle_timeout"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::idle_timeout >(inp)); res.close_tag();}
    if (inp.tag == 4) {res.open_tag(4,"preferred_address"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::preferred_address >(inp)); res.close_tag();}
    if (inp.tag == 5) {res.open_tag(5,"max_packet_size"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_packet_size >(inp)); res.close_tag();}
    if (inp.tag == 6) {res.open_tag(6,"stateless_reset_token"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::stateless_reset_token >(inp)); res.close_tag();}
    if (inp.tag == 7) {res.open_tag(7,"ack_delay_exponent"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::ack_delay_exponent >(inp)); res.close_tag();}
    if (inp.tag == 8) {res.open_tag(8,"initial_max_stream_id_uni"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_uni >(inp)); res.close_tag();}
    if (inp.tag == 9) {res.open_tag(9,"disable_migration"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::disable_migration >(inp)); res.close_tag();}
    if (inp.tag == 10) {res.open_tag(10,"initial_max_stream_data_bidi_remote"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_remote >(inp)); res.close_tag();}
    if (inp.tag == 11) {res.open_tag(11,"initial_max_stream_data_uni"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_uni >(inp)); res.close_tag();}
    if (inp.tag == 12) {res.open_tag(12,"max_ack_delay"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_ack_delay >(inp)); res.close_tag();}
    if (inp.tag == 13) {res.open_tag(13,"active_connection_id_limit"); __ser(res,quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::active_connection_id_limit >(inp)); res.close_tag();}

}
template <>
void __deser<quic_server_test_connection_close::transport_parameter>(ivy_deser &res, quic_server_test_connection_close::transport_parameter &inp) {
    std::vector<std::string> tags;
    tags.push_back("initial_max_stream_data_bidi_local");
    tags.push_back("initial_max_data");
    tags.push_back("initial_max_stream_id_bidi");
    tags.push_back("idle_timeout");
    tags.push_back("preferred_address");
    tags.push_back("max_packet_size");
    tags.push_back("stateless_reset_token");
    tags.push_back("ack_delay_exponent");
    tags.push_back("initial_max_stream_id_uni");
    tags.push_back("disable_migration");
    tags.push_back("initial_max_stream_data_bidi_remote");
    tags.push_back("initial_max_stream_data_uni");
    tags.push_back("max_ack_delay");
    tags.push_back("active_connection_id_limit");

    int tag = res.open_tag(tags);
    switch (tag) {
    case 0: {quic_server_test_connection_close::initial_max_stream_data_bidi_local tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(0, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(tmp)); break;} 
    case 1: {quic_server_test_connection_close::initial_max_data tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(1, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_data>(tmp)); break;} 
    case 2: {quic_server_test_connection_close::initial_max_stream_id_bidi tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(2, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_id_bidi>(tmp)); break;} 
    case 3: {quic_server_test_connection_close::idle_timeout tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(3, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::idle_timeout>(tmp)); break;} 
    case 4: {quic_server_test_connection_close::preferred_address tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(4, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::preferred_address>(tmp)); break;} 
    case 5: {quic_server_test_connection_close::max_packet_size tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(5, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::max_packet_size>(tmp)); break;} 
    case 6: {quic_server_test_connection_close::stateless_reset_token tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(6, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::stateless_reset_token>(tmp)); break;} 
    case 7: {quic_server_test_connection_close::ack_delay_exponent tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(7, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::ack_delay_exponent>(tmp)); break;} 
    case 8: {quic_server_test_connection_close::initial_max_stream_id_uni tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(8, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_id_uni>(tmp)); break;} 
    case 9: {quic_server_test_connection_close::disable_migration tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(9, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::disable_migration>(tmp)); break;} 
    case 10: {quic_server_test_connection_close::initial_max_stream_data_bidi_remote tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(10, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(tmp)); break;} 
    case 11: {quic_server_test_connection_close::initial_max_stream_data_uni tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(11, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_uni>(tmp)); break;} 
    case 12: {quic_server_test_connection_close::max_ack_delay tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(12, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::max_ack_delay>(tmp)); break;} 
    case 13: {quic_server_test_connection_close::active_connection_id_limit tmp; __deser(res,tmp); inp = quic_server_test_connection_close::transport_parameter(13, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::active_connection_id_limit>(tmp)); break;} 

    }
    res.close_tag();
}
#ifdef Z3PP_H_
template <>
void __from_solver<quic_server_test_connection_close::transport_parameter>( gen &g, const  z3::expr &v, quic_server_test_connection_close::transport_parameter &res) {
    {
        z3::sort sort = g.sort("initial_max_stream_data_bidi_local");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_local",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_local"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::initial_max_stream_data_bidi_local tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(0, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("initial_max_data");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_data",g.sort("transport_parameter"),g.sort("initial_max_data"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::initial_max_data tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(1, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_data>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("initial_max_stream_id_bidi");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_bidi",g.sort("transport_parameter"),g.sort("initial_max_stream_id_bidi"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::initial_max_stream_id_bidi tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(2, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_id_bidi>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("idle_timeout");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:idle_timeout",g.sort("transport_parameter"),g.sort("idle_timeout"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::idle_timeout tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(3, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::idle_timeout>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("preferred_address");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:preferred_address",g.sort("transport_parameter"),g.sort("preferred_address"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::preferred_address tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(4, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::preferred_address>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("max_packet_size");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_packet_size",g.sort("transport_parameter"),g.sort("max_packet_size"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::max_packet_size tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(5, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::max_packet_size>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("stateless_reset_token");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:stateless_reset_token",g.sort("transport_parameter"),g.sort("stateless_reset_token"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::stateless_reset_token tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(6, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::stateless_reset_token>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("ack_delay_exponent");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:ack_delay_exponent",g.sort("transport_parameter"),g.sort("ack_delay_exponent"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::ack_delay_exponent tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(7, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::ack_delay_exponent>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("initial_max_stream_id_uni");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_id_uni"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::initial_max_stream_id_uni tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(8, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_id_uni>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("disable_migration");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:disable_migration",g.sort("transport_parameter"),g.sort("disable_migration"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::disable_migration tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(9, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::disable_migration>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("initial_max_stream_data_bidi_remote");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_remote",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_remote"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::initial_max_stream_data_bidi_remote tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(10, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("initial_max_stream_data_uni");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_data_uni"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::initial_max_stream_data_uni tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(11, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_uni>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("max_ack_delay");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_ack_delay",g.sort("transport_parameter"),g.sort("max_ack_delay"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::max_ack_delay tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(12, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::max_ack_delay>(tmp));
                }
            }
        }
    }
    {
        z3::sort sort = g.sort("active_connection_id_limit");
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:active_connection_id_limit",g.sort("transport_parameter"),g.sort("active_connection_id_limit"),g.ctx.bool_sort());
        // std::cout <<  g.model << std::endl;
        Z3_ast_vector av = Z3_model_get_sort_universe(g.ctx, g.model, sort);
        if (av) {
            z3::expr_vector univ(g.ctx,av);
            for (unsigned i = 0; i < univ.size(); i++){
                if (eq(g.model.eval(pto(v,univ[i]),true),g.ctx.bool_val(true))){
                    quic_server_test_connection_close::active_connection_id_limit tmp;
                    __from_solver(g,univ[i],tmp);                    res = quic_server_test_connection_close::transport_parameter(13, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::active_connection_id_limit>(tmp));
                }
            }
        }
    }

}
template <>
z3::expr __to_solver<quic_server_test_connection_close::transport_parameter>( gen &g, const  z3::expr &v, quic_server_test_connection_close::transport_parameter &val) {
//    std::cout << v << ":" << v.get_sort() << std::endl;
    if (val.tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_local",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_local"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("initial_max_stream_data_bidi_local"));
        quic_server_test_connection_close::initial_max_stream_data_bidi_local tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_local >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_data",g.sort("transport_parameter"),g.sort("initial_max_data"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("initial_max_data"));
        quic_server_test_connection_close::initial_max_data tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_data >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_bidi",g.sort("transport_parameter"),g.sort("initial_max_stream_id_bidi"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("initial_max_stream_id_bidi"));
        quic_server_test_connection_close::initial_max_stream_id_bidi tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_bidi >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:idle_timeout",g.sort("transport_parameter"),g.sort("idle_timeout"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("idle_timeout"));
        quic_server_test_connection_close::idle_timeout tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::idle_timeout >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:preferred_address",g.sort("transport_parameter"),g.sort("preferred_address"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("preferred_address"));
        quic_server_test_connection_close::preferred_address tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::preferred_address >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_packet_size",g.sort("transport_parameter"),g.sort("max_packet_size"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("max_packet_size"));
        quic_server_test_connection_close::max_packet_size tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_packet_size >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:stateless_reset_token",g.sort("transport_parameter"),g.sort("stateless_reset_token"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("stateless_reset_token"));
        quic_server_test_connection_close::stateless_reset_token tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::stateless_reset_token >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:ack_delay_exponent",g.sort("transport_parameter"),g.sort("ack_delay_exponent"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("ack_delay_exponent"));
        quic_server_test_connection_close::ack_delay_exponent tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::ack_delay_exponent >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_id_uni"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("initial_max_stream_id_uni"));
        quic_server_test_connection_close::initial_max_stream_id_uni tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_uni >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 9) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:disable_migration",g.sort("transport_parameter"),g.sort("disable_migration"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("disable_migration"));
        quic_server_test_connection_close::disable_migration tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::disable_migration >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 10) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_remote",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_remote"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("initial_max_stream_data_bidi_remote"));
        quic_server_test_connection_close::initial_max_stream_data_bidi_remote tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_remote >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 11) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_data_uni"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("initial_max_stream_data_uni"));
        quic_server_test_connection_close::initial_max_stream_data_uni tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_uni >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 12) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_ack_delay",g.sort("transport_parameter"),g.sort("max_ack_delay"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("max_ack_delay"));
        quic_server_test_connection_close::max_ack_delay tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_ack_delay >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }
    if (val.tag == 13) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:active_connection_id_limit",g.sort("transport_parameter"),g.sort("active_connection_id_limit"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant("X",g.sort("active_connection_id_limit"));
        quic_server_test_connection_close::active_connection_id_limit tmp = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::active_connection_id_limit >(val);
        return exists(X,pto(v,X) && __to_solver(g,X,tmp));
    }

    z3::expr conj = g.ctx.bool_val(false);
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_local",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_local"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("initial_max_stream_data_bidi_local"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_data",g.sort("transport_parameter"),g.sort("initial_max_data"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("initial_max_data"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_bidi",g.sort("transport_parameter"),g.sort("initial_max_stream_id_bidi"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("initial_max_stream_id_bidi"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:idle_timeout",g.sort("transport_parameter"),g.sort("idle_timeout"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("idle_timeout"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:preferred_address",g.sort("transport_parameter"),g.sort("preferred_address"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("preferred_address"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_packet_size",g.sort("transport_parameter"),g.sort("max_packet_size"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("max_packet_size"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:stateless_reset_token",g.sort("transport_parameter"),g.sort("stateless_reset_token"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("stateless_reset_token"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:ack_delay_exponent",g.sort("transport_parameter"),g.sort("ack_delay_exponent"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("ack_delay_exponent"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_id_uni"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("initial_max_stream_id_uni"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:disable_migration",g.sort("transport_parameter"),g.sort("disable_migration"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("disable_migration"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_remote",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_remote"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("initial_max_stream_data_bidi_remote"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_data_uni"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("initial_max_stream_data_uni"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_ack_delay",g.sort("transport_parameter"),g.sort("max_ack_delay"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("max_ack_delay"));
        conj = conj && forall(Y,!pto(v,Y));
    }
    {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:active_connection_id_limit",g.sort("transport_parameter"),g.sort("active_connection_id_limit"),g.ctx.bool_sort());
        z3::expr Y = g.ctx.constant("Y",g.sort("active_connection_id_limit"));
        conj = conj && forall(Y,!pto(v,Y));
    }

    return conj;
}
template <>
void __randomize<quic_server_test_connection_close::transport_parameter>( gen &g, const  z3::expr &apply_expr) {
    std::ostringstream os;
    os << "__transport_parameter__tmp" << quic_server_test_connection_close::transport_parameter::temp_counter++;
    std::string temp = os.str();
    z3::sort range = apply_expr.get_sort();
    z3::expr disj = g.ctx.bool_val(false);
int tag = rand() % 14;
    if (tag == 0) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_local",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_local"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("initial_max_stream_data_bidi_local"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(g,X);
    }
    if (tag == 1) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_data",g.sort("transport_parameter"),g.sort("initial_max_data"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("initial_max_data"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::initial_max_data>(g,X);
    }
    if (tag == 2) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_bidi",g.sort("transport_parameter"),g.sort("initial_max_stream_id_bidi"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("initial_max_stream_id_bidi"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::initial_max_stream_id_bidi>(g,X);
    }
    if (tag == 3) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:idle_timeout",g.sort("transport_parameter"),g.sort("idle_timeout"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("idle_timeout"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::idle_timeout>(g,X);
    }
    if (tag == 4) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:preferred_address",g.sort("transport_parameter"),g.sort("preferred_address"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("preferred_address"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::preferred_address>(g,X);
    }
    if (tag == 5) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_packet_size",g.sort("transport_parameter"),g.sort("max_packet_size"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("max_packet_size"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::max_packet_size>(g,X);
    }
    if (tag == 6) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:stateless_reset_token",g.sort("transport_parameter"),g.sort("stateless_reset_token"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("stateless_reset_token"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::stateless_reset_token>(g,X);
    }
    if (tag == 7) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:ack_delay_exponent",g.sort("transport_parameter"),g.sort("ack_delay_exponent"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("ack_delay_exponent"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::ack_delay_exponent>(g,X);
    }
    if (tag == 8) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_id_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_id_uni"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("initial_max_stream_id_uni"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::initial_max_stream_id_uni>(g,X);
    }
    if (tag == 9) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:disable_migration",g.sort("transport_parameter"),g.sort("disable_migration"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("disable_migration"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::disable_migration>(g,X);
    }
    if (tag == 10) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_bidi_remote",g.sort("transport_parameter"),g.sort("initial_max_stream_data_bidi_remote"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("initial_max_stream_data_bidi_remote"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(g,X);
    }
    if (tag == 11) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:initial_max_stream_data_uni",g.sort("transport_parameter"),g.sort("initial_max_stream_data_uni"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("initial_max_stream_data_uni"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::initial_max_stream_data_uni>(g,X);
    }
    if (tag == 12) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:max_ack_delay",g.sort("transport_parameter"),g.sort("max_ack_delay"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("max_ack_delay"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::max_ack_delay>(g,X);
    }
    if (tag == 13) {
        z3::func_decl pto = g.ctx.function("*>:transport_parameter:active_connection_id_limit",g.sort("transport_parameter"),g.sort("active_connection_id_limit"),g.ctx.bool_sort());
        z3::expr X = g.ctx.constant(temp.c_str(),g.sort("active_connection_id_limit"));
        z3::expr pred = pto(apply_expr,X);
        g.add_alit(pred);
        __randomize<quic_server_test_connection_close::active_connection_id_limit>(g,X);
    }

}
#endif
        template <typename T>
        T __array_segment(const T &a, long long lo, long long hi) {
            T res;
            lo = (lo < 0) ? 0 : lo;
            hi = (hi > a.size()) ? a.size() : hi;
            if (hi > lo) {
                res.resize(hi-lo);
                std::copy(a.begin()+lo,a.begin()+hi,res.begin());
            }
            return res;
        }
        	    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::stream_data &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::stream_data _arg<quic_server_test_connection_close::stream_data>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::stream_data a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<unsigned>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::stream_data>(ivy_deser &inp, quic_server_test_connection_close::stream_data &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::stream_data>(ivy_ser &res, const quic_server_test_connection_close::stream_data &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::stream_data& val) {
	        z3::expr z3end = g.apply("stream_data.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("stream_data.value",z3val,g.int_to_z3(g.sort("stream_pos"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::stream_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::stream_data &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("stream_data.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("stream_data.value",v,g.int_to_z3(g.sort("stream_pos"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::stream_data>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("stream_pos"),__sz);
                z3::expr pred =  g.apply("stream_data.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<unsigned>(g,g.apply("stream_data.value",v,g.int_to_z3(g.sort("stream_pos"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::vector__tls__cipher_suite__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::vector__tls__cipher_suite__ _arg<quic_server_test_connection_close::vector__tls__cipher_suite__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::vector__tls__cipher_suite__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<unsigned>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::vector__tls__cipher_suite__>(ivy_deser &inp, quic_server_test_connection_close::vector__tls__cipher_suite__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::vector__tls__cipher_suite__>(ivy_ser &res, const quic_server_test_connection_close::vector__tls__cipher_suite__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::vector__tls__cipher_suite__& val) {
	        z3::expr z3end = g.apply("vector[tls.cipher_suite].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[tls.cipher_suite].value",z3val,g.int_to_z3(g.sort("vector[tls.cipher_suite].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::vector__tls__cipher_suite__>( gen &g, const  z3::expr &v,quic_server_test_connection_close::vector__tls__cipher_suite__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[tls.cipher_suite].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[tls.cipher_suite].value",v,g.int_to_z3(g.sort("vector[tls.cipher_suite].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::vector__tls__cipher_suite__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[tls.cipher_suite].domain"),__sz);
                z3::expr pred =  g.apply("vector[tls.cipher_suite].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<unsigned>(g,g.apply("vector[tls.cipher_suite].value",v,g.int_to_z3(g.sort("vector[tls.cipher_suite].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::vector__tls__compression_method__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::vector__tls__compression_method__ _arg<quic_server_test_connection_close::vector__tls__compression_method__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::vector__tls__compression_method__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<unsigned>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::vector__tls__compression_method__>(ivy_deser &inp, quic_server_test_connection_close::vector__tls__compression_method__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::vector__tls__compression_method__>(ivy_ser &res, const quic_server_test_connection_close::vector__tls__compression_method__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::vector__tls__compression_method__& val) {
	        z3::expr z3end = g.apply("vector[tls.compression_method].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[tls.compression_method].value",z3val,g.int_to_z3(g.sort("vector[tls.compression_method].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::vector__tls__compression_method__>( gen &g, const  z3::expr &v,quic_server_test_connection_close::vector__tls__compression_method__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[tls.compression_method].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[tls.compression_method].value",v,g.int_to_z3(g.sort("vector[tls.compression_method].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::vector__tls__compression_method__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[tls.compression_method].domain"),__sz);
                z3::expr pred =  g.apply("vector[tls.compression_method].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<unsigned>(g,g.apply("vector[tls.compression_method].value",v,g.int_to_z3(g.sort("vector[tls.compression_method].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::vector__tls__extension__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::vector__tls__extension__ _arg<quic_server_test_connection_close::vector__tls__extension__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::vector__tls__extension__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::tls__extension>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::vector__tls__extension__>(ivy_deser &inp, quic_server_test_connection_close::vector__tls__extension__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::vector__tls__extension__>(ivy_ser &res, const quic_server_test_connection_close::vector__tls__extension__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::vector__tls__extension__& val) {
	        z3::expr z3end = g.apply("vector[tls.extension].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[tls.extension].value",z3val,g.int_to_z3(g.sort("vector[tls.extension].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::vector__tls__extension__>( gen &g, const  z3::expr &v,quic_server_test_connection_close::vector__tls__extension__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[tls.extension].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[tls.extension].value",v,g.int_to_z3(g.sort("vector[tls.extension].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::vector__tls__extension__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[tls.extension].domain"),__sz);
                z3::expr pred =  g.apply("vector[tls.extension].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::tls__extension>(g,g.apply("vector[tls.extension].value",v,g.int_to_z3(g.sort("vector[tls.extension].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::vector__tls__handshake__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::vector__tls__handshake__ _arg<quic_server_test_connection_close::vector__tls__handshake__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::vector__tls__handshake__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::tls__handshake>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::vector__tls__handshake__>(ivy_deser &inp, quic_server_test_connection_close::vector__tls__handshake__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::vector__tls__handshake__>(ivy_ser &res, const quic_server_test_connection_close::vector__tls__handshake__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::vector__tls__handshake__& val) {
	        z3::expr z3end = g.apply("vector[tls.handshake].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[tls.handshake].value",z3val,g.int_to_z3(g.sort("vector[tls.handshake].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::vector__tls__handshake__>( gen &g, const  z3::expr &v,quic_server_test_connection_close::vector__tls__handshake__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[tls.handshake].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[tls.handshake].value",v,g.int_to_z3(g.sort("vector[tls.handshake].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::vector__tls__handshake__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[tls.handshake].domain"),__sz);
                z3::expr pred =  g.apply("vector[tls.handshake].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::tls__handshake>(g,g.apply("vector[tls.handshake].value",v,g.int_to_z3(g.sort("vector[tls.handshake].domain"),__i)));
	    }
	    #endif

	
    typedef struct tls_name_struct {
        const char *name;
        int value;
    } *tls_name_struct_ptr;

    struct tls_name_map : hash_space::hash_map<std::string,int> {};

    struct tls_name_struct tls_field_length_bytes[27] = {
        {"fragment",2},
        {"content",2},
        {"tls.client_hello",3},
        {"tls.server_hello",3},
        {"tls.encrypted_extensions",3},
        {"unknown_message_bytes",3},
        {"session_id",1},
        {"cipher_suites",2},
        {"compression_methods",1},
        {"extensions",2},
        {"quic_transport_parameters",2},
        {"transport_parameters",2},
        {"initial_max_stream_data_bidi_local",2},
        {"initial_max_data",2},
        {"initial_max_stream_id_bidi",2},
        {"idle_timeout",2},
        {"preferred_address",2},
        {"max_packet_size",2},
        {"stateless_reset_token",2},
        {"ack_delay_exponent",2},
        {"initial_max_stream_id_uni",2},
        {"disable_migration",2},
        {"active_connection_id_limit",2},
        {"initial_max_stream_data_bidi_remote",2},
        {"initial_max_stream_data_uni",2},
        {"max_ack_delay",2},
        {0,0}
    };
    tls_name_map tls_field_length_bytes_map;

    struct tls_name_struct tls_field_bytes[20] = {
        {"version",2},
        {"client_version",2},
        {"server_version",2},
        {"etype",2},
        {"mtype",1},
        {"gmt_unix_time",4},
        {"cipher_suites",2},
        {"the_cipher_suite",2},
        {"compression_methods",1},
        {"the_compression_method",1},
        {"session_id",1},
        {"content",1},
        {"initial_version",4},
        {"stream_pos_32",-1},
        {"stream_id_16",-1},
        {"seconds_16",-1},
        {"stream_pos_16",-1},
        {"exponent_8",-1},
        {"data_8",1},
        {0,0}
    };
    tls_name_map tls_field_bytes_map;

    struct tls_name_struct tls_tags[24] = {
        {"tls.handshake_record",22},
        {"tls.application_data_record",23},
        {"tls.change_cipher_spec",20},
        {"tls.client_hello",1},
        {"tls.server_hello",2},
        {"tls.encrypted_extensions",8},
        {"tls.unknown_message",-1},
        {"tls.unknown_extension",-1},
        {"quic_transport_parameters",0xffa5},
        {"initial_max_stream_data_bidi_local",5},
        {"initial_max_data",4},
        {"initial_max_stream_id_bidi",8},
        {"idle_timeout",1},
        {"preferred_address",0xd},
        {"max_packet_size",3},
        {"stateless_reset_token",2},
        {"ack_delay_exponent",0xa},
        {"initial_max_stream_id_uni",9},
        {"disable_migration",0xc},
        {"active_connection_id_limit",0xe},
        {"initial_max_stream_data_bidi_remote",6},
        {"initial_max_stream_data_uni",7},
        {"max_ack_delay",0xb}, 
       {0,0}
    };
    tls_name_map tls_tags_map;

    struct tls_name_struct tls_tag_bytes[17] = {
        {"tls.unknown_extension",2},
        {"quic_transport_parameters",2},
        {"initial_max_stream_data_bidi_local",2},
        {"initial_max_data",2},
        {"initial_max_stream_id_bidi",2},
        {"idle_timeout",2},
        {"preferred_address",2},
        {"max_packet_size",2},
        {"stateless_reset_token",2},
        {"ack_delay_exponent",2},
        {"initial_max_stream_id_uni",2},
        {"disable_migration",2},
        {"active_connection_id_limit",2},
        {"initial_max_stream_data_bidi_remote",2},
        {"initial_max_stream_data_uni",2},
        {"max_ack_delay",2},
        {0,0}
    };
    tls_name_map tls_tag_bytes_map;

    void tls_make_name_map(tls_name_struct *vals, tls_name_map &map) {
        while (vals->name) {
            map[vals->name] = vals->value;
            vals++;
        }
    }

    class quic_server_test_connection_close::tls_deser : public ivy_binary_deser {
        int field_bytes;
        std::vector<unsigned> fence;
        int in_encrypted_extensions;

    public:

        tls_deser(const std::vector<char> &inp) : ivy_binary_deser(inp) {
            field_bytes = 2;
            in_encrypted_extensions = 0;
        }

        virtual bool more(unsigned bytes) {
            if (fence.size() > 0 && pos + bytes > fence.back())
                return false;
            return ivy_binary_deser::more(bytes);
        }
    
        virtual void open_field(const std::string &name) {
            if (name == "random_bytes") {
                fence.push_back(pos+28);
                field_bytes = 1;
            }
            else if (name == "versions") {
                field_bytes = 4;
                long long bytes = 0;
                if (in_encrypted_extensions) {
                    getn(bytes,1);
                }
                fence.push_back(pos+bytes);
            }
            else if (tls_field_length_bytes_map.find(name) != tls_field_length_bytes_map.end()) {
                int length_field_bytes = tls_field_length_bytes_map[name];
                long long bytes;
                getn(bytes,length_field_bytes);
                fence.push_back(pos+bytes);
            }
            else if (fence.size() > 0)
                fence.push_back(fence.back());
            if (tls_field_bytes_map.find(name) != tls_field_bytes_map.end()) {
                field_bytes = tls_field_bytes_map[name];
            }
            if (name == "tls.encrypted_extensions") {
                in_encrypted_extensions = fence.size();
            }
        }

        virtual void close_field() {
            if (fence.size() == in_encrypted_extensions)
                in_encrypted_extensions = 0;
            if (fence.size() > 0)
                fence.pop_back();
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            int bytes = 1;
            if (tls_tag_bytes_map.find(tags[0]) != tls_tag_bytes_map.end())
                bytes = tls_tag_bytes_map[tags[0]];
            long long tag;
            getn(tag,bytes);
            for (int i = 0; i < tags.size(); i++) {
                if (tag == tls_tags_map[tags[i]]) {
                   open_field(tags[i]);
                   return i;
                }
            }
            for (int i = 0; i < tags.size(); i++) {
                if (-1 == tls_tags_map[tags[i]]) {
                    pos -= bytes; // leave the unknown tag to parse again
                    open_field(tags[i]);
                    return i;
                }
            }
            throw deser_err();
        }

        virtual void close_tag() {
            close_field();
        }

        virtual void get(long long &res) {
            if (field_bytes == -1) get_var_int(res);
            else getn(res,field_bytes);
        }

        void get_var_int(long long &res) {
            static int lens[4] = {0,1,3,7};
            long long lobyte;
            ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        virtual bool open_list_elem() {
            if (fence.size() == 0) {  // tricky: see if input contains a full message
                if (!more(4)) {
                    return false;
                }
                unsigned len = (inp[pos+1] << 16) + (inp[pos+2] << 8) + inp[pos];
                return inp.size() >= pos + len + 4;
            }
            return more(1);
        }
        void close_list_elem() {}

        void open_list() {}
        void close_list() {}

        ~tls_deser(){}
    };

    struct quic_server_test_connection_close::tls_ser : public ivy_binary_ser {

        int field_bytes;
        std::vector<unsigned> field_start;
        std::vector<unsigned> field_length_bytes;
        int in_encrypted_extensions;

        tls_ser() {
            in_encrypted_extensions = 0;
        }

        virtual void open_field(const std::string &name) {
            int flb = 0;
            if (name == "random_bytes") {
                field_bytes = 1;
            }
            else if (name == "versions") {
                field_bytes = 4;
                if (in_encrypted_extensions) {
                    flb = 1;
                    res.resize(res.size() + flb);
                }
            }
            else if (tls_field_length_bytes_map.find(name) != tls_field_length_bytes_map.end()) {
                flb = tls_field_length_bytes_map[name];
                res.resize(res.size() + flb);
            }
            field_start.push_back(res.size());
            field_length_bytes.push_back(flb);
            if (tls_field_bytes_map.find(name) != tls_field_bytes_map.end()) {
                field_bytes = tls_field_bytes_map[name];
            }
            if (name == "tls.encrypted_extensions") {
                in_encrypted_extensions = field_start.size();
            }
        }

        virtual void close_field() {
            if (field_start.size() == in_encrypted_extensions)
                in_encrypted_extensions = 0;
            // tricky -- go back and fill in the length bytes after the field is serialized
            int start = field_start.back();
            int end = res.size();
            int flb = field_length_bytes.back();
            std::vector<char> temp;
            temp.swap(res);
            int len = end-start;
            setn(len,flb);
            temp.swap(res);
            std::copy(temp.begin(),temp.end(),res.begin()+start-flb);
            field_start.pop_back();
            field_length_bytes.pop_back();
        }

        virtual void open_tag(int ivy_tag, const std::string &name) {
            int bytes = 1;
            if (tls_tag_bytes_map.find(name) != tls_tag_bytes_map.end())
                bytes = tls_tag_bytes_map[name];
            long long tag = tls_tags_map[name];
            if (tag !=-1) 
                setn(tag,bytes);
            open_field(name);
        }

        virtual void close_tag() {
            close_field();
        }

        void set(long long inp) {
            if (field_bytes == -1) set_var_int(inp);
            else setn(inp,field_bytes);
        }

        void set_var_int(long long res) {
	    long long val = res & 0x3fffffffffffffff;
	    int bytecode = res <= 0x3f ? 0 : res <= 0x3fff ? 1 : res <= 0x3fffffff ? 2 : 3;
	    int bytes = 1 << bytecode;
            val |= bytecode << ((bytes << 3) - 2);
	    setn(val,bytes);
        }

        void open_list(int len) {
        }
    };

    struct quic_server_test_connection_close::tls_ser_server : public tls_ser {
        // This version of the serializer uses the server format. The only difference is
        // that the QUIC_extension structure has an extra field "versions".

        tls_ser_server() {
          in_encrypted_extensions = -1; 
        }
    
    };
	    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__handshakes &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::tls__handshakes _arg<quic_server_test_connection_close::tls__handshakes>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::tls__handshakes a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::tls__handshake>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::tls__handshakes>(ivy_deser &inp, quic_server_test_connection_close::tls__handshakes &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::tls__handshakes>(ivy_ser &res, const quic_server_test_connection_close::tls__handshakes &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::tls__handshakes& val) {
	        z3::expr z3end = g.apply("tls.handshakes.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("tls.handshakes.value",z3val,g.int_to_z3(g.sort("tls.handshakes.domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::tls__handshakes>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__handshakes &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("tls.handshakes.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("tls.handshakes.value",v,g.int_to_z3(g.sort("tls.handshakes.domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::tls__handshakes>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("tls.handshakes.domain"),__sz);
                z3::expr pred =  g.apply("tls.handshakes.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::tls__handshake>(g,g.apply("tls.handshakes.value",v,g.int_to_z3(g.sort("tls.handshakes.domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ack__block__arr &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::frame__ack__block__arr _arg<quic_server_test_connection_close::frame__ack__block__arr>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::frame__ack__block__arr a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::frame__ack__block>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::frame__ack__block__arr>(ivy_deser &inp, quic_server_test_connection_close::frame__ack__block__arr &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::frame__ack__block__arr>(ivy_ser &res, const quic_server_test_connection_close::frame__ack__block__arr &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::frame__ack__block__arr& val) {
	        z3::expr z3end = g.apply("frame.ack.block.arr.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("frame.ack.block.arr.value",z3val,g.int_to_z3(g.sort("frame.ack.block.idx"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::frame__ack__block__arr>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ack__block__arr &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("frame.ack.block.arr.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("frame.ack.block.arr.value",v,g.int_to_z3(g.sort("frame.ack.block.idx"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::frame__ack__block__arr>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("frame.ack.block.idx"),__sz);
                z3::expr pred =  g.apply("frame.ack.block.arr.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::frame__ack__block>(g,g.apply("frame.ack.block.arr.value",v,g.int_to_z3(g.sort("frame.ack.block.idx"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__arr &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::frame__arr _arg<quic_server_test_connection_close::frame__arr>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::frame__arr a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::frame>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::frame__arr>(ivy_deser &inp, quic_server_test_connection_close::frame__arr &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::frame__arr>(ivy_ser &res, const quic_server_test_connection_close::frame__arr &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::frame__arr& val) {
	        z3::expr z3end = g.apply("frame.arr.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("frame.arr.value",z3val,g.int_to_z3(g.sort("frame.idx"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::frame__arr>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__arr &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("frame.arr.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("frame.arr.value",v,g.int_to_z3(g.sort("frame.idx"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::frame__arr>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("frame.idx"),__sz);
                z3::expr pred =  g.apply("frame.arr.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::frame>(g,g.apply("frame.arr.value",v,g.int_to_z3(g.sort("frame.idx"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::vector__transport_parameter__ &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::vector__transport_parameter__ _arg<quic_server_test_connection_close::vector__transport_parameter__>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::vector__transport_parameter__ a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::transport_parameter>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::vector__transport_parameter__>(ivy_deser &inp, quic_server_test_connection_close::vector__transport_parameter__ &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::vector__transport_parameter__>(ivy_ser &res, const quic_server_test_connection_close::vector__transport_parameter__ &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::vector__transport_parameter__& val) {
	        z3::expr z3end = g.apply("vector[transport_parameter].end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("vector[transport_parameter].value",z3val,g.int_to_z3(g.sort("vector[transport_parameter].domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::vector__transport_parameter__>( gen &g, const  z3::expr &v,quic_server_test_connection_close::vector__transport_parameter__ &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("vector[transport_parameter].end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("vector[transport_parameter].value",v,g.int_to_z3(g.sort("vector[transport_parameter].domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::vector__transport_parameter__>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("vector[transport_parameter].domain"),__sz);
                z3::expr pred =  g.apply("vector[transport_parameter].end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::transport_parameter>(g,g.apply("vector[transport_parameter].value",v,g.int_to_z3(g.sort("vector[transport_parameter].domain"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_packet__arr &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::quic_packet__arr _arg<quic_server_test_connection_close::quic_packet__arr>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::quic_packet__arr a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::quic_packet>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::quic_packet__arr>(ivy_deser &inp, quic_server_test_connection_close::quic_packet__arr &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::quic_packet__arr>(ivy_ser &res, const quic_server_test_connection_close::quic_packet__arr &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::quic_packet__arr& val) {
	        z3::expr z3end = g.apply("quic_packet.arr.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("quic_packet.arr.value",z3val,g.int_to_z3(g.sort("quic_packet.idx"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::quic_packet__arr>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_packet__arr &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("quic_packet.arr.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("quic_packet.arr.value",v,g.int_to_z3(g.sort("quic_packet.idx"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::quic_packet__arr>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("quic_packet.idx"),__sz);
                z3::expr pred =  g.apply("quic_packet.arr.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::quic_packet>(g,g.apply("quic_packet.arr.value",v,g.int_to_z3(g.sort("quic_packet.idx"),__i)));
	    }
	    #endif

		    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_packet__retired_cids &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::quic_packet__retired_cids _arg<quic_server_test_connection_close::quic_packet__retired_cids>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::quic_packet__retired_cids a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<unsigned>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::quic_packet__retired_cids>(ivy_deser &inp, quic_server_test_connection_close::quic_packet__retired_cids &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::quic_packet__retired_cids>(ivy_ser &res, const quic_server_test_connection_close::quic_packet__retired_cids &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::quic_packet__retired_cids& val) {
	        z3::expr z3end = g.apply("quic_packet.retired_cids.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("quic_packet.retired_cids.value",z3val,g.int_to_z3(g.sort("quic_packet.idx"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::quic_packet__retired_cids>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_packet__retired_cids &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("quic_packet.retired_cids.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("quic_packet.retired_cids.value",v,g.int_to_z3(g.sort("quic_packet.idx"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::quic_packet__retired_cids>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("quic_packet.idx"),__sz);
                z3::expr pred =  g.apply("quic_packet.retired_cids.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<unsigned>(g,g.apply("quic_packet.retired_cids.value",v,g.int_to_z3(g.sort("quic_packet.idx"),__i)));
	    }
	    #endif

	
    #define QUIC_DESER_FAKE_CHECKSUM_LENGTH 0

    class quic_server_test_connection_close::quic_deser : public ivy_binary_deser {
        enum {quic_s_init,
              quic_s_type,
              quic_s_version,
	      quic_s_dcil,
	      quic_s_scil,
              quic_s_dcid,
              quic_s_scid,
              quic_s_retry_token_length,
              quic_s_retry_token,
	      quic_s_payload_length,
              quic_s_pkt_num,
              quic_s_payload,
              quic_stream_id,
              quic_stream_off,
              quic_stream_len,
              quic_stream_fin,
              quic_stream_offset,
              quic_stream_length,
              quic_stream_data,
              quic_crypto_offset,
              quic_crypto_length,
              quic_crypto_data,
              quic_ack_largest,
              quic_ack_delay,
              quic_ack_block_count,
              quic_ack_gap,
              quic_ack_block,
              quic_reset_stream_id,
              quic_reset_err_code,
              quic_reset_final_offset,
              quic_stop_sending_id,
              quic_stop_sending_err_code,
              quic_connection_close_err_code,
              quic_connection_close_frame_type,
              quic_connection_close_reason_length,
              quic_connection_close_reason,
              quic_application_close_err_code,
              quic_max_stream_data_id,
              quic_new_connection_id_length,
              quic_new_connection_id_seq_num,
              quic_new_connection_id_retire_prior_to,
              quic_new_connection_id_scid,
              quic_new_connection_id_token,
              quic_path_challenge_data,
              quic_retire_connection_id_seq_num,
              quic_s_done} state;
        bool long_format;
        char hdr_type;
        int dcil;
        int scil;
        char frame_type;
        int data_remaining;
        long long ack_blocks_expected;
        long long ack_block_count;
        int payload_length;
        int fence;
    
    public:
        quic_deser(const std::vector<char> &inp) : ivy_binary_deser(inp),state(quic_s_init) {
            // pos = 42; // skip 42 bytes of IP and UDP header
            fence = 0;
        }
        virtual void  get(long long &res) {
            switch (state) {
            case quic_s_init:
            {
                getn(res,1);
                long_format = (res & 0x80) ? true : false;
                hdr_type = res & 0x7f; //0x7f;
                res = long_format ? ((hdr_type & 0x30) >> 4) : 3;
                state = quic_s_version;
            }
            break;
            case quic_s_version:
            {
                if (long_format)
                    ivy_binary_deser::getn(res,4);
                else
                    res = 0;
                state = quic_s_dcid;
            }
            break;
            case quic_s_dcid:
            {
                if (long_format) {
                    long long cil;
                    getn(cil,1);
                    dcil = cil;
                } else {
                    dcil = 8;
                }
		getn(res,(dcil));
                state = quic_s_scid;
            }
            break;
            case quic_s_scid:
            {
                if (long_format) {
                    long long cil;
                    getn(cil,1);
                    scil = cil;
                } else {
                    scil = 0;
                }
		getn(res,(scil));
                long long len;
                if (long_format & ((hdr_type & 0x30) == 0x00))
                    get_var_int(len);
                else len = 0;
                data_remaining = len;
                state = quic_s_retry_token;
            }
            break;
            case quic_s_pkt_num:
            {
                fence = 0;
                if (payload_length > 0) {
                    fence = pos + payload_length - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                } else {
                    fence = inp.size() - QUIC_DESER_FAKE_CHECKSUM_LENGTH;
                }
                get_pkt_num(res);
                state = quic_s_payload;
            }
            break;
            case quic_stream_off:
            {
                res = (0x04 & frame_type) ? 1 : 0;
                state = quic_stream_len;
            }
            break;
            case quic_stream_len:
            {
                res = (0x02 & frame_type) ? 1 : 0;
                state = quic_stream_fin;
            }
            break;
            case quic_stream_fin:
            {
                res = (0x01 & frame_type) ? 1 : 0;
                state = quic_stream_id;
            }
            break;
            case quic_stream_id:
            {
                get_var_int(res);
                state = quic_stream_offset;
            }
            break;
            case quic_stream_offset:
            {
                if (0x04 & frame_type)
                    get_var_int(res);
                else res = 0;
                state = quic_stream_length;
            }
            break;
            case quic_stream_length:
            {
                if (0x02 & frame_type)
                    get_var_int(res);
                else {
                    res = fence - pos;
                }
                data_remaining = res;
                state = quic_stream_data;
            }
            break;
            case quic_crypto_offset:
            {
                get_var_int(res);
                state = quic_crypto_length;
            }
            break;
            case quic_crypto_length:
            {
                get_var_int(res);
                data_remaining = res;
                state = quic_crypto_data;
            }
            break;
            case quic_stream_data:
            case quic_crypto_data:
            case quic_path_challenge_data:
            case quic_connection_close_reason:
            case quic_s_retry_token:
            {
                ivy_binary_deser::getn(res,1);
            }
            break;
            case quic_ack_largest:
            {
                get_var_int(res);
                state = quic_ack_delay;
            }
            break;
            case quic_ack_delay:
            {
                get_var_int(res);
                state = quic_ack_block_count;
            }
            break;
            case quic_ack_gap:
            {
                if (ack_block_count == 0)
                    res = 0; // first ack block has no gap
                else
                    get_var_int(res);
                state = quic_ack_block;
            }
            break;
            case quic_ack_block:
            {
                get_var_int(res);
                state = quic_ack_gap;
                ack_block_count++;
            }
            break;
            case quic_reset_stream_id:
            {
                get_var_int(res);
                state = quic_reset_err_code;
            }
            break;
            case quic_reset_err_code:
            {
                get_var_int(res);
                state = quic_reset_final_offset;
            }
            break;
            case quic_reset_final_offset:
            {
                get_var_int(res);
            }
            break;
            case quic_stop_sending_id:
            {
                get_var_int(res);
                state = quic_stop_sending_err_code;
            }
            break;
            case quic_stop_sending_err_code:
            {
                get_var_int(res);
            }
            break;
            case quic_connection_close_err_code:
            {
                get_var_int(res);
                state = quic_connection_close_frame_type;
            }
            break;
            case quic_connection_close_frame_type:
            {
                get_var_int(res);
                state = quic_connection_close_reason_length;
            }
            break;
            case quic_connection_close_reason_length:
            {
                get_var_int(res);
                data_remaining = res;
                state = quic_connection_close_reason;
            }
            break;
            case quic_application_close_err_code:
            {
                get_var_int(res);
                state = quic_connection_close_reason_length;
            }
            break;
            case quic_max_stream_data_id:
            {
                get_var_int(res);
                state = quic_reset_final_offset;
            }
            break;
            case quic_new_connection_id_length:
            {
                getn(res,1);
                scil = res;
                state = quic_new_connection_id_scid;
            }
            break;
            case quic_new_connection_id_seq_num:
            {
                get_var_int(res);
                state = quic_new_connection_id_retire_prior_to;
            }
            break;
            case quic_new_connection_id_retire_prior_to:
            {
                get_var_int(res);
                state = quic_new_connection_id_length;
            }
            break;
            case quic_new_connection_id_scid:
            {
                getn(res,scil);
                state = quic_new_connection_id_token;
            }
            break;
            case quic_new_connection_id_token:
            {
                getn(res,16);
            }
            break;
            case quic_retire_connection_id_seq_num:
            {
                get_var_int(res);
            }
            break;
            default:
            throw deser_err();
            }
        }

        void get_var_int(long long &res) {
            static int lens[4] = {0,1,3,7};
            long long lobyte;
            ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        void get_pkt_num(long long &res) {
            ivy_binary_deser::getn(res,(hdr_type & 3)+1);
            return;
            static int lens[4] = {0,0,1,3};
            long long lobyte;
            ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            if (bytes == 0) {
                res = lobyte;
                return;
            }
            ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            if (state == quic_s_payload) {
                long long ft;
                ivy_binary_deser::getn(ft,1);
                frame_type = ft;
                if (frame_type >= 0x08 && frame_type <= 0x0f) {
                    state = quic_stream_off;
                    return 0;
                }
                if (frame_type == 0x02) {
                    state = quic_ack_largest;
                    return 1;
                }
                if (frame_type == 0x04) {
                    state = quic_reset_stream_id;
                    return 2;
                }
                if (frame_type == 0x12) {
                    state = quic_reset_stream_id; // max_stream_id state equivalent to this
                    return 3;
                }
                if (frame_type == 0x1c) {
                    state = quic_connection_close_err_code;
                    return 4;
                }
                if (frame_type == 0x11) {
                    state = quic_max_stream_data_id;
                    return 5;
                }
                if (frame_type == 0x16) {
                    state = quic_reset_final_offset;
                    return 6;
                }
                if (frame_type == 0x06) {
                    state = quic_crypto_offset;
                    return 7;
                }
                if (frame_type == 0x01) {
                    return 8;
                }
                if (frame_type == 0x1d) {
                    state = quic_application_close_err_code;
                    return 9;
                }
                if (frame_type == 0x18) {
                    state = quic_new_connection_id_seq_num;
                    return 10;
                }
                if (frame_type == 0x1a) {
                    data_remaining = 8;
                    state = quic_path_challenge_data;
                    return 11;
                }
                if (frame_type == 0x1b) {
                    data_remaining = 8;
                    state = quic_path_challenge_data;
                    return 12;
                }
                if (frame_type == 0x07) {  // new token frame
                    state = quic_crypto_length;  // new token equivalent to this
                    return 13;
                }
                if (frame_type == 0x10) {  // new token frame
                    state = quic_reset_final_offset;  // max_data equivalent to this
                    return 14;
                }
                if (frame_type == 0x15) {
                    state = quic_max_stream_data_id;  // stream_blocked equivalent to this
                    return 15;
                }
                if (frame_type == 0x05) {
                    state = quic_stop_sending_id;  // stream_blocked equivalent to this
                    return 16;
                }
                if (frame_type == 0x14) {
                    state = quic_reset_final_offset;  // blocked equivalent to this
                    return 17;
                }
                if (frame_type == 0x19) {
                    state = quic_retire_connection_id_seq_num;
                    return 18;
                }
                std::cerr << "saw tag " << ft << std::endl;  
            }
            throw deser_err();
        }

        virtual bool open_list_elem() {
            if (state == quic_s_payload) {
               while ((fence == 0 || pos < fence) && more(1) && inp[pos] == 0)
                   pos++;  // skip padding frames
               return (fence == 0 || pos < fence) && more(1);
            }
            if (state == quic_ack_gap) {
                return ack_block_count < ack_blocks_expected;
            }
            if (state == quic_stream_data)
                return data_remaining-- > 0;
            if (state == quic_connection_close_reason)
                return data_remaining-- > 0;
            if (state == quic_s_retry_token)
                return data_remaining-- > 0;
            if (state == quic_crypto_data)
                return data_remaining-- > 0;
            if (state == quic_path_challenge_data)
                return data_remaining-- > 0;
            if (state == quic_s_init)
                return more(1);
            throw deser_err();
        }

        void open_list() {
            if (state == quic_ack_block_count) {
                get_var_int(ack_blocks_expected);
                ack_blocks_expected++;  // block count doesn't include first
                ack_block_count = 0;
                state = quic_ack_gap;
            }
        }
        void close_list() {
            if (state == quic_s_payload) {
                state = quic_s_init;
                pos += QUIC_DESER_FAKE_CHECKSUM_LENGTH; // skip the fake checksum
            }
            if (state == quic_s_retry_token) {
                long long len;
                if (long_format) {
                    get_var_int(len);
                } else {
                    len = 0;
                }
                payload_length = len;
                state = quic_s_pkt_num;
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = quic_s_payload;
        }

        ~quic_deser(){}
    };


    class quic_server_test_connection_close::quic_ser : public ivy_binary_ser {
        enum {quic_s_init,
              quic_s_version,
	      quic_s_dcil,
	      quic_s_scil,
              quic_s_dcid,
              quic_s_scid,
              quic_s_retry_token_length,
              quic_s_retry_token,
	      quic_s_payload_length,
              quic_s_pkt_num,
              quic_s_payload,
              quic_stream_id,
              quic_stream_off,
              quic_stream_len,
              quic_stream_fin,
              quic_stream_offset,
              quic_stream_length,
              quic_stream_data,
              quic_crypto_offset,
              quic_crypto_length,
              quic_crypto_data,
              quic_ack_largest,
              quic_ack_delay,
              quic_ack_block_count,
              quic_ack_gap,
              quic_ack_block,
              quic_reset_stream_id,
              quic_reset_err_code,
              quic_reset_final_offset,
              quic_stop_sending_id,
              quic_stop_sending_err_code,
              quic_connection_close_err_code,
              quic_connection_close_frame_type,
              quic_connection_close_reason_length,
              quic_connection_close_reason,
              quic_application_close_err_code,
              quic_max_stream_data_id,
              quic_path_challenge_data,
              quic_new_connection_id_length,
              quic_new_connection_id_seq_num,
              quic_new_connection_id_retire_prior_to,
              quic_new_connection_id_scid,
              quic_new_connection_id_token,
              quic_retire_connection_id_seq_num,
              quic_s_done} state;
        bool long_format;
        char hdr_type;
        int dcil;
        int scil;
        char frame_type;
        int data_remaining;
       long long ack_blocks_expected;
        long long ack_block_count;
        int payload_length_pos;
        int fence;

    public:
        quic_ser() : state(quic_s_init) {
        }
        virtual void  set(long long res) {
            switch (state) {
            case quic_s_init:
            {
                long_format = res != 3;
                hdr_type = (long_format ? ((res & 3) << 4) : 0) | 0x43 ;
		setn(hdr_type | (long_format ? 0x80 : 0), 1);
                state = quic_s_version;
            }
            break;
            case quic_s_version:
            {
                if (long_format)
                    setn(res,4);
                state = quic_s_dcid;
            }
            break;
            case quic_s_dcid:
            {
                if (long_format) {
                    setn(8,1);
                }
		setn(res,8);
                state = quic_s_scid;
            }
            break;
            case quic_s_scid:
            {
                if (long_format) {
                    setn(8,1);
		    setn(res,8);
                }
                state = quic_s_retry_token_length;
            }
            break;
            case quic_s_pkt_num:
            {
                set_pkt_num(res);
                state = quic_s_payload;
            }
            break;
            case quic_stream_off:
            {
                frame_type |= res ? 0x04 : 0;
                state = quic_stream_len;
            }
            break;
            case quic_stream_len:
            {
                frame_type |= res ? 0x02 : 0;
                state = quic_stream_fin;
            }
            break;
            case quic_stream_fin:
            {
                frame_type |= res ? 0x01 : 0;
		setn(frame_type,1);
                state = quic_stream_id;
            }
            break;
            case quic_stream_id:
            {
                set_var_int(res);
                state = quic_stream_offset;
            }
            break;
            case quic_stream_offset:
            {
                if (0x04 & frame_type)
                    set_var_int(res);
                state = quic_stream_length;
            }
            break;
            case quic_stream_length:
            {
                if (0x02 & frame_type)
                    set_var_int(res);
                data_remaining = res;
                state = quic_stream_data;
            }
            break;
            case quic_crypto_offset:
            {
                set_var_int(res);
                state = quic_crypto_length;
            }
            break;
            case quic_crypto_length:
            {
                set_var_int(res);
                data_remaining = res;
                state = quic_crypto_data;
            }
            break;
            case quic_stream_data:
            case quic_crypto_data:
            case quic_connection_close_reason:
            case quic_path_challenge_data:
            case quic_s_retry_token:
            {
                setn(res,1);
            }
            break;
            case quic_ack_largest:
            {
                set_var_int(res);
                state = quic_ack_delay;
            }
            break;
            case quic_ack_delay:
            {
                set_var_int(res);
                state = quic_ack_block_count;
            }
            break;
            case quic_ack_gap:
            {
                if (ack_block_count == 0)
                    {} // first ack block has no gap
                else
                    set_var_int(res);
                state = quic_ack_block;
            }
            break;
            case quic_ack_block:
            {
                set_var_int(res);
                state = quic_ack_gap;
                ack_block_count++;
            }
            break;
            case quic_reset_stream_id:
            {
                set_var_int(res);
                state = quic_reset_err_code;
            }
            break;
            case quic_reset_err_code:
            {
                set_var_int(res);
                state = quic_reset_final_offset;
            }
            break;
            case quic_reset_final_offset:
            {
                set_var_int(res);
            }
            break;
            case quic_stop_sending_id:
            {
                set_var_int(res);
                state = quic_stop_sending_err_code;
            }
            break;
            case quic_stop_sending_err_code:
            {
                set_var_int(res);
            }
            break;
            case quic_connection_close_err_code:
            {
                set_var_int(res);
                state = quic_connection_close_frame_type;
            }
            break;
            case quic_connection_close_frame_type:
            {
                set_var_int(res);
                state = quic_connection_close_reason_length;
            }
            break;
            case quic_connection_close_reason_length:
            {
                set_var_int(res);
                data_remaining = res;
                state = quic_connection_close_reason;
            }
            break;
            case quic_application_close_err_code:
            {
                set_var_int(res);
                state = quic_connection_close_reason_length;
            }
            break;
            case quic_max_stream_data_id:
            {
                set_var_int(res);
                state = quic_reset_final_offset;
            }
            break;
            case quic_new_connection_id_length:
            {
                setn(res,1);
                scil = res;
                state = quic_new_connection_id_scid;
            }
            break;
            case quic_new_connection_id_seq_num:
            {
                set_var_int(res);
                state = quic_new_connection_id_retire_prior_to;
            }
            break;
            case quic_new_connection_id_retire_prior_to:
            {
                set_var_int(res);
                state = quic_new_connection_id_length;
            }
            break;
            case quic_new_connection_id_scid:
            {
                setn(res,scil);
                state = quic_new_connection_id_token;
            }
            break;
            case quic_new_connection_id_token:
            {
                setn(res,16);
            }
            break;
            case quic_retire_connection_id_seq_num:
            {
                set_var_int(res);
            }
            break;
            default:
            throw deser_err();
            }
        }

        void set_var_int(long long res) {
	    long long val = res & 0x3fffffffffffffff;
	    int bytecode = res <= 0x3f ? 0 : res <= 0x3fff ? 1 : res <= 0x3fffffff ? 2 : 3;
	    int bytes = 1 << bytecode;
            val |= bytecode << ((bytes << 3) - 2);
	    setn(val,bytes);
        }

        void set_pkt_num(long long &res) {
            // setn(0xc0000000 | (0x3fffffff & res),4);
            // pkt number length is low two bits of first packet byte, plus one 
            setn(res,(hdr_type & 3) + 1);
        }

        virtual void open_tag(int tag, const std::string &) {
            if (state == quic_s_payload) {
                if (tag == 0) {
		    frame_type = 0x08;
                    state = quic_stream_off;
                    return;
                }
                if (tag == 1) {
                    state = quic_ack_largest;
                    frame_type = 0x02;
                }
                else if (tag == 2) {
                    state = quic_reset_stream_id;
                    frame_type = 0x04;
                }
                else if (tag == 3) {
                    state = quic_reset_stream_id; // max_stream_id state equivalent to this
                    frame_type = 0x12;
                }
                else if (tag == 4) {
                    state = quic_connection_close_err_code;
                    frame_type = 0x1c;
                }
                else if (tag == 5) {
                    state = quic_max_stream_data_id;
                    frame_type = 0x11;
                }
                else if (tag == 6) {
                    state = quic_reset_final_offset;
                    frame_type = 0x16;
                }
                else if (tag == 7) {
                    frame_type = 0x06;
                    state = quic_crypto_offset;
                }
                else if (tag == 8) {
                    frame_type = 0x01;
                }
                else if (tag == 9) {
                    frame_type = 0x1d;
                    state = quic_application_close_err_code;
                }
                else if (tag == 10) {
                    frame_type = 0x18;
                    state = quic_new_connection_id_seq_num;
                }
                else if (tag == 11) {
                    frame_type = 0x1a;
                    state = quic_path_challenge_data;
                }
                else if (tag == 12) {
                    frame_type = 0x1b;
                    state = quic_path_challenge_data;
                }
                else if (tag == 13) {
                    frame_type = 0x07;
                    state = quic_crypto_length;  // new token equivalent to this
                }
                else if (tag == 14) {
                    frame_type = 0x10;  // max_data
                    state = quic_reset_final_offset;
                }
                else if (tag == 15) {
                    state = quic_max_stream_data_id;
                    frame_type = 0x15;
                }
                else if (tag == 16) {
                    state = quic_stop_sending_id;
                    frame_type = 0x05;
                }
                else if (tag == 17) {
                    state = quic_reset_final_offset;
                    frame_type = 0x14;
                }
                else if (tag == 18) {
                    state = quic_retire_connection_id_seq_num;
                    frame_type = 0x19;
                }
	        else {
                    std::cerr << "saw frame tag " << tag << std::endl;  
                    throw deser_err();
	        }
	        setn(frame_type,1);
	        return;
            }
            throw deser_err();
        }

        virtual void open_list_elem() {
        }

        void open_list(int len) {
	    ack_blocks_expected = len;
            if (state == quic_ack_block_count) {
                set_var_int(ack_blocks_expected - 1); // block count doesn't include first
                ack_block_count = 0;
                state = quic_ack_gap;
            } else if (state == quic_s_retry_token_length) {
                if (long_format & ((hdr_type & 0x30) == 0x00)) {
                    set_var_int(len);
                    data_remaining = len;
                }
                state = quic_s_retry_token;
            }
        }
        void close_list() {
            if (state == quic_s_payload) {
                if ((hdr_type & 0x30) == 0x00)
                    while (res.size() < 1200)
                        res.push_back(0);  // pad initial packet to 1200 bytes
                for(unsigned i = 0; i < 16; i++)
                    res.push_back(0);
                if (long_format) {
                    int len = res.size() - (payload_length_pos+2) ;
                    res[payload_length_pos] = 0x40 | ((len >> 8) & 0x3f);
                    res[payload_length_pos+1] = len & 0xff;
                    state = quic_s_init;
                }
            }
            else if (state == quic_s_retry_token) {
                payload_length_pos = this->res.size();
                if (long_format) {
                    setn(0,2);  // will fill in correct value later
                }
                state = quic_s_pkt_num;
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = quic_s_payload;
        }

        ~quic_ser(){}
    };


    class quic_server_test_connection_close::quic_prot_ser : public ivy_binary_ser {
    public:

        void open_list(int) {
        }

        virtual void  set(long long res) {
            setn(res,1);
        }    
    };


    class quic_server_test_connection_close::quic_prot_deser : public ivy_binary_deser {
        int data_remaining;
        int level;
    public:
        quic_prot_deser(const std::vector<char> &inp) : ivy_binary_deser(inp),level(0) {}

        void  get(long long &res) {
            getn(res,1);
        }    

        unsigned char peek(unsigned p) {
            return more(p-pos+1) ? inp[p] : 0;
        }

        unsigned get_var_int_len(unsigned p) {
            unsigned code = peek(p) & 0xc0;
            return (code == 0x00) ? 1 : (code == 0x40) ? 2 : (code == 0x80) ? 4 : 8;
        }

        unsigned get_var_int(unsigned p, unsigned len) {
            unsigned res = peek(p) & 0x3f;
            for (unsigned i = 1; i < len; i++)
                res = (res << 8) + peek(p+i);
            return res;
        }
            
        void open_list() {
            if (level != 1)
                return;
            if (peek(pos) & 0x80) { // a long packet
                unsigned dcil = peek(pos+5);
                unsigned scil = peek(pos+6+dcil);
                unsigned pnum_pos = pos + 7 + dcil + scil;
                if ((peek(pos) &0x30) == 0x00) { // initial packets have tokens
                    unsigned len = get_var_int_len(pnum_pos);
                    unsigned retry_token_len = get_var_int(pnum_pos,len);
                    pnum_pos = pnum_pos + len + retry_token_len;
                }
                unsigned len = get_var_int_len(pnum_pos);
                unsigned pyld_len = get_var_int(pnum_pos,len);
                data_remaining = (pnum_pos-pos) + len + pyld_len;
                std::cout << "pkt len: " << data_remaining << " type: " << (peek(pos)-pos) << " len len: " << len << " pyld_len: " << pyld_len << " pnum_pos: " << pnum_pos << std::endl;
            }
            else {
                data_remaining = 0x7fffffff;
            }
        }

        bool open_list_elem() {
            if (!more(1)) {
                return false;
            }
            bool res = true;
            if (level == 1) {
                res = data_remaining-- > 0;
            }
            if (res)
                level++;
            return res;
        }
        void close_list_elem() {
            level--;
        }
    };

	    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::prot__arr &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::prot__arr _arg<quic_server_test_connection_close::prot__arr>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::prot__arr a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::stream_data>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::prot__arr>(ivy_deser &inp, quic_server_test_connection_close::prot__arr &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::prot__arr>(ivy_ser &res, const quic_server_test_connection_close::prot__arr &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::prot__arr& val) {
	        z3::expr z3end = g.apply("prot.arr.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("prot.arr.value",z3val,g.int_to_z3(g.sort("prot.idx"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::prot__arr>( gen &g, const  z3::expr &v,quic_server_test_connection_close::prot__arr &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("prot.arr.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("prot.arr.value",v,g.int_to_z3(g.sort("prot.idx"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::prot__arr>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("prot.idx"),__sz);
                z3::expr pred =  g.apply("prot.arr.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("prot.arr.value",v,g.int_to_z3(g.sort("prot.idx"),__i)));
	    }
	    #endif

	

    // This structure holds all the callbacks. These are functions
    // that are called synchronously.

    struct tls_callbacks {
        thunk__tls_api__lower__send ls;
        thunk__tls_api__upper__recv ur;
        thunk__tls_api__upper__alert ua;
        thunk__tls_api__upper__keys_established use;
    tls_callbacks(
        const thunk__tls_api__lower__send ls,
        const thunk__tls_api__upper__recv ur,
        const thunk__tls_api__upper__alert ua,
        const thunk__tls_api__upper__keys_established use
    )
    : ls(ls), ur(ur), ua(ua), use(use) {}
    };

    /* Per epoch crypto context. There are four such contexts:
     * 0: Initial context, with encryption based on a version dependent key,
     * 1: 0-RTT context
     * 2: Handshake context
     * 3: Application data
     */
    struct quic_crypto_context_t {
        void* aead_encrypt;
        void* aead_decrypt;
        void* pn_enc; /* Used for PN encryption */
        void* pn_dec; /* Used for PN decryption */
        quic_crypto_context_t() {
           aead_encrypt = aead_decrypt = pn_enc = pn_dec = 0;
        }
    };

    // Structure to hold state of a tls session

    struct picotls_connection {
        unsigned long long id;
        ptls_t *gs;
        tls_callbacks cb;
        ptls_handshake_properties_t *hsp;
        std::vector<char> input;
        int handshake_status;
        std::vector<quic_crypto_context_t> crypto_context;
        bool is_server;

        picotls_connection(unsigned long long id, ptls_t *gs, tls_callbacks cb,
            ptls_handshake_properties_t *hsp, bool is_server)
            : id(id),gs(gs),cb(cb),hsp(hsp),is_server(is_server) {
            handshake_status = 0;
            crypto_context.resize(4);
        }
    };

    int tls_collect_extensions_cb(ptls_t* tls, struct st_ptls_handshake_properties_t* properties, uint16_t type)
    {
        return type & 0xff00 == 0xff00;
    }

    int tls_collected_extensions_cb(ptls_t* tls, ptls_handshake_properties_t* properties,
    ptls_raw_extension_t* slots)
    {
        // TODO: do something with incoming extensions
        return 0;
    }

    // These are some parameters defined byt the QUIC-TLS standard. They
    // don't really belong here, but then again, QUIC is currently the only
    // existing client of this TLS interface.

    #define QUIC_LABEL_QUIC_BASE "tls13 quic "
    #define QUIC_LABEL_PN "pn"
    #define QUIC_LABEL_INITIAL_CLIENT "client in"
    #define QUIC_LABEL_INITIAL_SERVER "server in"

    // The following mess is to get the traffic keys from picotls

    void *aead_from_secret(ptls_cipher_suite_t * cipher, int is_enc, const void *secret)
    {
        return ptls_aead_new(cipher->aead, cipher->hash, is_enc, secret, QUIC_LABEL_QUIC_BASE);
    }

    void *pn_enc_from_secret(ptls_cipher_suite_t * cipher, int is_enc, const void *secret)
    {
        uint8_t key[PTLS_MAX_SECRET_SIZE];

        ptls_hkdf_expand_label(cipher->hash, key, 
                               cipher->aead->ctr_cipher->key_size,
                               ptls_iovec_init(secret, cipher->hash->digest_size), 
                               "quic hp",
                               ptls_iovec_init(NULL, 0),
                               NULL);

        return ptls_cipher_new(cipher->aead->ctr_cipher, is_enc, key);
    }

    void quic_set_key_from_secret(ptls_cipher_suite_t * cipher, int is_enc, quic_crypto_context_t * ctx, const void *secret)
    {
        if (is_enc) {
             ctx->aead_encrypt = aead_from_secret(cipher, is_enc, secret);
             ctx->pn_enc =  pn_enc_from_secret(cipher, is_enc, secret);
        } else {
            ctx->aead_decrypt = aead_from_secret(cipher, is_enc, secret);
            ctx->pn_dec = pn_enc_from_secret(cipher, is_enc, secret);
        }
    }

    int quic_update_traffic_key_callback(ptls_update_traffic_key_t * self, ptls_t *tls, int is_enc, size_t epoch, const void *secret)
    {
        picotls_connection* cnx = (picotls_connection*)*ptls_get_data_ptr(tls);
        ptls_cipher_suite_t * cipher = ptls_get_cipher(tls);
        quic_set_key_from_secret(cipher, is_enc, &cnx->crypto_context[epoch], secret);
        if (cnx->crypto_context[epoch].aead_encrypt && cnx->crypto_context[epoch].aead_decrypt) {
            cnx->cb.use(cnx->id,epoch);
        }
        return 0;
    }

    // This additional mess sets the initial traffic keys


    void bail(int ret, const char *msg) {
        if (ret) {
            std::cerr << msg;
            exit(1);
        }
    }

    void vec_to_ptls_iovec(ptls_iovec_t &res, const quic_server_test_connection_close::stream_data &vec) {
        res.base = new uint8_t[vec.size()];
        std::copy(vec.begin(),vec.end(),res.base);
        res.len = vec.size();
    }    

    int setup_initial_traffic_keys(picotls_connection *session,
                                   const quic_server_test_connection_close::stream_data &salt_vec,
                                   const quic_server_test_connection_close::stream_data &ikm_vec)
    {
        int ret = 0;
        uint8_t master_secret[256]; /* secret_max */
        ptls_cipher_suite_t cipher = { 0, &ptls_openssl_aes128gcm, &ptls_openssl_sha256 };
        ptls_iovec_t salt;
        ptls_iovec_t ikm;
        ptls_iovec_t prk;
        uint8_t client_secret[256];
        uint8_t server_secret[256];
        uint8_t *secret1, *secret2;

        vec_to_ptls_iovec(salt,salt_vec);
        vec_to_ptls_iovec(ikm,ikm_vec);
        ret = ptls_hkdf_extract(cipher.hash, master_secret, salt, ikm);
        bail(ret,"tls: failed to set up initial master secret\n");
        prk.base = master_secret;
        prk.len = cipher.hash->digest_size;
        ret = ptls_hkdf_expand_label(cipher.hash, client_secret, cipher.hash->digest_size,
            prk, QUIC_LABEL_INITIAL_CLIENT, ptls_iovec_init(NULL, 0),NULL);
            // QUIC_LABEL_QUIC_BASE);
        bail(ret,"tls: failed to set up initial client secret\n");
        ret = ptls_hkdf_expand_label(cipher.hash, server_secret, cipher.hash->digest_size,
            prk, QUIC_LABEL_INITIAL_SERVER, ptls_iovec_init(NULL, 0),NULL);
            // QUIC_LABEL_QUIC_BASE);
        bail(ret,"tls: failed to set up initial server secret\n");
        quic_set_key_from_secret(&cipher, session->is_server, &session->crypto_context[0], server_secret);
        quic_set_key_from_secret(&cipher, !session->is_server, &session->crypto_context[0], client_secret);
	return ret;
    }

    void encrypt_symm(ptls_cipher_context_t *pn_enc, const quic_server_test_connection_close::stream_data &clear, const quic_server_test_connection_close::stream_data &iv, quic_server_test_connection_close::stream_data &cipher) {
        std::vector<uint8_t> bytes;
        bytes.resize(iv.size());
        std::copy(iv.begin(),iv.end(),bytes.begin());
        ptls_cipher_init(pn_enc, &bytes[0]);
        std::vector<uint8_t> input, output;
        input.resize(clear.size());
        std::copy(clear.begin(),clear.end(),input.begin());
        output.resize(clear.size());
        ptls_cipher_encrypt(pn_enc, &output[0], &input[0], input.size());
        cipher.resize(output.size());
        std::copy(output.begin(),output.end(),cipher.begin());
    }


    // Some parameters for picotls as used by picoquic.

    ptls_key_exchange_algorithm_t *picotls_key_exchanges[] = 
        { &ptls_openssl_secp256r1, &ptls_minicrypto_x25519, NULL };

    ptls_cipher_suite_t *picotls_cipher_suites[] = { 
        &ptls_openssl_aes256gcmsha384, &ptls_openssl_aes128gcmsha256,
        &ptls_minicrypto_chacha20poly1305sha256, NULL };

    // Here we process handshake data on a TLS connection. The in_epoch is a picotls
    // epoch. For the initial client handshake, input is null.

    int picotls_do_handshake(picotls_connection *s, size_t in_epoch, void *input, size_t inlen ) {
        size_t epoch_offsets[5] = { 0, 0, 0, 0, 0 };
        struct st_ptls_buffer_t sendbuf;
        ptls_buffer_init(&sendbuf, (void *)"", 0);
        int ret = ptls_handle_message(s->gs, &sendbuf, epoch_offsets, in_epoch, input, inlen, s->hsp);
        if (ret == PTLS_ERROR_IN_PROGRESS) {
//            std::cerr << "PICOTLS RETURNED PTLS_ERROR_IN_PROGRESS\n";
        } else if (ret != 0) {
            std::cerr << "PICOTLS RETURNED ERROR: " << ret << "\n";
        }

        // Any generated bytes go to the lower send callback (even in case of error).

        if (sendbuf.off > 0) {
            for (size_t ep = 0; ep < 4; ep++) {
                size_t num_bytes = epoch_offsets[ep+1] - epoch_offsets[ep];
                if (num_bytes) {
                    quic_server_test_connection_close::stream_data bytes;
                    bytes.resize(num_bytes);
                    std::copy(sendbuf.base+epoch_offsets[ep],sendbuf.base+epoch_offsets[ep+1],bytes.begin());
                    s->cb.ls(s->id,bytes,ep);
                }
            }
        }
	return ret;
    }

    static int set_sign_certificate_from_key(EVP_PKEY* pkey, ptls_context_t* ctx)
    {
        int ret = 0;
        ptls_openssl_sign_certificate_t* signer;

        signer = (ptls_openssl_sign_certificate_t*)malloc(sizeof(ptls_openssl_sign_certificate_t));

        if (signer == NULL || pkey == NULL) {
            ret = -1;
        } else {
            ret = ptls_openssl_init_sign_certificate(signer, pkey);
            ctx->sign_certificate = &signer->super;
        }

        if (pkey != NULL) {
            EVP_PKEY_free(pkey);
        }

        if (ret != 0 && signer != NULL) {
            free(signer);
        }

        return ret;
    }

    static int set_sign_certificate_from_key_file(char const* keypem, ptls_context_t* ctx)
    {
        int ret = 0;
        BIO* bio = BIO_new_file(keypem, "rb");
        EVP_PKEY *pkey = PEM_read_bio_PrivateKey(bio, NULL, NULL, NULL);
        if (pkey == NULL) {
            ret = -1;
        }
        else {
            ret = set_sign_certificate_from_key(pkey, ctx);
        }
        BIO_free(bio);
        return ret;
    }





    // get a new UDP socket

    int make_udp_socket() {
        int sock = ::socket(AF_INET, SOCK_DGRAM, 0);
        if (sock < 0)
            { std::cerr << "cannot create socket\n"; exit(1); }
        return sock;
    }
    

    // This structure holds all the callbacks for the endpoint. These are function objects
    // that are called asynchronously.

    struct udp_callbacks {
        thunk__net__impl__handle_recv rcb;
        udp_callbacks(const thunk__net__impl__handle_recv &rcb)
            : rcb(rcb) {}
    };

    // This is a general class for an asynchronous task. These objects are called in a loop
    // by a thread allocated by the runtime. The fdes method returns a file descriptor
    // associated with the object. If fdes returns a negative value, the thread deletes the
    // object and terminates.

    class udp_task : public reader {
      protected:
        int sock;           // socket associated to this task, or -1 if task complete
        quic_server_test_connection_close::endpoint_id my_id;       // host id associated to this task
        udp_callbacks cb;   // callbacks to ivy
        ivy_class *ivy;     // pointer to main ivy object (mainly to get lock)

      public:

        udp_task(quic_server_test_connection_close::endpoint_id my_id, int sock, const udp_callbacks &cb, ivy_class *ivy)
          : my_id(my_id), sock(sock), cb(cb), ivy(ivy) {} 

        virtual int fdes() {
            return sock;
        }

    };


    // This task reads messages from a socket and calls the "recv" callback.

    class udp_reader : public udp_task {
        std::vector<char> buf;
      public:
        udp_reader(quic_server_test_connection_close::endpoint_id my_id, int sock, const udp_callbacks &cb, ivy_class *ivy)
            : udp_task(my_id, sock, cb, ivy) {
        }

        // This is called in a loop by the task thread.

        virtual void read() {
            // std::cout << "RECEIVING\n";

	    int len=0;
	    socklen_t lenlen=4;
#ifdef _WIN32
	    if (getsockopt(sock,SOL_SOCKET,SO_RCVBUF,(char *)&len,&lenlen))
#else
	    if (getsockopt(sock,SOL_SOCKET,SO_RCVBUF,&len,&lenlen))
#endif
		{ perror("getsockopt failed"); exit(1); }
	    std::vector<char> buf(len);
	    int bytes;
	    sockaddr_in srcaddr;
	    socklen_t addrlen = sizeof(srcaddr);
	    if ((bytes = recvfrom(sock,&buf[0],len,0,(sockaddr *)&srcaddr,&addrlen)) < 0)
		{ std::cerr << "recvfrom failed\n"; exit(1); }
	    if (bytes == 0) {
	        close(sock);
	        sock = -1;  // will cause this thread to exit and reader object to be deleted
	        return;
	    }
   	    buf.resize(bytes);
	    quic_server_test_connection_close::prot__arr pkt;
	    try {
		quic_server_test_connection_close::quic_prot_deser ds(buf);
		__deser(ds,pkt);
		if (ds.pos < buf.size())
		    throw deser_err();
	    } catch (deser_err &){
		std::cout << "BAD PACKET RECEIVED\n";
		return;
	    }
	quic_server_test_connection_close::ip__endpoint src;
	src.protocol = quic_server_test_connection_close::ip__udp;
	src.addr = ntohl(srcaddr.sin_addr.s_addr);
	src.port = ntohs(srcaddr.sin_port);
	    ivy->__lock();
	    cb.rcb(sock,src,pkt);
	    ivy->__unlock();
	}

    };


	    std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls_extensions &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
		return s;
            }

	    template <>
	    quic_server_test_connection_close::tls_extensions _arg<quic_server_test_connection_close::tls_extensions>(std::vector<ivy_value> &args, unsigned idx, long long bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        quic_server_test_connection_close::tls_extensions a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<quic_server_test_connection_close::tls__extension>(arg.fields,i,0);
	        }
	        return a;
	    }

	    template <>
	    void __deser<quic_server_test_connection_close::tls_extensions>(ivy_deser &inp, quic_server_test_connection_close::tls_extensions &res) {
	        inp.open_list();
	        while(inp.open_list_elem()) {
		    res.resize(res.size()+1);
	            __deser(inp,res.back());
		    inp.close_list_elem();
                }
		inp.close_list();
	    }

	    template <>
	    void __ser<quic_server_test_connection_close::tls_extensions>(ivy_ser &res, const quic_server_test_connection_close::tls_extensions &inp) {
	        int sz = inp.size();
	        res.open_list(sz);
	        for (unsigned i = 0; i < (unsigned)sz; i++) {
		    res.open_list_elem();
	            __ser(res,inp[i]);
		    res.close_list_elem();
                }
	        res.close_list();
	    }

	    #ifdef Z3PP_H_
	    template <>
            z3::expr __to_solver(gen& g, const z3::expr& z3val, quic_server_test_connection_close::tls_extensions& val) {
	        z3::expr z3end = g.apply("tls_extensions.end",z3val);
	        z3::expr __ret = z3end  == g.int_to_z3(z3end.get_sort(),val.size());
	        unsigned __sz = val.size();
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __ret = __ret && __to_solver(g,g.apply("tls_extensions.value",z3val,g.int_to_z3(g.sort("tls_extensions.domain"),__i)),val[__i]);
                return __ret;
            }

	    template <>
	    void  __from_solver<quic_server_test_connection_close::tls_extensions>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls_extensions &res){
	        unsigned long long __end;
	        __from_solver(g,g.apply("tls_extensions.end",v),__end);
	        unsigned __sz = (unsigned) __end;
	        res.resize(__sz);
	        for (unsigned __i = 0; __i < __sz; ++__i)
		    __from_solver(g,g.apply("tls_extensions.value",v,g.int_to_z3(g.sort("tls_extensions.domain"),__i)),res[__i]);
	    }

	    template <>
	    void  __randomize<quic_server_test_connection_close::tls_extensions>( gen &g, const  z3::expr &v){
	        unsigned __sz = rand() % 4;
                z3::expr val_expr = g.int_to_z3(g.sort("tls_extensions.domain"),__sz);
                z3::expr pred =  g.apply("tls_extensions.end",v) == val_expr;
                g.add_alit(pred);
	        for (unsigned __i = 0; __i < __sz; ++__i)
	            __randomize<quic_server_test_connection_close::tls__extension>(g,g.apply("tls_extensions.value",v,g.int_to_z3(g.sort("tls_extensions.domain"),__i)));
	    }
	    #endif

	            template<typename cont, typename cbtype> class sync_reader : public reader {
                cont c;
                cbtype cb;
                int fd;
                ivy_class *ivy;
            public:
                sync_reader(cont c, int fd, cbtype cb, ivy_class *ivy) : c(c), fd(fd), cb(cb), ivy(ivy) {}
                int fdes() {return fd;}
                void read() {
                    ivy->__lock();
                    if (::fsync(fd) < 0)
                        { perror("failed to sync file"); }
                    fd = -1;
                    cb(c);
                    ivy->__unlock();
                }  
            };
        int quic_server_test_connection_close::___ivy_choose(int rng,const char *name,int id) {
        std::ostringstream ss;
        ss << name << ':' << id;;
        for (unsigned i = 0; i < ___ivy_stack.size(); i++)
            ss << ':' << ___ivy_stack[i];
        return ___ivy_gen->choose(rng,ss.str().c_str());
    }
unsigned quic_server_test_connection_close::bit__one(){
    unsigned val;
    val = (unsigned)___ivy_choose(0,"ret:val",0);
    val = (1 & 1);
    return val;
}
unsigned long long quic_server_test_connection_close::stream_data__begin(const stream_data& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
quic_server_test_connection_close::stream_kind quic_server_test_connection_close::get_stream_kind(unsigned S){
    quic_server_test_connection_close::stream_kind val;
    val = (stream_kind)___ivy_choose(0,"ret:val",0);
    val = ((((S >> 1) & 1) == bit__one()) ? unidir : bidir);
    return val;
}
quic_server_test_connection_close::role quic_server_test_connection_close::get_stream_role(unsigned S){
    quic_server_test_connection_close::role val;
    val = (role)___ivy_choose(0,"ret:val",0);
    val = ((((S >> 0) & 1) == bit__one()) ? role__server : role__client);
    return val;
}
unsigned long long quic_server_test_connection_close::vector__tls__extension____begin(const vector__tls__extension__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long quic_server_test_connection_close::tls__handshakes__begin(const tls__handshakes& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long quic_server_test_connection_close::frame__arr__begin(const frame__arr& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long quic_server_test_connection_close::vector__transport_parameter____begin(const vector__transport_parameter__& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned long long quic_server_test_connection_close::prot__arr__begin(const prot__arr& A){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val = 0;
    return val;
}
unsigned quic_server_test_connection_close::stream_data__value(const stream_data& a, unsigned long long i){
    unsigned val;
    val = (unsigned)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::stream_data__end(const stream_data& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::stream_data__segment(const stream_data& a, unsigned long long lo, unsigned long long hi){
    quic_server_test_connection_close::stream_data val;
    val =  __array_segment(a,lo,hi) ;
    return val;
}
unsigned quic_server_test_connection_close::vector__tls__cipher_suite____value(const vector__tls__cipher_suite__& a, unsigned long long i){
    unsigned val;
    val = (unsigned)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::vector__tls__cipher_suite____end(const vector__tls__cipher_suite__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
unsigned quic_server_test_connection_close::vector__tls__compression_method____value(const vector__tls__compression_method__& a, unsigned long long i){
    unsigned val;
    val = (unsigned)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::vector__tls__compression_method____end(const vector__tls__compression_method__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::tls__extension quic_server_test_connection_close::vector__tls__extension____value(const vector__tls__extension__& a, unsigned long long i){
    quic_server_test_connection_close::tls__extension val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::vector__tls__extension____end(const vector__tls__extension__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::tls__handshake quic_server_test_connection_close::vector__tls__handshake____value(const vector__tls__handshake__& a, unsigned long long i){
    quic_server_test_connection_close::tls__handshake val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::vector__tls__handshake____end(const vector__tls__handshake__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::tls__handshake quic_server_test_connection_close::tls__handshakes__value(const tls__handshakes& a, unsigned long long i){
    quic_server_test_connection_close::tls__handshake val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::tls__handshakes__end(const tls__handshakes& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::frame__ack__block quic_server_test_connection_close::frame__ack__block__arr__value(const frame__ack__block__arr& a, unsigned long long i){
    quic_server_test_connection_close::frame__ack__block val;
    val.gap = (unsigned)___ivy_choose(0,"ret:val",0);
    val.blocks = (unsigned)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::frame__ack__block__arr__end(const frame__ack__block__arr& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::frame quic_server_test_connection_close::frame__arr__value(const frame__arr& a, unsigned long long i){
    quic_server_test_connection_close::frame val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::frame__arr__end(const frame__arr& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::transport_parameter quic_server_test_connection_close::vector__transport_parameter____value(const vector__transport_parameter__& a, unsigned long long i){
    quic_server_test_connection_close::transport_parameter val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::vector__transport_parameter____end(const vector__transport_parameter__& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::quic_packet quic_server_test_connection_close::quic_packet__arr__value(const quic_packet__arr& a, unsigned long long i){
    quic_server_test_connection_close::quic_packet val;
    val.ptype = (quic_packet_type)___ivy_choose(0,"ret:val",0);
    val.pversion = (unsigned)___ivy_choose(0,"ret:val",0);
    val.seq_num = (unsigned)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::quic_packet__arr__end(const quic_packet__arr& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
unsigned quic_server_test_connection_close::quic_packet__retired_cids__value(const quic_packet__retired_cids& a, unsigned long long i){
    unsigned val;
    val = (unsigned)___ivy_choose(0,"ret:val",0);
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::quic_packet__retired_cids__end(const quic_packet__retired_cids& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::prot__arr__value(const prot__arr& a, unsigned long long i){
    quic_server_test_connection_close::stream_data val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::prot__arr__end(const prot__arr& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
quic_server_test_connection_close::tls__extension quic_server_test_connection_close::tls_extensions__value(const tls_extensions& a, unsigned long long i){
    quic_server_test_connection_close::tls__extension val;
    val =  (0 <= i && i < a.size()) ? a[i] : val ;
    return val;
}
unsigned long long quic_server_test_connection_close::tls_extensions__end(const tls_extensions& a){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"ret:val",0);
    val =  a.size() ;
    return val;
}
int quic_server_test_connection_close::ext__prot__get_level(const stream_data& pkt){
    int level;
    level = (int)___ivy_choose(0,"fml:level",0);
    if(!(((stream_data__value(pkt,0) & (0x80 & 255)) & 255) == (0 & 255))){
        {
            unsigned loc__hdr_type;
    loc__hdr_type = (unsigned)___ivy_choose(0,"loc:hdr_type",2782);
            {
                loc__hdr_type = ((stream_data__value(pkt,0) & (0x30 & 255)) & 255);
                if((loc__hdr_type == (0x00 & 255))){
                    {
                        level = 0;
                    }
                }
                else {
                    {
                        level = 2;
                    }
                }
            }
        }
    }
    else {
        {
            level = 3;
        }
    }
    return level;
}
void quic_server_test_connection_close::ext__active_connection_id_limit__set(const active_connection_id_limit& p, trans_params_struct& s){
    {
        s.active_connection_id_limit__is_set = true;
        s.active_connection_id_limit__value = p;
    }
}
int quic_server_test_connection_close::ext__net__impl__open(endpoint_id prm__V0, const ip__endpoint& addr){
    int s;
    s = (int)___ivy_choose(0,"fml:s",0);
    s = make_udp_socket();
    // std::cout << "SOCKET " << s << std::endl;
    struct sockaddr_in myaddr;
    myaddr.sin_family = AF_INET;
    myaddr.sin_addr.s_addr = htonl(addr.addr);
    // myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    myaddr.sin_port = htons(addr.port);
    // std::cout << "binding id: " << prm__V0 << " addr: " << ntohl(myaddr.sin_addr.s_addr) << " port: " << ntohs(myaddr.sin_port) << std::endl;
    if (::bind(s, (struct sockaddr *)&myaddr, sizeof(myaddr)) < 0)
        { perror("bind failed"); exit(1); }
    install_reader(new udp_reader(prm__V0,s, *net__impl__cb[prm__V0], this));
    return s;
}
void quic_server_test_connection_close::ext__initial_max_stream_id_bidi__set(const initial_max_stream_id_bidi& p, trans_params_struct& s){
    {
        s.initial_max_stream_id_bidi__is_set = true;
        s.initial_max_stream_id_bidi__value = p;
    }
}
quic_server_test_connection_close::frame__arr quic_server_test_connection_close::ext__frame__arr__empty(){
    quic_server_test_connection_close::frame__arr a;
    {
        
    }
    return a;
}
void quic_server_test_connection_close::ext__tls_api__upper__create(unsigned long long c, bool is_server, const tls_extensions& e){
    {
            
        // We create a new picootls session, and add an entry in the cid_map
        // for it.

        ptls_context_t* ctx;
        ctx = new ptls_context_t;
        memset(ctx, 0, sizeof(ptls_context_t));
        ctx->random_bytes = ptls_openssl_random_bytes;
        ctx->key_exchanges = picotls_key_exchanges;
        ctx->cipher_suites = picotls_cipher_suites;
        ctx->send_change_cipher_spec = 0;
        // ctx->hkdf_label_prefix = QUIC_LABEL_QUIC_BASE;
        ctx->hkdf_label_prefix__obsolete = NULL;
        ctx->update_traffic_key = new ptls_update_traffic_key_t;
        ctx->update_traffic_key->cb = quic_update_traffic_key_callback;
        ctx->get_time = &ptls_get_time;
        ctx->ticket_lifetime = 0; // no ticket? was: 100000; /* 100,000 seconds, a bit more than one day */
        ctx->require_dhe_on_psk = 1;
        ctx->max_early_data_size = 0xFFFFFFFF;
        ctx->omit_end_of_early_data = 1;
        ptls_handshake_properties_t *handshake_properties = new ptls_handshake_properties_t;
        memset(handshake_properties, 0, sizeof(ptls_handshake_properties_t));
        handshake_properties->collect_extension = tls_collect_extensions_cb;
        handshake_properties->collected_extensions = tls_collected_extensions_cb;
        
        ptls_iovec_t *alpn_vec = new(ptls_iovec_t);  // TODO: will leak this
        //alpn_vec->base = (uint8_t*)"hq-17";
        alpn_vec->base = (uint8_t*)"h3-25";
        alpn_vec->len = strlen((char *)(alpn_vec->base));
        handshake_properties->client.negotiated_protocols.count = 1;
        handshake_properties->client.negotiated_protocols.list = alpn_vec;

        // add the extensions

        ptls_raw_extension_t *ptls_exts = new ptls_raw_extension_t[e.size()+1];
        for (unsigned i = 0; i < e.size(); i++) {
            tls_ser ser;
            __ser(ser,e[i]);
            unsigned etype = (((unsigned char)(ser.res[0])) << 8) + ((unsigned char)(ser.res[1]));
            unsigned len = (((unsigned char)(ser.res[2])) << 8) + ((unsigned char)(ser.res[3]));
            unsigned char *data = new unsigned char[ser.res.size()-4];
            std::copy(ser.res.begin()+4,ser.res.end(),data);
            ptls_exts[i].type = etype;
            ptls_exts[i].data.base = data;
            ptls_exts[i].data.len = len;
            // int eres = gnutls_session_ext_register (session, "ext_name", etype,
            //   GNUTLS_EXT_APPLICATION, gnutls_ext_supp_recv_params,
            //   gnutls_ext_supp_send_params, 0,0,0,0);
            // if (eres != GNUTLS_E_SUCCESS) {
            //     std::cerr << "gnutls_session_ext_register\n";
            //     exit(1);
            // }
        }
        ptls_exts[e.size()].type = 0xffff;
        ptls_exts[e.size()].data.base = NULL;
        ptls_exts[e.size()].data.len = 0;
        handshake_properties->additional_extensions = ptls_exts;

        // Read the certificate, if we are a server

        if (is_server) {
            /* Read the certificate file */
            if (ptls_load_certificates(ctx, "leaf_cert.pem") != 0) {
                 std::cerr << "could not load certificate file leaf_cert.pem\n";
                 exit(1);
            } else if(set_sign_certificate_from_key_file("leaf_cert.key", ctx)) {
                std::cerr << "could not load key file leaf_cert.key\n";
                exit(1);
            }
        }

        
        ptls_t *session;
        session = ptls_new(ctx,is_server ? 1 : 0);
        ptls_set_server_name(session, "servername", strlen("servername"));
        picotls_connection *s = new picotls_connection(c,session,*tls_api__upper__foo__cb,handshake_properties,is_server);
        *ptls_get_data_ptr(session) = s;

        tls_api__upper__foo__cid_map[c] = s;
        
        // Start the handshake if we are the client. The in_epoch is zero for "initial".

        if (!is_server)
            picotls_do_handshake(s,0,0,0);
    }
}
unsigned long long quic_server_test_connection_close::ext__tls_api__upper__iv_size(unsigned long long c, int l){
    unsigned long long sz;
    sz = (unsigned long long)___ivy_choose(0,"fml:sz",0);
    {
        
            picotls_connection *s = tls_api__upper__foo__cid_map[c];
        ptls_cipher_context_t *pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_enc);
        if (!pn_enc)
            pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);
        if (!pn_enc) {
            std::cerr << "cipher for level " << l << " is not set\n";
            sz = 0;
        }
        else sz = pn_enc->algo->iv_size;
    }
    return sz;
}
void quic_server_test_connection_close::ext___finalize(){
    {
        ivy_assume((0 < conn_total_data[the_cid]), "quic_server_test.ivy: line 506");
    }
}
void quic_server_test_connection_close::ext__max_packet_size__set(const max_packet_size& p, trans_params_struct& s){
    {
        s.max_packet_size__is_set = true;
        s.max_packet_size__value = p;
    }
}
void quic_server_test_connection_close::tls_api__upper__keys_established(unsigned long long c, int lev){
    {
        {
            quic_packet_type loc__e;
    loc__e = (quic_packet_type)___ivy_choose(0,"loc:e",2784);
            {
                loc__e = ((lev == 2) ? quic_packet_type__handshake : quic_packet_type__zero_rtt);
                {
                    quic_server_test_connection_close::cid loc__0;
                    {
                        ___ivy_stack.push_back(2764);
                        loc__0 = ext__tls_id_to_cid(c);
                        ___ivy_stack.pop_back();
                        ___ivy_stack.push_back(2765);
                        ext__tls_keys_established_event(loc__0, loc__e);
                        ___ivy_stack.pop_back();
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__prot__arr__append(prot__arr& a, const stream_data& v){
    {

        a.push_back(v);
    }
}
unsigned long long quic_server_test_connection_close::ext__prot__idx__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
quic_server_test_connection_close::cid quic_server_test_connection_close::ext__prot__bytes_to_cid(const stream_data& bytes){
    quic_server_test_connection_close::cid val;

    val.val = 0;
    for (unsigned i = 0; i < bytes.size(); i++)
        val.val = (val.val << 8) + bytes[i];
    return val;
}
void quic_server_test_connection_close::ext__frame__stream__handle(frame__stream f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 548");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 549");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 550");
        ivy_assume(!conn_closed[scid], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 551");
        {
            unsigned long long loc__offset;
    loc__offset = (unsigned long long)___ivy_choose(0,"loc:offset",2788);
            {
                loc__offset = (f.off ? f.offset : 0);
                ivy_assume((((loc__offset + f.length) < stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)]) || ((loc__offset + f.length) == stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 554");
                ivy_assume((f.data == stream_data__segment(stream_app_data[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)],loc__offset,(loc__offset + f.length))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 556");
                ivy_assume((f.fin == (stream_app_data_finished[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] && ((loc__offset + f.length) == stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)]))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 558");
                {
                    stream_kind loc__kind;
    loc__kind = (stream_kind)___ivy_choose(0,"loc:kind",2787);
                    {
                        loc__kind = get_stream_kind(f.id);
                        ivy_assume(conn_seen[scid], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 567");
                        {
                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2785);
                            {
                                ___ivy_stack.push_back(2766);
                                loc__0 = ext__stream_max_data(dcid, f.id);
                                ___ivy_stack.pop_back();
                                ivy_assume((((loc__offset + f.length) < loc__0) || ((loc__offset + f.length) == loc__0)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 568");
                            }
                        }
                        ivy_assume((!stream_reset[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] || (((loc__offset + f.length) < stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)]) || ((loc__offset + f.length) == stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)]))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 569");
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2786);
                            {
                                ___ivy_stack.push_back(2767);
                                loc__0 = ext__stream_id_allowed(dcid, f.id);
                                ___ivy_stack.pop_back();
                                ivy_assume(loc__0, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 571");
                            }
                        }
                    }
                }
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 312");
                ivy_assume((connected[the_cid] && (dcid == connected_to[the_cid])), "quic_server_test.ivy: line 313");
                ivy_assume((f.len && f.off), "quic_server_test.ivy: line 314");
                ivy_assume((0 < f.length), "quic_server_test.ivy: line 315");
                ivy_assume((f.offset == stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)]), "quic_server_test.ivy: line 316");
                unsigned long long __tmp0;
                __tmp0 = stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)];
                unsigned long long __tmp1;
                __tmp1 = f.offset;
                ivy_assume((f.length == ( __tmp0 < __tmp1 ? 0 : __tmp0 - __tmp1)), "quic_server_test.ivy: line 317");
            }
        }
        stream_seen[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.id)] = true;
        {
            unsigned long long loc__offset;
    loc__offset = (unsigned long long)___ivy_choose(0,"loc:offset",2790);
            {
                loc__offset = (f.off ? f.offset : 0);
                {
                    unsigned long long loc__length;
    loc__length = (unsigned long long)___ivy_choose(0,"loc:length",2789);
                    {
                        loc__length = (loc__offset + f.length);
                        if((stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] < loc__length)){
                            {
                                unsigned long long __tmp2;
                                __tmp2 = loc__length;
                                unsigned long long __tmp3;
                                __tmp3 = stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)];
                                conn_total_data[dcid] = (conn_total_data[dcid] + ( __tmp2 < __tmp3 ? 0 : __tmp2 - __tmp3));
                                stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] = loc__length;
                            }
                        }
                        if(f.fin){
                            {
                                stream_finished[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] = true;
                            }
                        }
                        ___ivy_stack.push_back(2768);
                        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(0, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream>(f)), e, false);
                        ___ivy_stack.pop_back();
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__frame__retire_connection_id__handle(const frame__retire_connection_id& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1066");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1067");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1068");
        ivy_assume(((f.seq_num < max_seq_num[dcid]) || (f.seq_num == max_seq_num[dcid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1071");
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 379");
            }
        }
        cid_mapped[seqnum_to_cid[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.seq_num)]] = false;
        ___ivy_stack.push_back(2775);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(18, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__retire_connection_id>(f)), e, true);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::imp__recv_packet(const ip__endpoint& src, const ip__endpoint& dst, const quic_packet& pkt){
    {
    }
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__tls_api__upper__encrypt_aead(unsigned long long c, int l, const stream_data& clear, unsigned seq, const stream_data& ad){
    quic_server_test_connection_close::stream_data cipher;
    {

            picotls_connection *s = tls_api__upper__foo__cid_map[c];
        ptls_aead_context_t *aead = (ptls_aead_context_t *)(s->crypto_context[l].aead_encrypt);
        uint32_t checksum_length = aead->algo->tag_size;
        std::vector<uint8_t> bytes;
        bytes.resize(ad.size());
        std::copy(ad.begin(),ad.end(),bytes.begin());
        std::vector<uint8_t> input, output;
        input.resize(clear.size());
        std::copy(clear.begin(),clear.end(),input.begin());
        output.resize(clear.size() + checksum_length);
        size_t encrypted = ptls_aead_encrypt(aead,
          &output[0], &input[0], input.size(), seq,
          &bytes[0], bytes.size());
        cipher.resize(output.size());
        std::copy(output.begin(),output.end(),cipher.begin());
    }
    return cipher;
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__http_request_file__read(){
    quic_server_test_connection_close::stream_data d;
    {

        if (::lseek(http_request_file__fildes,0,SEEK_SET) < 0) {
            perror("cannot seek to beginning of file");
        }
        std::vector<char> buf;
        ivy_socket_deser ds(http_request_file__fildes,buf);  // initializer deserializer with zero bytes
        while (ds.more(1)) {
            long long res;
            ds.getn(res,1);
            d.push_back(res);
        }  // read all the bytes
    }
    return d;
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__prot__to_var_int_16(unsigned long long val){
    quic_server_test_connection_close::stream_data bytes;

    bytes.push_back(0x40 | (val >> 8) & 0x3f);
    bytes.push_back(val & 0xff);
    return bytes;
}
quic_server_test_connection_close::ip__endpoint quic_server_test_connection_close::ext__tls_id_to_dst(unsigned long long tls_id){
    quic_server_test_connection_close::ip__endpoint dst;
    dst.protocol = (ip__protocol)___ivy_choose(0,"fml:dst",0);
    dst.addr = (unsigned)___ivy_choose(0,"fml:dst",0);
    dst.port = (unsigned)___ivy_choose(0,"fml:dst",0);
    {
        dst = ((tls_id == client__tls_id) ? server__ep : client__ep);
    }
    return dst;
}
void quic_server_test_connection_close::ext__frame__max_data__handle(const frame__max_data& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 996");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 997");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 998");
        if((!max_data_set[scid] || (max_data_val[scid] < f.pos))){
            {
                max_data_set[scid] = true;
                max_data_val[scid] = f.pos;
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 431");
            }
        }
        else {
            {
                ivy_assume(!(max_data_set[scid] && (f.pos < max_data_val[scid])), "quic_server_test.ivy: line 434");
                {
                    trans_params_struct loc__tp;
    loc__tp.initial_max_stream_data_bidi_local__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_data_bidi_local__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_data__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_data__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_id_bidi__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_id_bidi__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2793);
    loc__tp.idle_timeout__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.idle_timeout__value.seconds_16 = (int)___ivy_choose(0,"loc:tp",2793);
    loc__tp.preferred_address__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.max_packet_size__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.max_packet_size__value.stream_pos_16 = (unsigned long long)___ivy_choose(0,"loc:tp",2793);
    loc__tp.stateless_reset_token__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.ack_delay_exponent__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.ack_delay_exponent__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_id_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_id_uni__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2793);
    loc__tp.disable_migration__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_data_bidi_remote__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_data_bidi_remote__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_data_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.initial_max_stream_data_uni__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2793);
    loc__tp.max_ack_delay__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.max_ack_delay__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2793);
    loc__tp.active_connection_id_limit__is_set = (bool)___ivy_choose(0,"loc:tp",2793);
    loc__tp.active_connection_id_limit__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2793);
                    {
                        loc__tp = trans_params[scid];
                        if(loc__tp.initial_max_data__is_set){
                            {
                            }
                        }
                    }
                }
            }
        }
        ___ivy_stack.push_back(2771);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(14, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_data>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__tls_extensions__append(tls_extensions& a, quic_server_test_connection_close::tls__extension v){
    {

        a.push_back(v);
    }
}
void quic_server_test_connection_close::imp__undecryptable_packet_event(const ip__endpoint& src, const ip__endpoint& dst, const stream_data& pkt){
    {
    }
}
int quic_server_test_connection_close::ext__net__open(endpoint_id me, const ip__endpoint& addr){
    int s;
    s = (int)___ivy_choose(0,"fml:s",0);
    ___ivy_stack.push_back(2772);
    s = ext__net__impl__open(me, addr);
    ___ivy_stack.pop_back();
    return s;
}
void quic_server_test_connection_close::ext__map_cids(quic_server_test_connection_close::cid dcid, quic_server_test_connection_close::cid scid){
    {
        used_cid[dcid] = true;
        connected[dcid] = true;
        connected_to[dcid] = scid;
    }
}
void quic_server_test_connection_close::ext__frame__stop_sending__handle(const frame__stop_sending& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 707");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 708");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 709");
        ivy_assume(!conn_closed[scid], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 710");
        ivy_assume((connected[scid] && (connected_to[scid] == dcid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 711");
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2794);
            {
                ___ivy_stack.push_back(2773);
                loc__0 = ext__stream_id_allowed(dcid, f.id);
                ___ivy_stack.pop_back();
                ivy_assume(loc__0, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 712");
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 357");
                ivy_assume((f.id == (4 & 65535)), "quic_server_test.ivy: line 358");
            }
        }
        stream_seen[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.id)] = true;
        ___ivy_stack.push_back(2774);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(16, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stop_sending>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
quic_server_test_connection_close::tls_api__upper__decrypt_result quic_server_test_connection_close::ext__tls_api__upper__decrypt_aead(unsigned long long c, int l, const stream_data& cipher, unsigned seq, const stream_data& ad){
    quic_server_test_connection_close::tls_api__upper__decrypt_result res;
    res.ok = (bool)___ivy_choose(0,"fml:res",0);
    {

        picotls_connection *s = tls_api__upper__foo__cid_map[c];
        ptls_aead_context_t *aead = (ptls_aead_context_t *)(s->crypto_context[l].aead_decrypt);
        uint32_t checksum_length = aead->algo->tag_size;
        std::vector<uint8_t> bytes;
        bytes.resize(ad.size());
        std::copy(ad.begin(),ad.end(),bytes.begin());
        std::vector<uint8_t> input, output;
        input.resize(cipher.size());
        std::copy(cipher.begin(),cipher.end(),input.begin());
        output.resize(cipher.size() - checksum_length);
        size_t decrypted = ptls_aead_decrypt(aead,
          &output[0], &input[0], input.size(), seq,
          &bytes[0], bytes.size());
        res.ok = decrypted < input.size();
        if (res.ok) {
            res.data.resize(output.size());
            std::copy(output.begin(),output.end(),res.data.begin());
        }
    }
    return res;
}
void quic_server_test_connection_close::ext__handle_tls_extensions(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid scid, const vector__tls__extension__& exts, bool is_client_hello){
    {
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2792);
            {
                loc__idx = vector__tls__extension____begin(exts);
                while((loc__idx < vector__tls__extension____end(exts))){
                    {
                        quic_server_test_connection_close::tls__extension loc__ext;
                        {
                            loc__ext = vector__tls__extension____value(exts,loc__idx);
                            {
                                quic_transport_parameters loc__tps;
                                if (((loc__ext).tag == 1)) loc__tps = quic_server_test_connection_close::tls__extension::unwrap< quic_server_test_connection_close::quic_transport_parameters >(loc__ext);
                                if(((loc__ext).tag == 1)){
                                    {
                                        ___ivy_stack.push_back(2769);
                                        ext__handle_client_transport_parameters(src, dst, scid, loc__tps, is_client_hello);
                                        ___ivy_stack.pop_back();
                                        trans_params_set[scid] = true;
                                    }
                                }
                            }
                            ___ivy_stack.push_back(2770);
                            loc__idx = ext__vector__tls__extension____domain__next(loc__idx);
                            ___ivy_stack.pop_back();
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__initial_max_data__set(const initial_max_data& p, trans_params_struct& s){
    {
        s.initial_max_data__is_set = true;
        s.initial_max_data__value = p;
    }
}
void quic_server_test_connection_close::ext__net__send(endpoint_id me, int s, const ip__endpoint& dst, const prot__arr& x){
            struct sockaddr_in dstaddr;
            dstaddr.sin_family = AF_INET;
            dstaddr.sin_addr.s_addr = htonl(dst.addr);
            //dstaddr.sin_addr.s_addr = htonl(INADDR_ANY);
            dstaddr.sin_port = htons(dst.port);
            // std::cout << "sending id: " << me << " addr: " << ntohl(dstaddr.sin_addr.s_addr) << " port: " << ntohs(dstaddr.sin_port) << std::endl;
            quic_prot_ser sr;
            __ser(sr,x);
            if (sendto(s,&sr.res[0],sr.res.size(),0,(sockaddr *)&dstaddr,sizeof(sockaddr_in)) < 0)
    #ifdef _WIN32
                         { std::cerr << "sendto failed " << WSAGetLastError() << "\n"; exit(1); }
    #else
                         { perror("sendto failed"); exit(1); }
    #endif
}
unsigned quic_server_test_connection_close::ext__prot__get_pnum(const stream_data& pkt, unsigned long long pnum_pos, unsigned long long pnum_len){
    unsigned seq;
    seq = (unsigned)___ivy_choose(0,"fml:seq",0);
    {
        stream_data loc__data;
        {
            loc__data = stream_data__segment(pkt,pnum_pos,(pnum_pos + pnum_len));
            seq = (0 & 4294967295);
            {
                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2795);
                {
                    loc__idx = 0;
                    while((loc__idx < stream_data__end(loc__data))){
                        {
                            seq = (((((256 & 4294967295) * seq) & 4294967295) + ((stream_data__value(loc__data,loc__idx) >> 0) & 255)) & 4294967295);
                            ___ivy_stack.push_back(2776);
                            loc__idx = ext__stream_pos__next(loc__idx);
                            ___ivy_stack.pop_back();
                        }
                    }
                }
            }
        }
    }
    return seq;
}
void quic_server_test_connection_close::ext__frame__handle(quic_server_test_connection_close::frame f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume(false, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 282");
    }
}
void quic_server_test_connection_close::ext__tls__handshake_event(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::tls__handshake h){
    __ivy_out  << std::hex << std::showbase  << "< tls.handshake_event" << "(" << src << "," << dst << "," << h << ")" << std::endl;
    ___ivy_stack.push_back(2777);
    imp__tls__handshake_event(src, dst, h);
    ___ivy_stack.pop_back();
}
void quic_server_test_connection_close::ext__tls_recv_event(ip__endpoint src, ip__endpoint dst, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e, unsigned long long lo, unsigned long long hi){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_security.ivy: line 232");
        ivy_assume(((lo < hi) && (lo == crypto_pos[quic_server_test_connection_close::__tup__cid__quic_packet_type(dcid,e)]) && ((hi < crypto_length[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]) || (hi == crypto_length[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_security.ivy: line 233");
        crypto_pos[quic_server_test_connection_close::__tup__cid__quic_packet_type(dcid,e)] = hi;
    }
}
void quic_server_test_connection_close::ext__stream_data__append(stream_data& a, unsigned v){
    {

        a.push_back(v);
    }
}
quic_server_test_connection_close::tls__handshake_parser__result quic_server_test_connection_close::ext__tls__handshake_parser__deserialize(const stream_data& x, unsigned long long pos){
    quic_server_test_connection_close::tls__handshake_parser__result res;
    res.pos = (unsigned long long)___ivy_choose(0,"fml:res",0);
    {

        std::vector<char> buf(x.size() - pos);
        std::copy(x.begin()+pos,x.end(),buf.begin());
        tls_deser ds(buf);

        try {
           __deser(ds,res.value);
           res.pos = pos + ds.pos;
        }

        // If deserialization failure, print out the packet for
        // debugging purposes.

        catch(deser_err &err) {
            std::cerr << "error: failed to deserialize data" << std::endl;
            //std::cerr << err.what() << std::endl;
            std::cerr << "hex dump of data follows." << std::endl;
            for (unsigned i = 0; i < buf.size(); i++) {
                if (i > 0 && i % 16 == 0)
                    std::cerr << std::endl;
                if (i == ds.pos)
                    fprintf(stderr,"*");
                fprintf(stderr,"%02X",((unsigned)buf[i]) & 0xff);
            }
            std::cerr << std::endl;
            exit(1);
        }
    }
    return res;
}
void quic_server_test_connection_close::ext__tls_client_initial_request(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid nonce){
    {
        {
            stream_data loc__0;
            {
                ___ivy_stack.push_back(2779);
                loc__0 = ext__cid_to_bytes(nonce, (8 & 15));
                ___ivy_stack.pop_back();
                {
                    stream_data loc__ikm;
                    {
                        loc__ikm = loc__0;
                        {
                            stream_data loc__0;
                            {
                                ___ivy_stack.push_back(2780);
                                loc__0 = ext__stream_data__empty();
                                ___ivy_stack.pop_back();
                                {
                                    stream_data loc__salt;
                                    {
                                        loc__salt = loc__0;
                                        ___ivy_stack.push_back(2781);
                                        ext__stream_data__append(loc__salt, (0xc3 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2782);
                                        ext__stream_data__append(loc__salt, (0xee & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2783);
                                        ext__stream_data__append(loc__salt, (0xf7 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2784);
                                        ext__stream_data__append(loc__salt, (0x12 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2785);
                                        ext__stream_data__append(loc__salt, (0xc7 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2786);
                                        ext__stream_data__append(loc__salt, (0x2e & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2787);
                                        ext__stream_data__append(loc__salt, (0xbb & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2788);
                                        ext__stream_data__append(loc__salt, (0x5a & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2789);
                                        ext__stream_data__append(loc__salt, (0x11 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2790);
                                        ext__stream_data__append(loc__salt, (0xa7 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2791);
                                        ext__stream_data__append(loc__salt, (0xd2 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2792);
                                        ext__stream_data__append(loc__salt, (0x43 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2793);
                                        ext__stream_data__append(loc__salt, (0x2b & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2794);
                                        ext__stream_data__append(loc__salt, (0xb4 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2795);
                                        ext__stream_data__append(loc__salt, (0x63 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2796);
                                        ext__stream_data__append(loc__salt, (0x65 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2797);
                                        ext__stream_data__append(loc__salt, (0xbe & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2798);
                                        ext__stream_data__append(loc__salt, (0xf9 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2799);
                                        ext__stream_data__append(loc__salt, (0xf5 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2800);
                                        ext__stream_data__append(loc__salt, (0x02 & 255));
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2801);
                                        ext__tls_api__upper__set_initial_keys(0, loc__salt, loc__ikm);
                                        ___ivy_stack.pop_back();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__frame__application_close__handle(const frame__application_close& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 850");
        ivy_assume(!(e == quic_packet_type__initial), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 851");
        ivy_assume((!(e == quic_packet_type__one_rtt) || established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 852");
        ivy_assume((!(e == quic_packet_type__handshake) || established_handshake_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 853");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 854");
        ivy_assume((connected[scid] && (connected_to[scid] == dcid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 855");
        ivy_assume((f.reason_phrase_length == stream_data__end(f.reason_phrase)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 856");
        conn_closed[scid] = true;
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 401");
            }
        }
        ___ivy_stack.push_back(2808);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(9, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__application_close>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__stream_data__extend(stream_data& a, const stream_data& b){
    {

        for (unsigned i = 0; i < b.size(); i++)
            a.push_back(b[i]);
    }
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__stream_data__empty(){
    quic_server_test_connection_close::stream_data a;
    {
        
    }
    return a;
}
void quic_server_test_connection_close::ext__frame__stream_id_blocked__handle(const frame__stream_id_blocked& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 968");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 969");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 970");
        ___ivy_stack.push_back(2809);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(6, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_id_blocked>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__show_aead(int level, const stream_data& pyld, unsigned seq, const stream_data& auth){
    __ivy_out  << std::hex << std::showbase  << "< show_aead" << "(" << level << "," << pyld << "," << seq << "," << auth << ")" << std::endl;
    ___ivy_stack.push_back(2810);
    imp__show_aead(level, pyld, seq, auth);
    ___ivy_stack.pop_back();
}
void quic_server_test_connection_close::ext__initial_max_stream_data_bidi_local__set(const initial_max_stream_data_bidi_local& p, trans_params_struct& s){
    {
        s.initial_max_stream_data_bidi_local__is_set = true;
        s.initial_max_stream_data_bidi_local__value = p;
    }
}
void quic_server_test_connection_close::ext__frame__path_response__handle(frame__path_response f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1128");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1129");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1130");
        ivy_assume((stream_data__end(f.data) == 8), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1131");
        ivy_assume(path_challenge_pending[quic_server_test_connection_close::__tup__cid__stream_data(scid,f.data)], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1132");
        path_challenge_pending[quic_server_test_connection_close::__tup__cid__stream_data(scid,f.data)] = false;
        ___ivy_stack.push_back(2811);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(12, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_response>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
            struct __thunk__0 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>{
                __thunk__0()  {
                }
                unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return 0;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(0));
                    return res;
                }
            };
            struct __thunk__1 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
                __thunk__1()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__2 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__2()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__3 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>{
                __thunk__3()  {
                }
                unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
                    return 0;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(0));
                    return res;
                }
            };
            struct __thunk__4 : z3_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,quic_server_test_connection_close::quic_packet_type>{
    quic_server_test_connection_close::quic_packet_type quic_packet_type__zero_rtt;
                __thunk__4(quic_server_test_connection_close::quic_packet_type quic_packet_type__zero_rtt) : quic_packet_type__zero_rtt(quic_packet_type__zero_rtt){
                }
                quic_server_test_connection_close::quic_packet_type operator()(const quic_server_test_connection_close::__tup__ip__endpoint__cid &arg){
                    return quic_packet_type__zero_rtt;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("quic_packet_type"),(int)(quic_packet_type__zero_rtt));
                    return res;
                }
            };
            struct __thunk__5 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__5()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__6 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__6()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__7 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
                __thunk__7()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__8 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>{
                __thunk__8()  {
                }
                unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return 0;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(0));
                    return res;
                }
            };
            struct __thunk__9 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
                __thunk__9()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__10 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__10()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__11 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
                __thunk__11()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__12 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
                __thunk__12()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__13 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__13()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__14 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__14()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__15 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__15()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__16 : z3_thunk<quic_server_test_connection_close::__tup__cid__stream_data,bool>{
                __thunk__16()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__stream_data &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__17 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__17()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__18 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__18()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__19 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>{
                __thunk__19()  {
                }
                unsigned operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
                    return (0 & 4294967295);
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)((0 & 4294967295)));
                    return res;
                }
            };
            struct __thunk__20 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__20()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__21 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__21()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__22 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__22()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__23 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>{
                __thunk__23()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__24 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>{
                __thunk__24()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__25 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>{
                __thunk__25()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__26 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>{
                __thunk__26()  {
                }
                unsigned operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
                    return (0 & 4294967295);
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)((0 & 4294967295)));
                    return res;
                }
            };
            struct __thunk__27 : z3_thunk<quic_server_test_connection_close::cid,unsigned>{
                __thunk__27()  {
                }
                unsigned operator()(const quic_server_test_connection_close::cid &arg){
                    return (0 & 4294967295);
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)((0 & 4294967295)));
                    return res;
                }
            };
            struct __thunk__28 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__28()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__29 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__29()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__30 : z3_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,bool>{
                __thunk__30()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__31 : z3_thunk<quic_server_test_connection_close::cid,unsigned>{
                __thunk__31()  {
                }
                unsigned operator()(const quic_server_test_connection_close::cid &arg){
                    return (0 & 4294967295);
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)((0 & 4294967295)));
                    return res;
                }
            };
            struct __thunk__32 : z3_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,bool>{
                __thunk__32()  {
                }
                bool operator()(const quic_server_test_connection_close::__tup__cid__ip__endpoint &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__33 : z3_thunk<quic_server_test_connection_close::cid,bool>{
                __thunk__33()  {
                }
                bool operator()(const quic_server_test_connection_close::cid &arg){
                    return false;
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(false));
                    return res;
                }
            };
            struct __thunk__34 : z3_thunk<quic_server_test_connection_close::cid,unsigned>{
                __thunk__34()  {
                }
                unsigned operator()(const quic_server_test_connection_close::cid &arg){
                    return (0 & 255);
                }
                z3::expr to_z3(gen &g, const z3::expr &v){
                    z3::expr res = v == g.int_to_z3(g.sort("cid_seq"),(int)((0 & 255)));
                    return res;
                }
            };
void quic_server_test_connection_close::__init(){
    {
        {
            stream_app_pos = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>(new __thunk__0());
            stream_app_data_finished = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__1());
        }
        {
            used_cid = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__2());
        }
        {
            crypto_handler_pos = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>(new __thunk__3());
            conn_enc_level = hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,quic_server_test_connection_close::quic_packet_type>(new __thunk__4(quic_packet_type__zero_rtt));
            established_1rtt_keys = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__5());
            established_handshake_keys = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__6());
        }
        {
            stream_seen = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__7());
            stream_length = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>(new __thunk__8());
            max_stream_data_set = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__9());
            max_data_set = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__10());
            stream_finished = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__11());
            stream_reset = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__12());
            queued_non_probing = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__13());
            queued_non_ack = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__14());
            queued_close = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__15());
            path_challenge_pending = hash_thunk<quic_server_test_connection_close::__tup__cid__stream_data,bool>(new __thunk__16());
            queued_ack_eliciting = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__17());
        }
        {
            conn_seen = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__18());
            last_pkt_num = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>(new __thunk__19());
            conn_closed = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__20());
            conn_draining = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__21());
            draining_pkt_sent = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__22());
            sent_pkt = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>(new __thunk__23());
            acked_pkt = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>(new __thunk__24());
            pkt_has_close = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>(new __thunk__25());
            max_acked = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>(new __thunk__26());
            ack_credit = hash_thunk<quic_server_test_connection_close::cid,unsigned>(new __thunk__27());
            trans_params_set = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__28());
            is_client = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__29());
            conn_requested = hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,bool>(new __thunk__30());
            hi_non_probing = hash_thunk<quic_server_test_connection_close::cid,unsigned>(new __thunk__31());
            hi_non_probing_endpoint = hash_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,bool>(new __thunk__32());
            cid_mapped = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__33());
            max_seq_num = hash_thunk<quic_server_test_connection_close::cid,unsigned>(new __thunk__34());
        }
        {
            ___ivy_stack.push_back(2999);
            client__ep = ext__endpoint_id_addr(endpoint_id__client);
            ___ivy_stack.pop_back();
            client__enc_level = quic_packet_type__initial;
        }
        {
            ___ivy_stack.push_back(3000);
            server__ep = ext__endpoint_id_addr(endpoint_id__server);
            ___ivy_stack.pop_back();
            server__enc_level = quic_packet_type__initial;
        }
        ___ivy_stack.push_back(3001);
        client_alt = ext__endpoint_id_addr(endpoint_id__client_alt);
        ___ivy_stack.pop_back();
        {
            ___ivy_stack.push_back(3002);
            sock = ext__net__open(endpoint_id__client, client__ep);
            ___ivy_stack.pop_back();
            ___ivy_stack.push_back(3003);
            sock_alt = ext__net__open(endpoint_id__client_alt, client_alt);
            ___ivy_stack.pop_back();
            client__tls_id = 0;
            server__tls_id = 1;
            {
                tls_extensions loc__0;
                {
                    ___ivy_stack.push_back(3004);
                    loc__0 = ext__tls_extensions__empty();
                    ___ivy_stack.pop_back();
                    {
                        tls_extensions loc__extns;
                        {
                            loc__extns = loc__0;
                            {
                                quic_transport_parameters loc__0;
                                {
                                    ___ivy_stack.push_back(3005);
                                    loc__0 = ext__make_transport_parameters();
                                    ___ivy_stack.pop_back();
                                    ___ivy_stack.push_back(3006);
                                    ext__tls_extensions__append(loc__extns, quic_server_test_connection_close::tls__extension(1, new quic_server_test_connection_close::tls__extension::twrap<quic_server_test_connection_close::quic_transport_parameters>(loc__0)));
                                    ___ivy_stack.pop_back();
                                }
                            }
                            ___ivy_stack.push_back(3007);
                            ext__tls_api__upper__create(0, false, loc__extns);
                            ___ivy_stack.pop_back();
                        }
                    }
                }
            }
        }
        {
            ___ivy_stack.push_back(3008);
            http_request = ext__http_request_file__read();
            ___ivy_stack.pop_back();
        }
        {
            nonce_cid[the_cid] = server_cid;
        }
        current_stream = (4 & 65535);
    }
}
unsigned long long quic_server_test_connection_close::ext__prot__get_var_int_len(const stream_data& pkt, unsigned long long pos){
    unsigned long long len;
    len = (unsigned long long)___ivy_choose(0,"fml:len",0);
    {
        unsigned loc__code;
    loc__code = (unsigned)___ivy_choose(0,"loc:code",2804);
        {
            loc__code = (((0xc0 & 255) & stream_data__value(pkt,pos)) & 255);
            if((loc__code == (0 & 255))){
                {
                    len = 1;
                }
            }
            else {
                if((loc__code == (0x40 & 255))){
                    {
                        len = 2;
                    }
                }
                else {
                    if((loc__code == (0x80 & 255))){
                        {
                            len = 4;
                        }
                    }
                    else {
                        {
                            len = 8;
                        }
                    }
                }
            }
        }
    }
    return len;
}
quic_server_test_connection_close::quic_packet_type quic_server_test_connection_close::ext__packet_encryption_level(const prot__header_info& h){
    quic_server_test_connection_close::quic_packet_type e;
    e = (quic_packet_type)___ivy_choose(0,"fml:e",0);
    {
        e = (!h.hdr_long ? quic_packet_type__zero_rtt : ((h.hdr_type == (0x0 & 127)) ? quic_packet_type__initial : quic_packet_type__handshake));
    }
    return e;
}
void quic_server_test_connection_close::tls_api__upper__alert(unsigned long long c, const stream_data& data){
    {
    }
}
void quic_server_test_connection_close::ext__tls_api__upper__set_initial_keys(unsigned long long c, const stream_data& salt, const stream_data& ikm){
    {
        
            picotls_connection *s = tls_api__upper__foo__cid_map[c];
        setup_initial_traffic_keys(s,salt,ikm);
    }
}
quic_server_test_connection_close::ip__endpoint quic_server_test_connection_close::ext__socket_endpoint(endpoint_id host, int s){
    quic_server_test_connection_close::ip__endpoint src;
    src.protocol = (ip__protocol)___ivy_choose(0,"fml:src",0);
    src.addr = (unsigned)___ivy_choose(0,"fml:src",0);
    src.port = (unsigned)___ivy_choose(0,"fml:src",0);
    src = ((host == endpoint_id__client) ? client__ep : client_alt);
    return src;
}
void quic_server_test_connection_close::ext__frame__max_stream_data__handle(const frame__max_stream_data& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 883");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 884");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 885");
        if((!max_stream_data_set[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.id)] || (max_stream_data_val[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.id)] < f.pos))){
            {
                max_stream_data_set[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.id)] = true;
                max_stream_data_val[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.id)] = f.pos;
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 410");
                ivy_assume(((((4 & 65535) < f.id) || ((4 & 65535) == f.id)) && ((f.id < (16 & 65535)) || (f.id == (16 & 65535)))), "quic_server_test.ivy: line 411");
            }
        }
        ___ivy_stack.push_back(2816);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(5, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_data>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__frame__rst_stream__handle(const frame__rst_stream& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 667");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 668");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 669");
        ivy_assume(!conn_closed[scid], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 670");
        ivy_assume((connected[scid] && (connected_to[scid] == dcid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 671");
        ivy_assume(((stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] < f.final_offset) || (stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] == f.final_offset)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 672");
        ivy_assume((!(stream_reset[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] || stream_finished[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)]) || (stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] == f.final_offset)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 673");
        stream_reset[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] = true;
        stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)] = f.final_offset;
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2806);
            {
                ___ivy_stack.push_back(2817);
                loc__0 = ext__stream_id_allowed(dcid, f.id);
                ___ivy_stack.pop_back();
                ivy_assume(loc__0, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 677");
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 348");
                ivy_assume((f.id == (4 & 65535)), "quic_server_test.ivy: line 349");
            }
        }
        ___ivy_stack.push_back(2818);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(2, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__rst_stream>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::net__impl__handle_recv(endpoint_id prm__V0, int s, const ip__endpoint& src, const prot__arr& x){
    ___ivy_stack.push_back(2819);
    ext__net__recv(prm__V0, s, src, x);
    ___ivy_stack.pop_back();
}
void quic_server_test_connection_close::ext__client_send_event(ip__endpoint src, ip__endpoint dst, quic_server_test_connection_close::cid dcid, unsigned s, unsigned long long end){
    {
        ivy_assume((s == current_stream), "quic_server_test.ivy: line 459");
        ivy_assume(((src == client__ep) || (src == client_alt)), "quic_server_test.ivy: line 460");
        ivy_assume((dst == server__ep), "quic_server_test.ivy: line 461");
        ivy_assume((connected[the_cid] && (dcid == connected_to[the_cid])), "quic_server_test.ivy: line 462");
        ivy_assume((stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)] == stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)]), "quic_server_test.ivy: line 463");
        ivy_assume(((stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)] < end) && ((end < stream_data__end(http_request)) || (end == stream_data__end(http_request)))), "quic_server_test.ivy: line 464");
        ivy_assume((current_stream < (60 & 65535)), "quic_server_test.ivy: line 465");
        while(((end < stream_data__end(http_request)) && !(stream_data__value(http_request,end) == (10 & 255)))){
            ___ivy_stack.push_back(2812);
            end = ext__stream_pos__next(end);
            ___ivy_stack.pop_back();
        }
        if((end < stream_data__end(http_request))){
            ___ivy_stack.push_back(2813);
            end = ext__stream_pos__next(end);
            ___ivy_stack.pop_back();
        }
        {
            stream_data loc__data;
            {
                loc__data = stream_data__segment(http_request,stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)],end);
                ___ivy_stack.push_back(2814);
                ext__app_send_event(src, dst, dcid, s, loc__data, stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)], true);
                ___ivy_stack.pop_back();
                current_stream = ((current_stream + (4 & 65535)) & 65535);
            }
        }
    }
}
void quic_server_test_connection_close::ext__frame__blocked__handle(const frame__blocked& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 941");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 942");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 943");
        ___ivy_stack.push_back(2821);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(17, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__blocked>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__frame__max_stream_id__handle(const frame__max_stream_id& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 750");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 751");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 752");
        ivy_assume((connected[scid] && (connected_to[scid] == dcid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 753");
        ivy_assume(!conn_closed[scid], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 754");
        {
            stream_kind loc__kind;
    loc__kind = (stream_kind)___ivy_choose(0,"loc:kind",2808);
            {
                loc__kind = bidir;
                if(!(max_stream_set[quic_server_test_connection_close::__tup__cid__stream_kind(dcid,loc__kind)] && (f.id < max_stream[quic_server_test_connection_close::__tup__cid__stream_kind(dcid,loc__kind)]))){
                    {
                        max_stream_set[quic_server_test_connection_close::__tup__cid__stream_kind(dcid,loc__kind)] = true;
                        max_stream[quic_server_test_connection_close::__tup__cid__stream_kind(dcid,loc__kind)] = f.id;
                    }
                }
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 366");
            }
        }
        ___ivy_stack.push_back(2822);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(3, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__max_stream_id>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
quic_server_test_connection_close::prot__arr quic_server_test_connection_close::ext__prot__arr__empty(){
    quic_server_test_connection_close::prot__arr a;
    {
        
    }
    return a;
}
void quic_server_test_connection_close::ext__preferred_address__set(const preferred_address& p, trans_params_struct& s){
    {
        s.preferred_address__is_set = true;
        s.preferred_address__value = p;
    }
}
void quic_server_test_connection_close::ext__disable_migration__set(const disable_migration& p, trans_params_struct& s){
    {
        s.disable_migration__is_set = true;
        s.disable_migration__value = p;
    }
}
void quic_server_test_connection_close::ext__prot__correct_pnum(unsigned last, unsigned& pnum, unsigned long long pnum_len){
    {
        unsigned loc__diff;
    loc__diff = (unsigned)___ivy_choose(0,"loc:diff",2807);
        {
            loc__diff = ((((pnum - last) & 4294967295) >> 0) & 1073741823);
            pnum = ((last + loc__diff) & 4294967295);
            if((((0x20000000 & 4294967295) < loc__diff) || (loc__diff == (0x20000000 & 4294967295)))){
                pnum = ((pnum - (0x40000000 & 4294967295)) & 4294967295);
            }
        }
    }
}
void quic_server_test_connection_close::imp__show_aead(int level, const stream_data& pyld, unsigned seq, const stream_data& auth){
    {
    }
}
unsigned quic_server_test_connection_close::ext__reference_pkt_num(const stream_data& spkt){
    unsigned pnum;
    pnum = (unsigned)___ivy_choose(0,"fml:pnum",0);
    {
        {
            prot__header_info loc__0;
    loc__0.hdr_long = (bool)___ivy_choose(0,"loc:0",2814);
    loc__0.hdr_type = (unsigned)___ivy_choose(0,"loc:0",2814);
    loc__0.payload_length = (unsigned long long)___ivy_choose(0,"loc:0",2814);
    loc__0.payload_length_pos = (unsigned long long)___ivy_choose(0,"loc:0",2814);
    loc__0.pkt_num_pos = (unsigned long long)___ivy_choose(0,"loc:0",2814);
            {
                ___ivy_stack.push_back(2824);
                loc__0 = ext__prot__get_header_info(spkt);
                ___ivy_stack.pop_back();
                {
                    prot__header_info loc__h;
    loc__h.hdr_long = (bool)___ivy_choose(0,"loc:h",2813);
    loc__h.hdr_type = (unsigned)___ivy_choose(0,"loc:h",2813);
    loc__h.payload_length = (unsigned long long)___ivy_choose(0,"loc:h",2813);
    loc__h.payload_length_pos = (unsigned long long)___ivy_choose(0,"loc:h",2813);
    loc__h.pkt_num_pos = (unsigned long long)___ivy_choose(0,"loc:h",2813);
                    {
                        loc__h = loc__0;
                        {
                            quic_packet_type loc__0;
    loc__0 = (quic_packet_type)___ivy_choose(0,"loc:0",2812);
                            {
                                ___ivy_stack.push_back(2825);
                                loc__0 = ext__packet_encryption_level(loc__h);
                                ___ivy_stack.pop_back();
                                {
                                    quic_packet_type loc__e;
    loc__e = (quic_packet_type)___ivy_choose(0,"loc:e",2811);
                                    {
                                        loc__e = loc__0;
                                        {
                                            quic_server_test_connection_close::cid loc__0;
                                            {
                                                ___ivy_stack.push_back(2826);
                                                loc__0 = ext__packet_scid(loc__h);
                                                ___ivy_stack.pop_back();
                                                {
                                                    quic_server_test_connection_close::cid loc__scid;
                                                    {
                                                        loc__scid = loc__0;
                                                        pnum = last_pkt_num[quic_server_test_connection_close::__tup__cid__quic_packet_type(loc__scid,loc__e)];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return pnum;
}
bool quic_server_test_connection_close::ext__stream_id_allowed(quic_server_test_connection_close::cid dcid, unsigned id){
    bool ok;
    ok = (bool)___ivy_choose(0,"fml:ok",0);
    {
        ok = false;
        {
            trans_params_struct loc__tp;
    loc__tp.initial_max_stream_data_bidi_local__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_data_bidi_local__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_data__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_data__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_id_bidi__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_id_bidi__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2817);
    loc__tp.idle_timeout__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.idle_timeout__value.seconds_16 = (int)___ivy_choose(0,"loc:tp",2817);
    loc__tp.preferred_address__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.max_packet_size__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.max_packet_size__value.stream_pos_16 = (unsigned long long)___ivy_choose(0,"loc:tp",2817);
    loc__tp.stateless_reset_token__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.ack_delay_exponent__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.ack_delay_exponent__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_id_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_id_uni__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2817);
    loc__tp.disable_migration__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_data_bidi_remote__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_data_bidi_remote__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_data_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.initial_max_stream_data_uni__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2817);
    loc__tp.max_ack_delay__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.max_ack_delay__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2817);
    loc__tp.active_connection_id_limit__is_set = (bool)___ivy_choose(0,"loc:tp",2817);
    loc__tp.active_connection_id_limit__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2817);
            {
                loc__tp = trans_params[dcid];
                {
                    stream_kind loc__kind;
    loc__kind = (stream_kind)___ivy_choose(0,"loc:kind",2816);
                    {
                        loc__kind = get_stream_kind(id);
                        {
                            unsigned loc__idhi;
    loc__idhi = (unsigned)___ivy_choose(0,"loc:idhi",2815);
                            {
                                loc__idhi = ((id / (4 & 65535)) & 65535);
                                if(!(is_client[dcid] == (get_stream_role(id) == role__client))){
                                    {
                                        if((loc__kind == unidir)){
                                            if(loc__tp.initial_max_stream_id_uni__is_set){
                                                ok = (loc__idhi < loc__tp.initial_max_stream_id_uni__value.stream_id_16);
                                            }
                                        }
                                        else {
                                            if(loc__tp.initial_max_stream_id_bidi__is_set){
                                                {
                                                    ok = (loc__idhi < loc__tp.initial_max_stream_id_bidi__value.stream_id_16);
                                                }
                                            }
                                        }
                                        ok = (ok || (max_stream_set[quic_server_test_connection_close::__tup__cid__stream_kind(dcid,loc__kind)] && (loc__idhi < max_stream[quic_server_test_connection_close::__tup__cid__stream_kind(dcid,loc__kind)])));
                                    }
                                }
                                else {
                                    ok = stream_seen[quic_server_test_connection_close::__tup__cid__unsigned(dcid,id)];
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return ok;
}
quic_server_test_connection_close::tls_extensions quic_server_test_connection_close::ext__tls_extensions__empty(){
    quic_server_test_connection_close::tls_extensions a;
    {
        
    }
    return a;
}
void quic_server_test_connection_close::ext__ack_delay_exponent__set(const ack_delay_exponent& p, trans_params_struct& s){
    {
        s.ack_delay_exponent__is_set = true;
        s.ack_delay_exponent__value = p;
    }
}
void quic_server_test_connection_close::ext__frame__connection_close__handle(frame__connection_close f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 804");
        ivy_assume((!(e == quic_packet_type__one_rtt) || established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 805");
        ivy_assume((!(e == quic_packet_type__handshake) || established_handshake_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 806");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 807");
        ivy_assume((connected[scid] && (connected_to[scid] == dcid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 808");
        ivy_assume((f.reason_phrase_length == stream_data__end(f.reason_phrase)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 809");
        conn_closed[scid] = true;
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 391");
            }
        }
        else {
            ivy_assume((f.err_code == (0 & 65535)), "quic_server_test.ivy: line 393");
        }
        ___ivy_stack.push_back(2827);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(4, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__connection_close>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
bool quic_server_test_connection_close::ext__dst_is_generated(const ip__endpoint& dst){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    res = ((dst == client__ep) || (dst == client_alt));
    return res;
}
void quic_server_test_connection_close::ext__enqueue_frame(quic_server_test_connection_close::cid scid, quic_server_test_connection_close::frame f, quic_packet_type e, bool probing){
    {
        ___ivy_stack.push_back(2828);
        ext__frame__arr__append(queued_frames[scid], f);
        ___ivy_stack.pop_back();
        num_queued_frames[scid] = frame__arr__end(queued_frames[scid]);
        queued_level[scid] = e;
        if(!probing){
            {
                queued_non_probing[scid] = true;
            }
        }
        if(!((f).tag == 1)){
            {
                queued_non_ack[scid] = true;
            }
        }
        if((((f).tag == 4) || ((f).tag == 9))){
            {
                queued_close[scid] = true;
            }
        }
        if((!((f).tag == 1) && !((f).tag == 4) && !((f).tag == 9))){
            {
                queued_ack_eliciting[scid] = true;
            }
        }
    }
}
void quic_server_test_connection_close::ext__recv_packet(const ip__endpoint& src, const ip__endpoint& dst, const quic_packet& pkt){
    __ivy_out  << std::hex << std::showbase  << "< recv_packet" << "(" << src << "," << dst << "," << pkt << ")" << std::endl;
    ___ivy_stack.push_back(2829);
    imp__recv_packet(src, dst, pkt);
    ___ivy_stack.pop_back();
}
unsigned long long quic_server_test_connection_close::ext__dst_tls_id(const ip__endpoint& dst){
    unsigned long long tls_id;
    tls_id = (unsigned long long)___ivy_choose(0,"fml:tls_id",0);
    tls_id = client__tls_id;
    return tls_id;
}
unsigned long long quic_server_test_connection_close::ext__frame__ack__block__idx__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void quic_server_test_connection_close::ext__transport_parameter__set(quic_server_test_connection_close::transport_parameter p, trans_params_struct& s){
    {
    }
}
unsigned long long quic_server_test_connection_close::ext__vector__tls__extension____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void quic_server_test_connection_close::ext__frame__new_connection_id__handle(const frame__new_connection_id& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1040");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1041");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1042");
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 372");
            }
        }
        cid_mapped[f.scid] = true;
        cid_to_aid[f.scid] = scid;
        seqnum_to_cid[quic_server_test_connection_close::__tup__cid__unsigned(scid,f.seq_num)] = f.scid;
        if((max_seq_num[scid] < f.seq_num)){
            {
                max_seq_num[scid] = f.seq_num;
            }
        }
        ___ivy_stack.push_back(2830);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(10, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_connection_id>(f)), e, true);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__handle_tls_handshake(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_server_test_connection_close::tls__handshake hs){
    {
        tls__client_hello loc__ch;
        if (((hs).tag == 0)) loc__ch = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__client_hello >(hs);
        if(((hs).tag == 0)){
            {
                is_client[scid] = true;
                ___ivy_stack.push_back(2831);
                ext__handle_tls_extensions(src, dst, scid, loc__ch.extensions, true);
                ___ivy_stack.pop_back();
            }
        }
        else {
            {
                tls__server_hello loc__sh;
                if (((hs).tag == 1)) loc__sh = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__server_hello >(hs);
                if(((hs).tag == 1)){
                    {
                        ___ivy_stack.push_back(2832);
                        ext__handle_tls_extensions(src, dst, scid, loc__sh.extensions, false);
                        ___ivy_stack.pop_back();
                    }
                }
                else {
                    {
                        tls__encrypted_extensions loc__ee;
                        if (((hs).tag == 2)) loc__ee = quic_server_test_connection_close::tls__handshake::unwrap< quic_server_test_connection_close::tls__encrypted_extensions >(hs);
                        if(((hs).tag == 2)){
                            {
                                ___ivy_stack.push_back(2833);
                                ext__handle_tls_extensions(src, dst, scid, loc__ee.extensions, false);
                                ___ivy_stack.pop_back();
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__prot__encrypt(unsigned long long c, unsigned seq, stream_data& pkt){
    {
        {
            prot__header_info loc__0;
    loc__0.hdr_long = (bool)___ivy_choose(0,"loc:0",2843);
    loc__0.hdr_type = (unsigned)___ivy_choose(0,"loc:0",2843);
    loc__0.payload_length = (unsigned long long)___ivy_choose(0,"loc:0",2843);
    loc__0.payload_length_pos = (unsigned long long)___ivy_choose(0,"loc:0",2843);
    loc__0.pkt_num_pos = (unsigned long long)___ivy_choose(0,"loc:0",2843);
            {
                ___ivy_stack.push_back(2834);
                loc__0 = ext__prot__get_header_info(pkt);
                ___ivy_stack.pop_back();
                {
                    prot__header_info loc__h;
    loc__h.hdr_long = (bool)___ivy_choose(0,"loc:h",2842);
    loc__h.hdr_type = (unsigned)___ivy_choose(0,"loc:h",2842);
    loc__h.payload_length = (unsigned long long)___ivy_choose(0,"loc:h",2842);
    loc__h.payload_length_pos = (unsigned long long)___ivy_choose(0,"loc:h",2842);
    loc__h.pkt_num_pos = (unsigned long long)___ivy_choose(0,"loc:h",2842);
                    {
                        loc__h = loc__0;
                        {
                            int loc__0;
    loc__0 = (int)___ivy_choose(0,"loc:0",2841);
                            {
                                ___ivy_stack.push_back(2835);
                                loc__0 = ext__prot__get_level(pkt);
                                ___ivy_stack.pop_back();
                                {
                                    int loc__level;
    loc__level = (int)___ivy_choose(0,"loc:level",2840);
                                    {
                                        loc__level = loc__0;
                                        {
                                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2839);
                                            {
                                                ___ivy_stack.push_back(2836);
                                                loc__0 = ext__tls_api__upper__iv_size(c, loc__level);
                                                ___ivy_stack.pop_back();
                                                {
                                                    unsigned long long loc__sample_size;
    loc__sample_size = (unsigned long long)___ivy_choose(0,"loc:sample_size",2838);
                                                    {
                                                        loc__sample_size = loc__0;
                                                        {
                                                            unsigned long long loc__pnum_pos;
    loc__pnum_pos = (unsigned long long)___ivy_choose(0,"loc:pnum_pos",2837);
                                                            {
                                                                loc__pnum_pos = loc__h.pkt_num_pos;
                                                                {
                                                                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2836);
                                                                    {
                                                                        ___ivy_stack.push_back(2837);
                                                                        loc__0 = ext__prot__get_pnum_len(pkt, loc__pnum_pos);
                                                                        ___ivy_stack.pop_back();
                                                                        {
                                                                            unsigned long long loc__pnum_len;
    loc__pnum_len = (unsigned long long)___ivy_choose(0,"loc:pnum_len",2835);
                                                                            {
                                                                                loc__pnum_len = loc__0;
                                                                                {
                                                                                    unsigned long long loc__hdr_len;
    loc__hdr_len = (unsigned long long)___ivy_choose(0,"loc:hdr_len",2834);
                                                                                    {
                                                                                        loc__hdr_len = (loc__pnum_pos + loc__pnum_len);
                                                                                        if(loc__h.hdr_long){
                                                                                            {
                                                                                                {
                                                                                                    stream_data loc__0;
                                                                                                    {
                                                                                                        ___ivy_stack.push_back(2838);
                                                                                                        loc__0 = ext__prot__to_var_int_16((loc__h.payload_length + 16));
                                                                                                        ___ivy_stack.pop_back();
                                                                                                        {
                                                                                                            stream_data loc__new_len;
                                                                                                            {
                                                                                                                loc__new_len = loc__0;
                                                                                                                ___ivy_stack.push_back(2839);
                                                                                                                unsigned long long __tmp4;
                                                                                                                __tmp4 = loc__pnum_pos;
                                                                                                                unsigned long long __tmp5;
                                                                                                                __tmp5 = 2;
                                                                                                                ext__stream_data__set(pkt, ( __tmp4 < __tmp5 ? 0 : __tmp4 - __tmp5), stream_data__value(loc__new_len,0));
                                                                                                                ___ivy_stack.pop_back();
                                                                                                                ___ivy_stack.push_back(2840);
                                                                                                                unsigned long long __tmp6;
                                                                                                                __tmp6 = loc__pnum_pos;
                                                                                                                unsigned long long __tmp7;
                                                                                                                __tmp7 = 1;
                                                                                                                ext__stream_data__set(pkt, ( __tmp6 < __tmp7 ? 0 : __tmp6 - __tmp7), stream_data__value(loc__new_len,1));
                                                                                                                ___ivy_stack.pop_back();
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        {
                                                                                            stream_data loc__hdr;
                                                                                            {
                                                                                                loc__hdr = stream_data__segment(pkt,0,loc__pnum_pos);
                                                                                                {
                                                                                                    stream_data loc__pnum;
                                                                                                    {
                                                                                                        loc__pnum = stream_data__segment(pkt,loc__pnum_pos,loc__hdr_len);
                                                                                                        {
                                                                                                            stream_data loc__pyld;
                                                                                                            {
                                                                                                                loc__pyld = stream_data__segment(pkt,loc__hdr_len,stream_data__end(pkt));
                                                                                                                {
                                                                                                                    stream_data loc__auth;
                                                                                                                    {
                                                                                                                        loc__auth = stream_data__segment(pkt,0,loc__hdr_len);
                                                                                                                        {
                                                                                                                            unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2829);
                                                                                                                            {
                                                                                                                                ___ivy_stack.push_back(2841);
                                                                                                                                loc__0 = ext__prot__get_pnum(loc__pnum, 0, loc__pnum_len);
                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                {
                                                                                                                                    unsigned loc__new_seq;
    loc__new_seq = (unsigned)___ivy_choose(0,"loc:new_seq",2828);
                                                                                                                                    {
                                                                                                                                        loc__new_seq = loc__0;
                                                                                                                                        ___ivy_stack.push_back(2842);
                                                                                                                                        ext__prot__correct_pnum(seq, loc__new_seq, loc__pnum_len);
                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                        ___ivy_stack.push_back(2843);
                                                                                                                                        loc__pyld = ext__tls_api__upper__encrypt_aead(c, loc__level, loc__pyld, loc__new_seq, loc__auth);
                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                        ___ivy_stack.push_back(2844);
                                                                                                                                        ext__show_aead(loc__level, loc__pyld, loc__new_seq, loc__auth);
                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                        {
                                                                                                                                            unsigned long long loc__sample_pos;
    loc__sample_pos = (unsigned long long)___ivy_choose(0,"loc:sample_pos",2827);
                                                                                                                                            {
                                                                                                                                                unsigned long long __tmp8;
                                                                                                                                                __tmp8 = 4;
                                                                                                                                                unsigned long long __tmp9;
                                                                                                                                                __tmp9 = loc__pnum_len;
                                                                                                                                                loc__sample_pos = ( __tmp8 < __tmp9 ? 0 : __tmp8 - __tmp9);
                                                                                                                                                if((stream_data__end(loc__pyld) < (loc__sample_pos + loc__sample_size))){
                                                                                                                                                    unsigned long long __tmp10;
                                                                                                                                                    __tmp10 = stream_data__end(loc__pyld);
                                                                                                                                                    unsigned long long __tmp11;
                                                                                                                                                    __tmp11 = loc__sample_size;
                                                                                                                                                    loc__sample_pos = ( __tmp10 < __tmp11 ? 0 : __tmp10 - __tmp11);
                                                                                                                                                }
                                                                                                                                                {
                                                                                                                                                    stream_data loc__sample;
                                                                                                                                                    {
                                                                                                                                                        loc__sample = stream_data__segment(loc__pyld,loc__sample_pos,(loc__sample_pos + loc__sample_size));
                                                                                                                                                        {
                                                                                                                                                            stream_data loc__0;
                                                                                                                                                            {
                                                                                                                                                                ___ivy_stack.push_back(2845);
                                                                                                                                                                loc__0 = ext__stream_data__empty();
                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                                {
                                                                                                                                                                    stream_data loc__mask;
                                                                                                                                                                    {
                                                                                                                                                                        loc__mask = loc__0;
                                                                                                                                                                        {
                                                                                                                                                                            stream_data loc__0;
                                                                                                                                                                            {
                                                                                                                                                                                ___ivy_stack.push_back(2846);
                                                                                                                                                                                stream_data __tmp12;
                                                                                                                                                                                __tmp12 = loc__mask; ext__stream_data__resize(__tmp12, 5, (0 & 255));
                                                                                                                                                                                loc__0 = __tmp12;
                                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                                                ___ivy_stack.push_back(2847);
                                                                                                                                                                                loc__mask = ext__tls_api__upper__encrypt_cipher(c, loc__level, loc__0, loc__sample, false);
                                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        {
                                                                                                                                                                            unsigned loc__byte0_mask;
    loc__byte0_mask = (unsigned)___ivy_choose(0,"loc:byte0_mask",2823);
                                                                                                                                                                            {
                                                                                                                                                                                loc__byte0_mask = ((stream_data__value(loc__mask,0) & (loc__h.hdr_long ? (0x0f & 255) : (0x1f & 255))) & 255);
                                                                                                                                                                                {
                                                                                                                                                                                    unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2821);
                                                                                                                                                                                    {
                                                                                                                                                                                        ___ivy_stack.push_back(2848);
                                                                                                                                                                                        loc__0 = ext__prot__byte_xor(stream_data__value(pkt,0), loc__byte0_mask);
                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                        ___ivy_stack.push_back(2849);
                                                                                                                                                                                        ext__stream_data__set(loc__hdr, 0, loc__0);
                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                ___ivy_stack.push_back(2850);
                                                                                                                                                                                ext__prot__stream_data_xor(loc__pnum, stream_data__segment(loc__mask,1,(1 + loc__pnum_len)));
                                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                                                {
                                                                                                                                                                                    stream_data loc__0;
                                                                                                                                                                                    {
                                                                                                                                                                                        ___ivy_stack.push_back(2851);
                                                                                                                                                                                        stream_data __tmp13;
                                                                                                                                                                                        __tmp13 = loc__hdr; ext__stream_data__extend(__tmp13, loc__pnum);
                                                                                                                                                                                        loc__0 = __tmp13;
                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                        ___ivy_stack.push_back(2852);
                                                                                                                                                                                        stream_data __tmp14;
                                                                                                                                                                                        __tmp14 = loc__0; ext__stream_data__extend(__tmp14, loc__pyld);
                                                                                                                                                                                        pkt = __tmp14;
                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__infer_frame(quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_server_test_connection_close::frame f){
    __ivy_out  << std::hex << std::showbase  << "< infer_frame" << "(" << scid << "," << dcid << "," << f << ")" << std::endl;
    ___ivy_stack.push_back(2853);
    imp__infer_frame(scid, dcid, f);
    ___ivy_stack.pop_back();
}
void quic_server_test_connection_close::ext__tls__handshake_data_event(const ip__endpoint& src, const ip__endpoint& dst, const stream_data& data){
    {
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2845);
            {
                ___ivy_stack.push_back(2854);
                loc__0 = ext__dst_is_generated(dst);
                ___ivy_stack.pop_back();
                if(loc__0){
                    {
                        {
                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2844);
                            {
                                ___ivy_stack.push_back(2855);
                                loc__0 = ext__dst_tls_id(dst);
                                ___ivy_stack.pop_back();
                                ___ivy_stack.push_back(2856);
                                ext__tls_api__lower__recv(loc__0, data, 0);
                                ___ivy_stack.pop_back();
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::imp__infer_frame(quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_server_test_connection_close::frame f){
    {
    }
}
quic_server_test_connection_close::quic_transport_parameters quic_server_test_connection_close::ext__make_transport_parameters(){
    quic_server_test_connection_close::quic_transport_parameters tp;
    {
        {
            initial_max_stream_data_bidi_local loc__imsdbl;
    loc__imsdbl.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:imsdbl",2850);
            {
                loc__imsdbl.stream_pos_32 = max_stream_data;
                {
                    initial_max_data loc__imd;
    loc__imd.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:imd",2849);
                    {
                        loc__imd.stream_pos_32 = 0x4000;
                        {
                            idle_timeout loc__it;
    loc__it.seconds_16 = (int)___ivy_choose(0,"loc:it",2848);
                            {
                                loc__it.seconds_16 = 60;
                                {
                                    initial_max_stream_data_bidi_remote loc__imsdbr;
    loc__imsdbr.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:imsdbr",2847);
                                    {
                                        loc__imsdbr.stream_pos_32 = max_stream_data;
                                        {
                                            initial_max_stream_data_uni loc__imsdu;
    loc__imsdu.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:imsdu",2846);
                                            {
                                                loc__imsdu.stream_pos_32 = 0x2000;
                                                ___ivy_stack.push_back(2857);
                                                ext__vector__transport_parameter____append(tp.transport_parameters, quic_server_test_connection_close::transport_parameter(0, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(loc__imsdbl)));
                                                ___ivy_stack.pop_back();
                                                ___ivy_stack.push_back(2858);
                                                ext__vector__transport_parameter____append(tp.transport_parameters, quic_server_test_connection_close::transport_parameter(1, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_data>(loc__imd)));
                                                ___ivy_stack.pop_back();
                                                ___ivy_stack.push_back(2859);
                                                ext__vector__transport_parameter____append(tp.transport_parameters, quic_server_test_connection_close::transport_parameter(3, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::idle_timeout>(loc__it)));
                                                ___ivy_stack.pop_back();
                                                ___ivy_stack.push_back(2860);
                                                ext__vector__transport_parameter____append(tp.transport_parameters, quic_server_test_connection_close::transport_parameter(10, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(loc__imsdbr)));
                                                ___ivy_stack.pop_back();
                                                ___ivy_stack.push_back(2861);
                                                ext__vector__transport_parameter____append(tp.transport_parameters, quic_server_test_connection_close::transport_parameter(11, new quic_server_test_connection_close::transport_parameter::twrap<quic_server_test_connection_close::initial_max_stream_data_uni>(loc__imsdu)));
                                                ___ivy_stack.pop_back();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return tp;
}
void quic_server_test_connection_close::ext__idle_timeout__set(const idle_timeout& p, trans_params_struct& s){
    {
        s.idle_timeout__is_set = true;
        s.idle_timeout__value = p;
    }
}
quic_server_test_connection_close::prot__header_info quic_server_test_connection_close::ext__prot__get_header_info(const stream_data& pkt){
    quic_server_test_connection_close::prot__header_info h;
    h.hdr_long = (bool)___ivy_choose(0,"fml:h",0);
    h.hdr_type = (unsigned)___ivy_choose(0,"fml:h",0);
    h.payload_length = (unsigned long long)___ivy_choose(0,"fml:h",0);
    h.payload_length_pos = (unsigned long long)___ivy_choose(0,"fml:h",0);
    h.pkt_num_pos = (unsigned long long)___ivy_choose(0,"fml:h",0);
    {
        h.hdr_long = !((((0x80 & 255) & stream_data__value(pkt,0)) & 255) == (0 & 255));
        h.hdr_type = ((stream_data__value(pkt,0) >> 0) & 127);
        if(h.hdr_long){
            {
                {
                    unsigned long long loc__dcil;
    loc__dcil = (unsigned long long)___ivy_choose(0,"loc:dcil",2859);
                    {
                        loc__dcil = ((stream_data__value(pkt,5) >> 0) & 255);
                        ___ivy_stack.push_back(2862);
                        h.dcid = ext__prot__bytes_to_cid(stream_data__segment(pkt,6,(6 + loc__dcil)));
                        ___ivy_stack.pop_back();
                        {
                            unsigned long long loc__scil;
    loc__scil = (unsigned long long)___ivy_choose(0,"loc:scil",2858);
                            {
                                loc__scil = ((stream_data__value(pkt,(6 + loc__dcil)) >> 0) & 255);
                                ___ivy_stack.push_back(2863);
                                h.scid = ext__prot__bytes_to_cid(stream_data__segment(pkt,(7 + loc__dcil),((7 + loc__dcil) + loc__scil)));
                                ___ivy_stack.pop_back();
                                {
                                    unsigned long long loc__pos;
    loc__pos = (unsigned long long)___ivy_choose(0,"loc:pos",2857);
                                    {
                                        loc__pos = ((7 + loc__dcil) + loc__scil);
                                        if((((h.hdr_type & (0x30 & 127)) & 127) == (0x00 & 127))){
                                            {
                                                {
                                                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2854);
                                                    {
                                                        ___ivy_stack.push_back(2864);
                                                        loc__0 = ext__prot__get_var_int_len(pkt, loc__pos);
                                                        ___ivy_stack.pop_back();
                                                        {
                                                            unsigned long long loc__len;
    loc__len = (unsigned long long)___ivy_choose(0,"loc:len",2853);
                                                            {
                                                                loc__len = loc__0;
                                                                {
                                                                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2852);
                                                                    {
                                                                        ___ivy_stack.push_back(2865);
                                                                        loc__0 = ext__prot__get_var_int(pkt, loc__pos, loc__len);
                                                                        ___ivy_stack.pop_back();
                                                                        {
                                                                            unsigned long long loc__retry_token_len;
    loc__retry_token_len = (unsigned long long)___ivy_choose(0,"loc:retry_token_len",2851);
                                                                            {
                                                                                loc__retry_token_len = loc__0;
                                                                                loc__pos = ((loc__pos + loc__len) + loc__retry_token_len);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        {
                                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2856);
                                            {
                                                ___ivy_stack.push_back(2866);
                                                loc__0 = ext__prot__get_var_int_len(pkt, loc__pos);
                                                ___ivy_stack.pop_back();
                                                {
                                                    unsigned long long loc__len;
    loc__len = (unsigned long long)___ivy_choose(0,"loc:len",2855);
                                                    {
                                                        loc__len = loc__0;
                                                        ___ivy_stack.push_back(2867);
                                                        h.payload_length = ext__prot__get_var_int(pkt, loc__pos, loc__len);
                                                        ___ivy_stack.pop_back();
                                                        h.payload_length_pos = loc__pos;
                                                        h.pkt_num_pos = (loc__pos + loc__len);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            {
                ___ivy_stack.push_back(2868);
                h.dcid = ext__prot__bytes_to_cid(stream_data__segment(pkt,1,9));
                ___ivy_stack.pop_back();
                h.payload_length_pos = 9;
                h.pkt_num_pos = 9;
            }
        }
    }
    return h;
}
bool quic_server_test_connection_close::ext__quic_packet__long(const quic_packet& pkt){
    bool res;
    res = (bool)___ivy_choose(0,"fml:res",0);
    {
        res = !(pkt.ptype == quic_packet_type__one_rtt);
    }
    return res;
}
void quic_server_test_connection_close::ext__frame__ack__handle(frame__ack f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 454");
        ivy_assume((!(e == quic_packet_type__handshake) || established_handshake_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 455");
        ivy_assume((!(e == quic_packet_type__one_rtt) || established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 456");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 457");
        {
            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2865);
            {
                loc__idx = 0;
                {
                    unsigned loc__last;
    loc__last = (unsigned)___ivy_choose(0,"loc:last",2864);
                    {
                        loc__last = f.largest_acked;
                        if((max_acked[quic_server_test_connection_close::__tup__cid__quic_packet_type(dcid,e)] < loc__last)){
                            {
                                max_acked[quic_server_test_connection_close::__tup__cid__quic_packet_type(dcid,e)] = loc__last;
                            }
                        }
                        ivy_assume((0 < frame__ack__block__arr__end(f.ack_blocks)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 463");
                        {
                            bool loc__some_new_ack;
    loc__some_new_ack = (bool)___ivy_choose(0,"loc:some_new_ack",2863);
                            {
                                loc__some_new_ack = false;
                                while((loc__idx < frame__ack__block__arr__end(f.ack_blocks))){
                                    {
                                        {
                                            frame__ack__block loc__ack_block;
    loc__ack_block.gap = (unsigned)___ivy_choose(0,"loc:ack_block",2862);
    loc__ack_block.blocks = (unsigned)___ivy_choose(0,"loc:ack_block",2862);
                                            {
                                                loc__ack_block = frame__ack__block__arr__value(f.ack_blocks,loc__idx);
                                                ivy_assume((!(0 < loc__idx) || (loc__ack_block.gap < ((loc__last - (1 & 4294967295)) & 4294967295))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 467");
                                                {
                                                    unsigned loc__upper;
    loc__upper = (unsigned)___ivy_choose(0,"loc:upper",2861);
                                                    {
                                                        loc__upper = ((loc__last - ((0 < loc__idx) ? ((loc__ack_block.gap + (2 & 4294967295)) & 4294967295) : (0 & 4294967295))) & 4294967295);
                                                        ivy_assume(((loc__ack_block.blocks < loc__upper) || (loc__ack_block.blocks == loc__upper)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 469");
                                                        loc__last = ((loc__upper - loc__ack_block.blocks) & 4294967295);
                                                        {
                                                            unsigned loc__jdx;
    loc__jdx = (unsigned)___ivy_choose(0,"loc:jdx",2860);
                                                            {
                                                                loc__jdx = loc__last;
                                                                while(((loc__jdx < loc__upper) || (loc__jdx == loc__upper))){
                                                                    {
                                                                        ivy_assume(sent_pkt[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(dcid,e,loc__jdx)], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 473");
                                                                        if(pkt_has_close[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(dcid,e,loc__jdx)]){
                                                                            conn_draining[scid] = true;
                                                                        }
                                                                        if(!acked_pkt[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(dcid,e,loc__jdx)]){
                                                                            {
                                                                                loc__some_new_ack = true;
                                                                            }
                                                                        }
                                                                        acked_pkt[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(dcid,e,loc__jdx)] = true;
                                                                        loc__jdx = ((loc__jdx + (1 & 4294967295)) & 4294967295);
                                                                    }
                                                                }
                                                                ___ivy_stack.push_back(2869);
                                                                loc__idx = ext__frame__ack__block__idx__next(loc__idx);
                                                                ___ivy_stack.pop_back();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if(_generating){
                                    {
                                        ivy_assume(loc__some_new_ack, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 487");
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 339");
                force_new_ack = true;
            }
        }
        force_new_ack = false;
        ___ivy_stack.push_back(2870);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(1, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ack>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__stateless_reset_token__set(const stateless_reset_token& p, trans_params_struct& s){
    {
        s.stateless_reset_token__is_set = true;
        s.stateless_reset_token__value = p;
    }
}
void quic_server_test_connection_close::ext__frame__arr__append(frame__arr& a, quic_server_test_connection_close::frame v){
    {

        a.push_back(v);
    }
}
quic_server_test_connection_close::cid quic_server_test_connection_close::ext__tls_id_to_cid(unsigned long long tls_id){
    quic_server_test_connection_close::cid scid;
    {
        scid = the_cid;
    }
    return scid;
}
void quic_server_test_connection_close::ext__tls_api__lower__recv(unsigned long long c, const stream_data& data, int lev){
    {
        picotls_connection *s = tls_api__upper__foo__cid_map[c];
        std::vector<char> &input = s->input;
        for (unsigned i = 0; i < data.size(); i++) {
            input.push_back(data[i]);
        }
        // TODO: make the epoch a parameter of this call
        // For now, we assume that the epochs come in order
        size_t in_epoch = ptls_get_read_epoch(s->gs);
        picotls_do_handshake(s,in_epoch,&(s->input[0]),s->input.size());
        s->input.clear();
    }
}
unsigned long long quic_server_test_connection_close::ext__vector__transport_parameter____domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
unsigned long long quic_server_test_connection_close::ext__prot__get_var_int(const stream_data& pkt, unsigned long long pos, unsigned long long len){
    unsigned long long val;
    val = (unsigned long long)___ivy_choose(0,"fml:val",0);
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2867);
        {
            loc__idx = pos;
            val = 0;
            while((loc__idx < (pos + len))){
                {
                    {
                        unsigned loc__byte;
    loc__byte = (unsigned)___ivy_choose(0,"loc:byte",2866);
                        {
                            loc__byte = stream_data__value(pkt,loc__idx);
                            if((loc__idx == pos)){
                                {
                                    loc__byte = ((loc__byte & (0x3f & 255)) & 255);
                                }
                            }
                            val = ((256 * val) + ((loc__byte >> 0) & 255));
                            ___ivy_stack.push_back(2871);
                            loc__idx = ext__stream_pos__next(loc__idx);
                            ___ivy_stack.pop_back();
                        }
                    }
                }
            }
        }
    }
    return val;
}
unsigned long long quic_server_test_connection_close::ext__tls__handshakes__domain__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
unsigned long long quic_server_test_connection_close::ext__frame__idx__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void quic_server_test_connection_close::ext__initial_max_stream_id_uni__set(const initial_max_stream_id_uni& p, trans_params_struct& s){
    {
        s.initial_max_stream_id_uni__is_set = true;
        s.initial_max_stream_id_uni__value = p;
    }
}
void quic_server_test_connection_close::ext__app_server_open_event(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid){
    {
        ivy_assume(conn_requested[quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid(dst,src,dcid)], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_application.ivy: line 101");
        ivy_assume((!connected[dcid] && !connected[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_application.ivy: line 102");
        ___ivy_stack.push_back(2873);
        ext__map_cids(scid, dcid);
        ___ivy_stack.pop_back();
        ___ivy_stack.push_back(2874);
        ext__map_cids(dcid, scid);
        ___ivy_stack.pop_back();
        ack_credit[scid] = ((ack_credit[scid] + (1 & 4294967295)) & 4294967295);
    }
}
unsigned long long quic_server_test_connection_close::ext__stream_max_data(quic_server_test_connection_close::cid dcid, unsigned id){
    unsigned long long max;
    max = (unsigned long long)___ivy_choose(0,"fml:max",0);
    {
        {
            trans_params_struct loc__tp;
    loc__tp.initial_max_stream_data_bidi_local__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_data_bidi_local__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_data__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_data__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_id_bidi__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_id_bidi__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2871);
    loc__tp.idle_timeout__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.idle_timeout__value.seconds_16 = (int)___ivy_choose(0,"loc:tp",2871);
    loc__tp.preferred_address__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.max_packet_size__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.max_packet_size__value.stream_pos_16 = (unsigned long long)___ivy_choose(0,"loc:tp",2871);
    loc__tp.stateless_reset_token__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.ack_delay_exponent__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.ack_delay_exponent__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_id_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_id_uni__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2871);
    loc__tp.disable_migration__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_data_bidi_remote__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_data_bidi_remote__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_data_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.initial_max_stream_data_uni__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2871);
    loc__tp.max_ack_delay__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.max_ack_delay__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2871);
    loc__tp.active_connection_id_limit__is_set = (bool)___ivy_choose(0,"loc:tp",2871);
    loc__tp.active_connection_id_limit__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2871);
            {
                loc__tp = trans_params[dcid];
                max = 0;
                if((get_stream_kind(id) == unidir)){
                    if(loc__tp.initial_max_stream_data_uni__is_set){
                        max = trans_params[dcid].initial_max_stream_data_uni__value.stream_pos_32;
                    }
                }
                else {
                    if((is_client[dcid] == (get_stream_role(id) == role__client))){
                        if(loc__tp.initial_max_stream_data_bidi_local__is_set){
                            max = trans_params[dcid].initial_max_stream_data_bidi_local__value.stream_pos_32;
                        }
                    }
                    else {
                        if(loc__tp.initial_max_stream_data_bidi_remote__is_set){
                            max = trans_params[dcid].initial_max_stream_data_bidi_remote__value.stream_pos_32;
                        }
                    }
                }
                if(max_stream_data_set[quic_server_test_connection_close::__tup__cid__unsigned(dcid,id)]){
                    {
                        {
                            unsigned long long loc__msdv;
    loc__msdv = (unsigned long long)___ivy_choose(0,"loc:msdv",2868);
                            {
                                loc__msdv = max_stream_data_val[quic_server_test_connection_close::__tup__cid__unsigned(dcid,id)];
                                max = ((max < loc__msdv) ? loc__msdv : max);
                            }
                        }
                    }
                }
                {
                    unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2870);
                    {
                        ___ivy_stack.push_back(2875);
                        loc__0 = ext__max_additional_data(dcid);
                        ___ivy_stack.pop_back();
                        {
                            unsigned long long loc__alt_max;
    loc__alt_max = (unsigned long long)___ivy_choose(0,"loc:alt_max",2869);
                            {
                                loc__alt_max = (loc__0 + stream_length[quic_server_test_connection_close::__tup__cid__unsigned(dcid,id)]);
                                max = ((loc__alt_max < max) ? loc__alt_max : max);
                            }
                        }
                    }
                }
            }
        }
    }
    return max;
}
void quic_server_test_connection_close::ext__infer_tls_events(const ip__endpoint& src, const ip__endpoint& dst, const quic_packet& pkt){
    {
        quic_server_test_connection_close::cid loc__scid;
        {
            loc__scid = pkt.src_cid;
            {
                quic_server_test_connection_close::cid loc__dcid;
                {
                    loc__dcid = pkt.dst_cid;
                    {
                        bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2872);
                        {
                            ___ivy_stack.push_back(2876);
                            loc__0 = ext__quic_packet__long(pkt);
                            ___ivy_stack.pop_back();
                            if(!loc__0){
                                loc__scid = connected_to[loc__dcid];
                            }
                        }
                    }
                    if(((pkt.ptype == quic_packet_type__initial) && !conn_seen[loc__dcid])){
                        {
                            nonce_cid[loc__scid] = loc__dcid;
                        }
                    }
                    {
                        quic_packet_type loc__e;
    loc__e = (quic_packet_type)___ivy_choose(0,"loc:e",2875);
                        {
                            loc__e = pkt.ptype;
                            ___ivy_stack.push_back(2877);
                            ext__set_encryption_level(src, loc__scid, loc__e);
                            ___ivy_stack.pop_back();
                            ___ivy_stack.push_back(2878);
                            ext__tls_keys_established_event(loc__scid, loc__e);
                            ___ivy_stack.pop_back();
                            if((conn_requested[quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid(dst,src,loc__dcid)] && !connected[loc__dcid] && !connected[loc__scid])){
                                {
                                    ___ivy_stack.push_back(2879);
                                    ext__app_server_open_event(src, dst, loc__scid, loc__dcid);
                                    ___ivy_stack.pop_back();
                                }
                            }
                            {
                                unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2874);
                                {
                                    loc__idx = frame__arr__begin(pkt.payload);
                                    while((loc__idx < frame__arr__end(pkt.payload))){
                                        {
                                            quic_server_test_connection_close::frame loc__f;
                                            {
                                                loc__f = frame__arr__value(pkt.payload,loc__idx);
                                                {
                                                    frame__crypto loc__cf;
                                                    if (((loc__f).tag == 7)) loc__cf = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__crypto >(loc__f);
                                                    if(((loc__f).tag == 7)){
                                                        ___ivy_stack.push_back(2880);
                                                        ext__tls_send_event(src, dst, loc__scid, loc__dcid, loc__cf.data, loc__cf.offset, loc__e);
                                                        ___ivy_stack.pop_back();
                                                    }
                                                }
                                                {
                                                    frame__stream loc__sf;
                                                    if (((loc__f).tag == 0)) loc__sf = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream >(loc__f);
                                                    if(((loc__f).tag == 0)){
                                                        ___ivy_stack.push_back(2881);
                                                        ext__app_send_event(src, dst, loc__dcid, loc__sf.id, loc__sf.data, loc__sf.offset, loc__sf.fin);
                                                        ___ivy_stack.pop_back();
                                                    }
                                                }
                                                ___ivy_stack.push_back(2882);
                                                ext__infer_frame(loc__scid, loc__dcid, loc__f);
                                                ___ivy_stack.pop_back();
                                                {
                                                    frame__retire_connection_id self__COLON__frame__retire_connection_id;
                                                    if (((loc__f).tag == 18)) self__COLON__frame__retire_connection_id = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__retire_connection_id >(loc__f);
                                                    if(((loc__f).tag == 18)){
                                                        ___ivy_stack.push_back(2883);
                                                        ext__frame__retire_connection_id__handle(self__COLON__frame__retire_connection_id, loc__scid, loc__dcid, loc__e);
                                                        ___ivy_stack.pop_back();
                                                    }
                                                    else {
                                                        {
                                                            frame__blocked self__COLON__frame__blocked;
                                                            if (((loc__f).tag == 17)) self__COLON__frame__blocked = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__blocked >(loc__f);
                                                            if(((loc__f).tag == 17)){
                                                                ___ivy_stack.push_back(2884);
                                                                ext__frame__blocked__handle(self__COLON__frame__blocked, loc__scid, loc__dcid, loc__e);
                                                                ___ivy_stack.pop_back();
                                                            }
                                                            else {
                                                                {
                                                                    frame__stop_sending self__COLON__frame__stop_sending;
                                                                    if (((loc__f).tag == 16)) self__COLON__frame__stop_sending = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stop_sending >(loc__f);
                                                                    if(((loc__f).tag == 16)){
                                                                        ___ivy_stack.push_back(2885);
                                                                        ext__frame__stop_sending__handle(self__COLON__frame__stop_sending, loc__scid, loc__dcid, loc__e);
                                                                        ___ivy_stack.pop_back();
                                                                    }
                                                                    else {
                                                                        {
                                                                            frame__stream_blocked self__COLON__frame__stream_blocked;
                                                                            if (((loc__f).tag == 15)) self__COLON__frame__stream_blocked = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_blocked >(loc__f);
                                                                            if(((loc__f).tag == 15)){
                                                                                ___ivy_stack.push_back(2886);
                                                                                ext__frame__stream_blocked__handle(self__COLON__frame__stream_blocked, loc__scid, loc__dcid, loc__e);
                                                                                ___ivy_stack.pop_back();
                                                                            }
                                                                            else {
                                                                                {
                                                                                    frame__max_data self__COLON__frame__max_data;
                                                                                    if (((loc__f).tag == 14)) self__COLON__frame__max_data = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_data >(loc__f);
                                                                                    if(((loc__f).tag == 14)){
                                                                                        ___ivy_stack.push_back(2887);
                                                                                        ext__frame__max_data__handle(self__COLON__frame__max_data, loc__scid, loc__dcid, loc__e);
                                                                                        ___ivy_stack.pop_back();
                                                                                    }
                                                                                    else {
                                                                                        {
                                                                                            frame__new_token self__COLON__frame__new_token;
                                                                                            if (((loc__f).tag == 13)) self__COLON__frame__new_token = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_token >(loc__f);
                                                                                            if(((loc__f).tag == 13)){
                                                                                                ___ivy_stack.push_back(2888);
                                                                                                ext__frame__new_token__handle(self__COLON__frame__new_token, loc__scid, loc__dcid, loc__e);
                                                                                                ___ivy_stack.pop_back();
                                                                                            }
                                                                                            else {
                                                                                                {
                                                                                                    frame__path_response self__COLON__frame__path_response;
                                                                                                    if (((loc__f).tag == 12)) self__COLON__frame__path_response = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_response >(loc__f);
                                                                                                    if(((loc__f).tag == 12)){
                                                                                                        ___ivy_stack.push_back(2889);
                                                                                                        ext__frame__path_response__handle(self__COLON__frame__path_response, loc__scid, loc__dcid, loc__e);
                                                                                                        ___ivy_stack.pop_back();
                                                                                                    }
                                                                                                    else {
                                                                                                        {
                                                                                                            frame__path_challenge self__COLON__frame__path_challenge;
                                                                                                            if (((loc__f).tag == 11)) self__COLON__frame__path_challenge = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__path_challenge >(loc__f);
                                                                                                            if(((loc__f).tag == 11)){
                                                                                                                ___ivy_stack.push_back(2890);
                                                                                                                ext__frame__path_challenge__handle(self__COLON__frame__path_challenge, loc__scid, loc__dcid, loc__e);
                                                                                                                ___ivy_stack.pop_back();
                                                                                                            }
                                                                                                            else {
                                                                                                                {
                                                                                                                    frame__new_connection_id self__COLON__frame__new_connection_id;
                                                                                                                    if (((loc__f).tag == 10)) self__COLON__frame__new_connection_id = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__new_connection_id >(loc__f);
                                                                                                                    if(((loc__f).tag == 10)){
                                                                                                                        ___ivy_stack.push_back(2891);
                                                                                                                        ext__frame__new_connection_id__handle(self__COLON__frame__new_connection_id, loc__scid, loc__dcid, loc__e);
                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        {
                                                                                                                            frame__application_close self__COLON__frame__application_close;
                                                                                                                            if (((loc__f).tag == 9)) self__COLON__frame__application_close = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__application_close >(loc__f);
                                                                                                                            if(((loc__f).tag == 9)){
                                                                                                                                ___ivy_stack.push_back(2892);
                                                                                                                                ext__frame__application_close__handle(self__COLON__frame__application_close, loc__scid, loc__dcid, loc__e);
                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                {
                                                                                                                                    frame__ping self__COLON__frame__ping;
                                                                                                                                    if (((loc__f).tag == 8)) self__COLON__frame__ping = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ping >(loc__f);
                                                                                                                                    if(((loc__f).tag == 8)){
                                                                                                                                        ___ivy_stack.push_back(2893);
                                                                                                                                        ext__frame__ping__handle(self__COLON__frame__ping, loc__scid, loc__dcid, loc__e);
                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                    }
                                                                                                                                    else {
                                                                                                                                        {
                                                                                                                                            frame__crypto self__COLON__frame__crypto;
                                                                                                                                            if (((loc__f).tag == 7)) self__COLON__frame__crypto = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__crypto >(loc__f);
                                                                                                                                            if(((loc__f).tag == 7)){
                                                                                                                                                ___ivy_stack.push_back(2894);
                                                                                                                                                ext__frame__crypto__handle(self__COLON__frame__crypto, loc__scid, loc__dcid, loc__e);
                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                {
                                                                                                                                                    frame__stream_id_blocked self__COLON__frame__stream_id_blocked;
                                                                                                                                                    if (((loc__f).tag == 6)) self__COLON__frame__stream_id_blocked = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream_id_blocked >(loc__f);
                                                                                                                                                    if(((loc__f).tag == 6)){
                                                                                                                                                        ___ivy_stack.push_back(2895);
                                                                                                                                                        ext__frame__stream_id_blocked__handle(self__COLON__frame__stream_id_blocked, loc__scid, loc__dcid, loc__e);
                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                    }
                                                                                                                                                    else {
                                                                                                                                                        {
                                                                                                                                                            frame__max_stream_data self__COLON__frame__max_stream_data;
                                                                                                                                                            if (((loc__f).tag == 5)) self__COLON__frame__max_stream_data = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_data >(loc__f);
                                                                                                                                                            if(((loc__f).tag == 5)){
                                                                                                                                                                ___ivy_stack.push_back(2896);
                                                                                                                                                                ext__frame__max_stream_data__handle(self__COLON__frame__max_stream_data, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                                {
                                                                                                                                                                    frame__connection_close self__COLON__frame__connection_close;
                                                                                                                                                                    if (((loc__f).tag == 4)) self__COLON__frame__connection_close = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__connection_close >(loc__f);
                                                                                                                                                                    if(((loc__f).tag == 4)){
                                                                                                                                                                        ___ivy_stack.push_back(2897);
                                                                                                                                                                        ext__frame__connection_close__handle(self__COLON__frame__connection_close, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                        {
                                                                                                                                                                            frame__max_stream_id self__COLON__frame__max_stream_id;
                                                                                                                                                                            if (((loc__f).tag == 3)) self__COLON__frame__max_stream_id = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__max_stream_id >(loc__f);
                                                                                                                                                                            if(((loc__f).tag == 3)){
                                                                                                                                                                                ___ivy_stack.push_back(2898);
                                                                                                                                                                                ext__frame__max_stream_id__handle(self__COLON__frame__max_stream_id, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                                            }
                                                                                                                                                                            else {
                                                                                                                                                                                {
                                                                                                                                                                                    frame__rst_stream self__COLON__frame__rst_stream;
                                                                                                                                                                                    if (((loc__f).tag == 2)) self__COLON__frame__rst_stream = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__rst_stream >(loc__f);
                                                                                                                                                                                    if(((loc__f).tag == 2)){
                                                                                                                                                                                        ___ivy_stack.push_back(2899);
                                                                                                                                                                                        ext__frame__rst_stream__handle(self__COLON__frame__rst_stream, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                        {
                                                                                                                                                                                            frame__ack self__COLON__frame__ack;
                                                                                                                                                                                            if (((loc__f).tag == 1)) self__COLON__frame__ack = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__ack >(loc__f);
                                                                                                                                                                                            if(((loc__f).tag == 1)){
                                                                                                                                                                                                ___ivy_stack.push_back(2900);
                                                                                                                                                                                                ext__frame__ack__handle(self__COLON__frame__ack, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                                                ___ivy_stack.pop_back();
                                                                                                                                                                                            }
                                                                                                                                                                                            else {
                                                                                                                                                                                                {
                                                                                                                                                                                                    frame__stream self__COLON__frame__stream;
                                                                                                                                                                                                    if (((loc__f).tag == 0)) self__COLON__frame__stream = quic_server_test_connection_close::frame::unwrap< quic_server_test_connection_close::frame__stream >(loc__f);
                                                                                                                                                                                                    if(((loc__f).tag == 0)){
                                                                                                                                                                                                        ___ivy_stack.push_back(2901);
                                                                                                                                                                                                        ext__frame__stream__handle(self__COLON__frame__stream, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                                    }
                                                                                                                                                                                                    else {
                                                                                                                                                                                                        ___ivy_stack.push_back(2902);
                                                                                                                                                                                                        ext__frame__handle(loc__f, loc__scid, loc__dcid, loc__e);
                                                                                                                                                                                                        ___ivy_stack.pop_back();
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                ___ivy_stack.push_back(2903);
                                                loc__idx = ext__frame__idx__next(loc__idx);
                                                ___ivy_stack.pop_back();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
unsigned quic_server_test_connection_close::ext__prot__byte_xor(unsigned x, unsigned y){
    unsigned z;
    z = (unsigned)___ivy_choose(0,"fml:z",0);

    z = x ^ y;
    return z;
}
quic_server_test_connection_close::ip__endpoint quic_server_test_connection_close::ext__endpoint_id_addr(endpoint_id ep_id){
    quic_server_test_connection_close::ip__endpoint ep;
    ep.protocol = (ip__protocol)___ivy_choose(0,"fml:ep",0);
    ep.addr = (unsigned)___ivy_choose(0,"fml:ep",0);
    ep.port = (unsigned)___ivy_choose(0,"fml:ep",0);
    {
        ep.protocol = ip__udp;
        ep.addr = ((ep_id == endpoint_id__server) ? server_addr : client_addr);
        ep.port = ((ep_id == endpoint_id__client) ? client_port : ((ep_id == endpoint_id__client_alt) ? client_port_alt : server_port));
    }
    return ep;
}
void quic_server_test_connection_close::ext__frame__stream_blocked__handle(const frame__stream_blocked& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 914");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 915");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 916");
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 420");
                ivy_assume((f.id == (4 & 65535)), "quic_server_test.ivy: line 421");
            }
        }
        ___ivy_stack.push_back(2904);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(15, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__stream_blocked>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
quic_server_test_connection_close::quic_packet quic_server_test_connection_close::ext__pkt_serdes__from_bytes(const stream_data& y){
    quic_server_test_connection_close::quic_packet x;
    x.ptype = (quic_packet_type)___ivy_choose(0,"fml:x",0);
    x.pversion = (unsigned)___ivy_choose(0,"fml:x",0);
    x.seq_num = (unsigned)___ivy_choose(0,"fml:x",0);
    {

        std::vector<char> buf(y.size());
        std::copy(y.begin(),y.end(),buf.begin());
        quic_deser des(buf);
        __deser(des,x);
    }
    return x;
}
void quic_server_test_connection_close::ext__frame__ping__handle(const frame__ping& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1021");
        ivy_assume((!(e == quic_packet_type__one_rtt) || established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1022");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1023");
        ___ivy_stack.push_back(2823);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(8, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__ping>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__undecryptable_packet_event(const ip__endpoint& src, const ip__endpoint& dst, const stream_data& pkt){
    __ivy_out  << std::hex << std::showbase  << "< undecryptable_packet_event" << "(" << src << "," << dst << "," << pkt << ")" << std::endl;
    ___ivy_stack.push_back(2906);
    imp__undecryptable_packet_event(src, dst, pkt);
    ___ivy_stack.pop_back();
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__tls_api__upper__encrypt_cipher(unsigned long long c, int l, const stream_data& clear, const stream_data& iv, bool recv){
    quic_server_test_connection_close::stream_data cipher;
    {

            picotls_connection *s = tls_api__upper__foo__cid_map[c];
        ptls_cipher_context_t *pn_enc;
        if (recv) pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_dec);
        else pn_enc = (ptls_cipher_context_t *)(s->crypto_context[l].pn_enc);
        encrypt_symm(pn_enc,clear,iv,cipher);
    }
    return cipher;
}
void quic_server_test_connection_close::ext__stream_data__set(stream_data& a, unsigned long long x, unsigned y){
    {

        if (0 <= x && x < (unsigned long long)a.size())
            a[x] = y;
    }
}
void quic_server_test_connection_close::tls_api__lower__send(unsigned long long c, const stream_data& data, int lev){
    {
        {
            quic_packet_type loc__e;
    loc__e = (quic_packet_type)___ivy_choose(0,"loc:e",2881);
            {
                loc__e = ((lev == 0) ? quic_packet_type__initial : ((lev == 2) ? quic_packet_type__handshake : quic_packet_type__zero_rtt));
                {
                    quic_server_test_connection_close::cid loc__0;
                    {
                        ___ivy_stack.push_back(2907);
                        loc__0 = ext__tls_id_to_cid(c);
                        ___ivy_stack.pop_back();
                        {
                            quic_server_test_connection_close::cid loc__scid;
                            {
                                loc__scid = loc__0;
                                {
                                    ip__endpoint loc__0;
    loc__0.protocol = (ip__protocol)___ivy_choose(0,"loc:0",2878);
    loc__0.addr = (unsigned)___ivy_choose(0,"loc:0",2878);
    loc__0.port = (unsigned)___ivy_choose(0,"loc:0",2878);
                                    ip__endpoint loc__1;
    loc__1.protocol = (ip__protocol)___ivy_choose(0,"loc:1",2878);
    loc__1.addr = (unsigned)___ivy_choose(0,"loc:1",2878);
    loc__1.port = (unsigned)___ivy_choose(0,"loc:1",2878);
                                    {
                                        ___ivy_stack.push_back(2908);
                                        loc__0 = ext__tls_id_to_src(c);
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2909);
                                        loc__1 = ext__tls_id_to_dst(c);
                                        ___ivy_stack.pop_back();
                                        ___ivy_stack.push_back(2910);
                                        ext__tls_send_event(loc__0, loc__1, loc__scid, 0, data, crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(loc__scid,loc__e)], loc__e);
                                        ___ivy_stack.pop_back();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
unsigned long long quic_server_test_connection_close::ext__prot__get_pnum_len(const stream_data& pkt, unsigned long long pnum_pos){
    unsigned long long pnum_len;
    pnum_len = (unsigned long long)___ivy_choose(0,"fml:pnum_len",0);
    {
        {
            unsigned long long loc__len_minus_one;
    loc__len_minus_one = (unsigned long long)___ivy_choose(0,"loc:len_minus_one",2882);
            {
                loc__len_minus_one = ((stream_data__value(pkt,0) >> 0) & 3);
                pnum_len = (loc__len_minus_one + 1);
            }
        }
    }
    return pnum_len;
}
void quic_server_test_connection_close::ext__net__recv(endpoint_id me, int s, const ip__endpoint& src, const prot__arr& x){
    {
        {
            ip__endpoint loc__0;
    loc__0.protocol = (ip__protocol)___ivy_choose(0,"loc:0",2893);
    loc__0.addr = (unsigned)___ivy_choose(0,"loc:0",2893);
    loc__0.port = (unsigned)___ivy_choose(0,"loc:0",2893);
            {
                ___ivy_stack.push_back(2912);
                loc__0 = ext__socket_endpoint(me, s);
                ___ivy_stack.pop_back();
                {
                    ip__endpoint loc__dst;
    loc__dst.protocol = (ip__protocol)___ivy_choose(0,"loc:dst",2892);
    loc__dst.addr = (unsigned)___ivy_choose(0,"loc:dst",2892);
    loc__dst.port = (unsigned)___ivy_choose(0,"loc:dst",2892);
                    {
                        loc__dst = loc__0;
                        {
                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2891);
                            {
                                loc__idx = prot__arr__begin(x);
                                while((loc__idx < prot__arr__end(x))){
                                    {
                                        {
                                            stream_data loc__ppkt;
                                            {
                                                loc__ppkt = prot__arr__value(x,loc__idx);
                                                {
                                                    unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2889);
                                                    {
                                                        ___ivy_stack.push_back(2913);
                                                        loc__0 = ext__reference_pkt_num(loc__ppkt);
                                                        ___ivy_stack.pop_back();
                                                        {
                                                            unsigned loc__rnum;
    loc__rnum = (unsigned)___ivy_choose(0,"loc:rnum",2888);
                                                            {
                                                                loc__rnum = loc__0;
                                                                {
                                                                    tls_api__upper__decrypt_result loc__0;
    loc__0.ok = (bool)___ivy_choose(0,"loc:0",2887);
                                                                    {
                                                                        ___ivy_stack.push_back(2914);
                                                                        loc__0 = ext__prot__decrypt(client__tls_id, loc__rnum, loc__ppkt);
                                                                        ___ivy_stack.pop_back();
                                                                        {
                                                                            tls_api__upper__decrypt_result loc__res;
    loc__res.ok = (bool)___ivy_choose(0,"loc:res",2886);
                                                                            {
                                                                                loc__res = loc__0;
                                                                                if(loc__res.ok){
                                                                                    {
                                                                                        {
                                                                                            quic_packet loc__0;
    loc__0.ptype = (quic_packet_type)___ivy_choose(0,"loc:0",2885);
    loc__0.pversion = (unsigned)___ivy_choose(0,"loc:0",2885);
    loc__0.seq_num = (unsigned)___ivy_choose(0,"loc:0",2885);
                                                                                            {
                                                                                                ___ivy_stack.push_back(2915);
                                                                                                loc__0 = ext__pkt_serdes__from_bytes(loc__res.data);
                                                                                                ___ivy_stack.pop_back();
                                                                                                {
                                                                                                    quic_packet loc__pkt;
    loc__pkt.ptype = (quic_packet_type)___ivy_choose(0,"loc:pkt",2884);
    loc__pkt.pversion = (unsigned)___ivy_choose(0,"loc:pkt",2884);
    loc__pkt.seq_num = (unsigned)___ivy_choose(0,"loc:pkt",2884);
                                                                                                    {
                                                                                                        loc__pkt = loc__0;
                                                                                                        {
                                                                                                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2883);
                                                                                                            {
                                                                                                                ___ivy_stack.push_back(2916);
                                                                                                                loc__0 = ext__prot__get_pnum_len(loc__res.data, 0);
                                                                                                                ___ivy_stack.pop_back();
                                                                                                                ___ivy_stack.push_back(2917);
                                                                                                                ext__prot__correct_pnum(loc__rnum, loc__pkt.seq_num, loc__0);
                                                                                                                ___ivy_stack.pop_back();
                                                                                                            }
                                                                                                        }
                                                                                                        ___ivy_stack.push_back(2918);
                                                                                                        ext__recv_packet(src, loc__dst, loc__pkt);
                                                                                                        ___ivy_stack.pop_back();
                                                                                                        ___ivy_stack.push_back(2919);
                                                                                                        ext__infer_tls_events(src, loc__dst, loc__pkt);
                                                                                                        ___ivy_stack.pop_back();
                                                                                                        ___ivy_stack.push_back(2920);
                                                                                                        ext__packet_event(src, loc__dst, loc__pkt);
                                                                                                        ___ivy_stack.pop_back();
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        ___ivy_stack.push_back(2921);
                                                                                        ext__undecryptable_packet_event(src, loc__dst, loc__ppkt);
                                                                                        ___ivy_stack.pop_back();
                                                                                    }
                                                                                }
                                                                                ___ivy_stack.push_back(2922);
                                                                                loc__idx = ext__prot__idx__next(loc__idx);
                                                                                ___ivy_stack.pop_back();
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__prot__stream_data_xor(stream_data& x, const stream_data& y){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2895);
        {
            loc__idx = stream_data__begin(x);
            while((loc__idx < stream_data__end(x))){
                {
                    {
                        unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2894);
                        {
                            ___ivy_stack.push_back(2923);
                            loc__0 = ext__prot__byte_xor(stream_data__value(x,loc__idx), stream_data__value(y,loc__idx));
                            ___ivy_stack.pop_back();
                            ___ivy_stack.push_back(2924);
                            ext__stream_data__set(x, loc__idx, loc__0);
                            ___ivy_stack.pop_back();
                        }
                    }
                    ___ivy_stack.push_back(2925);
                    loc__idx = ext__stream_pos__next(loc__idx);
                    ___ivy_stack.pop_back();
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__tls_keys_established_event(quic_server_test_connection_close::cid scid, quic_packet_type e){
    {
        if((e == quic_packet_type__handshake)){
            established_handshake_keys[scid] = true;
        }
        else {
            if((e == quic_packet_type__one_rtt)){
                established_1rtt_keys[scid] = true;
            }
        }
    }
}
void quic_server_test_connection_close::ext__packet_event(ip__endpoint src, ip__endpoint dst, quic_packet pkt){
    {
        ivy_assume((!!(stream_data__end(pkt.token) == 0) || (pkt.ptype == quic_packet_type__initial)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 270");
        ivy_assume(!(pkt.ptype == quic_packet_type__zero_rtt), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 274");
        {
            quic_server_test_connection_close::cid loc__dcid;
            {
                loc__dcid = pkt.dst_cid;
                {
                    quic_server_test_connection_close::cid loc__scid;
                    {
                        loc__scid = pkt.src_cid;
                        if(cid_mapped[loc__dcid]){
                            {
                                loc__dcid = cid_to_aid[loc__dcid];
                            }
                        }
                        ivy_assume((connected[loc__dcid] || ((pkt.ptype == quic_packet_type__initial) && is_client[loc__scid] && (loc__dcid == nonce_cid[loc__scid]))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 297");
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2896);
                            {
                                ___ivy_stack.push_back(2926);
                                loc__0 = ext__quic_packet__long(pkt);
                                ___ivy_stack.pop_back();
                                if(loc__0){
                                    {
                                        ivy_assume((!connected[loc__dcid] || (connected_to[loc__dcid] == loc__scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 309");
                                    }
                                }
                                else {
                                    {
                                        loc__scid = connected_to[loc__dcid];
                                    }
                                }
                            }
                        }
                        ivy_assume((pkt.ptype == queued_level[loc__scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 318");
                        ivy_assume(((pkt.seq_num < ((last_pkt_num[quic_server_test_connection_close::__tup__cid__quic_packet_type(loc__scid,pkt.ptype)] + (0x15 & 4294967295)) & 4294967295)) || (pkt.seq_num == ((last_pkt_num[quic_server_test_connection_close::__tup__cid__quic_packet_type(loc__scid,pkt.ptype)] + (0x15 & 4294967295)) & 4294967295))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 321");
                        ivy_assume(!sent_pkt[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(loc__scid,pkt.ptype,pkt.seq_num)], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 325");
                        sent_pkt[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(loc__scid,pkt.ptype,pkt.seq_num)] = true;
                        ivy_assume((0 < num_queued_frames[loc__scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 330");
                        ivy_assume((pkt.payload == queued_frames[loc__scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 334");
                        {
                            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2897);
                            {
                                ___ivy_stack.push_back(2927);
                                loc__0 = ext__quic_packet__long(pkt);
                                ___ivy_stack.pop_back();
                                ivy_assume((!(conn_seen[loc__scid] && loc__0 && is_client[loc__scid]) || conn_requested[quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid(src,dst,loc__scid)]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 338");
                            }
                        }
                        ivy_assume((!conn_seen[loc__dcid] || hi_non_probing_endpoint[quic_server_test_connection_close::__tup__cid__ip__endpoint(loc__dcid,dst)]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 343");
                        ivy_assume((!(!_generating && !queued_non_ack[loc__scid]) || ((0 & 4294967295) < ack_credit[loc__scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 349");
                        if(conn_draining[loc__scid]){
                            {
                                ivy_assume((!draining_pkt_sent[loc__scid] && queued_close[loc__scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 369");
                            }
                        }
                    }
                }
            }
        }
        if(_generating){
            {
                ivy_assume(((src == client__ep) || (src == client_alt)), "quic_server_test.ivy: line 282");
                ivy_assume((dst == server__ep), "quic_server_test.ivy: line 283");
                ivy_assume((stream_data__end(pkt.token) == 0), "quic_server_test.ivy: line 284");
            }
        }
        {
            bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2900);
            {
                ___ivy_stack.push_back(2928);
                loc__0 = ext__quic_packet__long(pkt);
                ___ivy_stack.pop_back();
                ivy_assume((!loc__0 || (pkt.pversion == (0xff000017 & 4294967295))), "quic_server_test.ivy: line 286");
            }
        }
        {
            quic_server_test_connection_close::cid loc__dcid;
            {
                loc__dcid = pkt.dst_cid;
                {
                    bool loc__0;
    loc__0 = (bool)___ivy_choose(0,"loc:0",2902);
                    {
                        ___ivy_stack.push_back(2929);
                        loc__0 = ext__quic_packet__long(pkt);
                        ___ivy_stack.pop_back();
                        {
                            quic_server_test_connection_close::cid loc__scid;
                            {
                                loc__scid = (loc__0 ? pkt.src_cid : connected_to[loc__dcid]);
                                if(cid_mapped[loc__dcid]){
                                    {
                                        loc__dcid = cid_to_aid[loc__dcid];
                                    }
                                }
                                last_pkt_num[quic_server_test_connection_close::__tup__cid__quic_packet_type(loc__scid,pkt.ptype)] = pkt.seq_num;
                                if((pkt.ptype == quic_packet_type__initial)){
                                    {
                                        if(!conn_seen[loc__dcid]){
                                            {
                                                ___ivy_stack.push_back(2930);
                                                ext__tls_client_initial_request(src, dst, loc__dcid);
                                                ___ivy_stack.pop_back();
                                                conn_requested[quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid(src,dst,loc__scid)] = true;
                                            }
                                        }
                                    }
                                }
                                conn_seen[loc__scid] = true;
                                if(queued_ack_eliciting[loc__scid]){
                                    {
                                        ack_credit[loc__dcid] = ((ack_credit[loc__dcid] + (1 & 4294967295)) & 4294967295);
                                    }
                                }
                                if(!queued_non_ack[loc__scid]){
                                    {
                                        ack_credit[loc__scid] = ((ack_credit[loc__scid] - (1 & 4294967295)) & 4294967295);
                                    }
                                }
                                if(queued_non_probing[loc__scid]){
                                    if((pkt.ptype == quic_packet_type__one_rtt)){
                                        if(((hi_non_probing[loc__scid] < pkt.seq_num) || (pkt.seq_num == hi_non_probing[loc__scid]))){
                                            {
                                                hi_non_probing[loc__scid] = pkt.seq_num;
                                                hi_non_probing_endpoint[quic_server_test_connection_close::__tup__cid__ip__endpoint(loc__scid,src)] = true;
                                            }
                                        }
                                    }
                                    else {
                                        {
                                            hi_non_probing_endpoint[quic_server_test_connection_close::__tup__cid__ip__endpoint(loc__scid,src)] = true;
                                        }
                                    }
                                }
                                if(queued_close[loc__scid]){
                                    {
                                        pkt_has_close[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned(loc__scid,pkt.ptype,pkt.seq_num)] = true;
                                    }
                                }
                                if(conn_draining[loc__scid]){
                                    draining_pkt_sent[loc__scid] = true;
                                }
                                ___ivy_stack.push_back(2931);
                                queued_frames[loc__scid] = ext__frame__arr__empty();
                                ___ivy_stack.pop_back();
                                queued_non_probing[loc__scid] = false;
                                queued_non_ack[loc__scid] = false;
                                queued_close[loc__scid] = false;
                                num_queued_frames[loc__scid] = 0;
                                queued_ack_eliciting[loc__scid] = false;
                            }
                        }
                    }
                }
            }
        }
        if(_generating){
            {
                {
                    stream_data loc__0;
                    {
                        ___ivy_stack.push_back(2932);
                        loc__0 = ext__pkt_serdes__to_bytes(pkt);
                        ___ivy_stack.pop_back();
                        {
                            stream_data loc__spkt;
                            {
                                loc__spkt = loc__0;
                                {
                                    unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2910);
                                    {
                                        ___ivy_stack.push_back(2933);
                                        loc__0 = ext__reference_pkt_num(loc__spkt);
                                        ___ivy_stack.pop_back();
                                        {
                                            unsigned loc__rnum;
    loc__rnum = (unsigned)___ivy_choose(0,"loc:rnum",2909);
                                            {
                                                loc__rnum = loc__0;
                                                {
                                                    stream_data loc__0;
                                                    {
                                                        ___ivy_stack.push_back(2934);
                                                        stream_data __tmp15;
                                                        __tmp15 = loc__spkt; ext__prot__encrypt(client__tls_id, loc__rnum, __tmp15);
                                                        loc__0 = __tmp15;
                                                        ___ivy_stack.pop_back();
                                                        {
                                                            stream_data loc__ppkt;
                                                            {
                                                                loc__ppkt = loc__0;
                                                                {
                                                                    prot__arr loc__0;
                                                                    {
                                                                        ___ivy_stack.push_back(2935);
                                                                        loc__0 = ext__prot__arr__empty();
                                                                        ___ivy_stack.pop_back();
                                                                        {
                                                                            prot__arr loc__pkts;
                                                                            {
                                                                                loc__pkts = loc__0;
                                                                                ___ivy_stack.push_back(2936);
                                                                                ext__prot__arr__append(loc__pkts, loc__ppkt);
                                                                                ___ivy_stack.pop_back();
                                                                                {
                                                                                    endpoint_id loc__0;
    loc__0 = (endpoint_id)___ivy_choose(0,"loc:0",2904);
                                                                                    int loc__1;
    loc__1 = (int)___ivy_choose(0,"loc:1",2904);
                                                                                    {
                                                                                        ___ivy_stack.push_back(2937);
                                                                                        loc__0 = ext__endpoint_to_pid(src);
                                                                                        ___ivy_stack.pop_back();
                                                                                        ___ivy_stack.push_back(2938);
                                                                                        loc__1 = ext__endpoint_to_socket(src);
                                                                                        ___ivy_stack.pop_back();
                                                                                        ___ivy_stack.push_back(2939);
                                                                                        ext__net__send(loc__0, loc__1, dst, loc__pkts);
                                                                                        ___ivy_stack.pop_back();
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::ext__initial_max_stream_data_bidi_remote__set(const initial_max_stream_data_bidi_remote& p, trans_params_struct& s){
    {
        s.initial_max_stream_data_bidi_remote__is_set = true;
        s.initial_max_stream_data_bidi_remote__value = p;
    }
}
void quic_server_test_connection_close::ext__frame__crypto__handle(frame__crypto f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 610");
        ivy_assume((((f.offset + f.length) < crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]) || ((f.offset + f.length) == crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 613");
        ivy_assume((f.data == stream_data__segment(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)],f.offset,(f.offset + f.length))), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 614");
        if(_generating){
            {
                ivy_assume((scid == the_cid), "quic_server_test.ivy: line 325");
                ivy_assume((0 < f.length), "quic_server_test.ivy: line 326");
                ivy_assume((f.offset == crypto_length[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]), "quic_server_test.ivy: line 327");
                unsigned long long __tmp16;
                __tmp16 = crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)];
                unsigned long long __tmp17;
                __tmp17 = f.offset;
                ivy_assume((f.length == ( __tmp16 < __tmp17 ? 0 : __tmp16 - __tmp17)), "quic_server_test.ivy: line 328");
            }
        }
        {
            unsigned long long loc__length;
    loc__length = (unsigned long long)___ivy_choose(0,"loc:length",2914);
            {
                loc__length = (f.offset + f.length);
                if((crypto_length[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)] < loc__length)){
                    crypto_length[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)] = loc__length;
                }
                {
                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2913);
                    {
                        loc__idx = f.offset;
                        while((loc__idx < (f.offset + f.length))){
                            {
                                crypto_data_present[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long(scid,e,loc__idx)] = true;
                                ___ivy_stack.push_back(2940);
                                loc__idx = ext__stream_pos__next(loc__idx);
                                ___ivy_stack.pop_back();
                            }
                        }
                        ___ivy_stack.push_back(2941);
                        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(7, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__crypto>(f)), e, false);
                        ___ivy_stack.pop_back();
                        if((e == quic_packet_type__handshake)){
                            {
                                established_1rtt_keys[scid] = true;
                            }
                        }
                    }
                }
            }
        }
    }
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__cid_to_bytes(quic_server_test_connection_close::cid c, unsigned len){
    quic_server_test_connection_close::stream_data res;

    res.resize(len);
    for (unsigned i = 0; i < len; i++) {
        res[len-i-1] = 0xff & (c.val >> (i * 8));
    }
    return res;
}
void quic_server_test_connection_close::ext__tls_send_event(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, const stream_data& data, unsigned long long pos, quic_packet_type e){
    {
        {
            unsigned long long loc__jdx;
    loc__jdx = (unsigned long long)___ivy_choose(0,"loc:jdx",2925);
            {
                loc__jdx = stream_data__begin(data);
                {
                    unsigned long long loc__end;
    loc__end = (unsigned long long)___ivy_choose(0,"loc:end",2924);
                    {
                        loc__end = (pos + stream_data__end(data));
                        if((stream_data__end(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]) < loc__end)){
                            {
                                ___ivy_stack.push_back(2942);
                                ext__stream_data__resize(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)], loc__end, (0 & 255));
                                ___ivy_stack.pop_back();
                            }
                        }
                        while((loc__jdx < stream_data__end(data))){
                            {
                                unsigned long long loc__cpos;
    loc__cpos = (unsigned long long)___ivy_choose(0,"loc:cpos",2916);
                                {
                                    loc__cpos = (pos + loc__jdx);
                                    {
                                        unsigned loc__byte;
    loc__byte = (unsigned)___ivy_choose(0,"loc:byte",2915);
                                        {
                                            loc__byte = stream_data__value(data,loc__jdx);
                                            ivy_assume((!crypto_data_present[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long(scid,e,loc__cpos)] || (stream_data__value(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)],loc__cpos) == loc__byte)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_security.ivy: line 191");
                                            crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)] = loc__end;
                                            ___ivy_stack.push_back(2943);
                                            ext__stream_data__set(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)], loc__cpos, loc__byte);
                                            ___ivy_stack.pop_back();
                                            crypto_data_present[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long(scid,e,loc__cpos)] = true;
                                            ___ivy_stack.push_back(2944);
                                            loc__jdx = ext__stream_pos__next(loc__jdx);
                                            ___ivy_stack.pop_back();
                                        }
                                    }
                                }
                            }
                        }
                        crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)] = stream_data__end(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]);
                        {
                            unsigned long long loc__max_present;
    loc__max_present = (unsigned long long)___ivy_choose(0,"loc:max_present",2923);
                            {
                                loc__max_present = 0;
                                while(((loc__max_present < crypto_data_end[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)]) && crypto_data_present[quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long(scid,e,loc__max_present)])){
                                    ___ivy_stack.push_back(2945);
                                    loc__max_present = ext__stream_pos__next(loc__max_present);
                                    ___ivy_stack.pop_back();
                                }
                                {
                                    stream_data loc__avail;
                                    {
                                        loc__avail = stream_data__segment(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)],crypto_handler_pos[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)],loc__max_present);
                                        {
                                            tls__handshake_parser__result loc__0;
    loc__0.pos = (unsigned long long)___ivy_choose(0,"loc:0",2921);
                                            {
                                                ___ivy_stack.push_back(2946);
                                                loc__0 = ext__tls__handshake_parser__deserialize(loc__avail, 0);
                                                ___ivy_stack.pop_back();
                                                {
                                                    tls__handshake_parser__result loc__res;
    loc__res.pos = (unsigned long long)___ivy_choose(0,"loc:res",2920);
                                                    {
                                                        loc__res = loc__0;
                                                        {
                                                            tls__handshakes loc__hs;
                                                            {
                                                                loc__hs = loc__res.value;
                                                                ___ivy_stack.push_back(2947);
                                                                ext__tls__handshake_data_event(src, dst, stream_data__segment(loc__avail,0,loc__res.pos));
                                                                ___ivy_stack.pop_back();
                                                                crypto_handler_pos[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)] = (crypto_handler_pos[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)] + loc__res.pos);
                                                                {
                                                                    unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2918);
                                                                    {
                                                                        loc__idx = tls__handshakes__begin(loc__hs);
                                                                        while((loc__idx < tls__handshakes__end(loc__hs))){
                                                                            {
                                                                                quic_server_test_connection_close::tls__handshake loc__h;
                                                                                {
                                                                                    loc__h = tls__handshakes__value(loc__hs,loc__idx);
                                                                                    ___ivy_stack.push_back(2948);
                                                                                    ext__tls__handshake_event(src, dst, loc__h);
                                                                                    ___ivy_stack.pop_back();
                                                                                    ___ivy_stack.push_back(2949);
                                                                                    ext__handle_tls_handshake(src, dst, scid, dcid, loc__h);
                                                                                    ___ivy_stack.pop_back();
                                                                                    ___ivy_stack.push_back(2950);
                                                                                    loc__idx = ext__tls__handshakes__domain__next(loc__idx);
                                                                                    ___ivy_stack.pop_back();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
void quic_server_test_connection_close::tls_api__upper__recv(unsigned long long c, const stream_data& data){
    {
    }
}
quic_server_test_connection_close::endpoint_id quic_server_test_connection_close::ext__endpoint_to_pid(const ip__endpoint& src){
    quic_server_test_connection_close::endpoint_id pid;
    pid = (endpoint_id)___ivy_choose(0,"fml:pid",0);
    if((src == client__ep)){
        {
            pid = endpoint_id__client;
        }
    }
    else {
        if((src == client_alt)){
            {
                pid = endpoint_id__client_alt;
            }
        }
    }
    return pid;
}
void quic_server_test_connection_close::ext__stream_data__resize(stream_data& a, unsigned long long s, unsigned v){
    {

        unsigned __old_size = a.size();
        a.resize(s);
        for (unsigned i = __old_size; i < (unsigned)s; i++)
            a[i] = v;
    }
}
void quic_server_test_connection_close::ext__frame__path_challenge__handle(const frame__path_challenge& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1106");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1107");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1108");
        ivy_assume((stream_data__end(f.data) == 8), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1109");
        ivy_assume(!path_challenge_pending[quic_server_test_connection_close::__tup__cid__stream_data(dcid,f.data)], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1110");
        path_challenge_pending[quic_server_test_connection_close::__tup__cid__stream_data(dcid,f.data)] = true;
        ___ivy_stack.push_back(2957);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(11, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__path_challenge>(f)), e, true);
        ___ivy_stack.pop_back();
    }
}
void quic_server_test_connection_close::ext__vector__transport_parameter____append(vector__transport_parameter__& a, quic_server_test_connection_close::transport_parameter v){
    {

        a.push_back(v);
    }
}
unsigned long long quic_server_test_connection_close::ext__max_additional_data(quic_server_test_connection_close::cid dcid){
    unsigned long long max;
    max = (unsigned long long)___ivy_choose(0,"fml:max",0);
    {
        {
            trans_params_struct loc__tp;
    loc__tp.initial_max_stream_data_bidi_local__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_data_bidi_local__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_data__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_data__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_id_bidi__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_id_bidi__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2930);
    loc__tp.idle_timeout__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.idle_timeout__value.seconds_16 = (int)___ivy_choose(0,"loc:tp",2930);
    loc__tp.preferred_address__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.max_packet_size__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.max_packet_size__value.stream_pos_16 = (unsigned long long)___ivy_choose(0,"loc:tp",2930);
    loc__tp.stateless_reset_token__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.ack_delay_exponent__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.ack_delay_exponent__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_id_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_id_uni__value.stream_id_16 = (unsigned)___ivy_choose(0,"loc:tp",2930);
    loc__tp.disable_migration__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_data_bidi_remote__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_data_bidi_remote__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_data_uni__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.initial_max_stream_data_uni__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2930);
    loc__tp.max_ack_delay__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.max_ack_delay__value.exponent_8 = (int)___ivy_choose(0,"loc:tp",2930);
    loc__tp.active_connection_id_limit__is_set = (bool)___ivy_choose(0,"loc:tp",2930);
    loc__tp.active_connection_id_limit__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"loc:tp",2930);
            {
                loc__tp = trans_params[dcid];
                max = 0;
                if(loc__tp.initial_max_data__is_set){
                    max = loc__tp.initial_max_data__value.stream_pos_32;
                }
                if(max_data_set[dcid]){
                    {
                        unsigned long long loc__smax;
    loc__smax = (unsigned long long)___ivy_choose(0,"loc:smax",2929);
                        {
                            loc__smax = max_data_val[dcid];
                            max = ((max < loc__smax) ? loc__smax : max);
                        }
                    }
                }
                unsigned long long __tmp18;
                __tmp18 = max;
                unsigned long long __tmp19;
                __tmp19 = conn_total_data[dcid];
                max = ( __tmp18 < __tmp19 ? 0 : __tmp18 - __tmp19);
            }
        }
    }
    return max;
}
void quic_server_test_connection_close::ext__max_ack_delay__set(const max_ack_delay& p, trans_params_struct& s){
    {
        s.max_ack_delay__is_set = true;
        s.max_ack_delay__value = p;
    }
}
quic_server_test_connection_close::cid quic_server_test_connection_close::ext__packet_scid(const prot__header_info& h){
    quic_server_test_connection_close::cid scid;
    if(h.hdr_long){
        {
            scid = h.scid;
        }
    }
    else {
        if(used_cid[h.dcid]){
            {
                scid = connected_to[h.dcid];
            }
        }
        else {
            {
                scid = 0;
            }
        }
    }
    return scid;
}
unsigned long long quic_server_test_connection_close::ext__stream_pos__next(unsigned long long x){
    unsigned long long y;
    y = (unsigned long long)___ivy_choose(0,"fml:y",0);
    {
        y = (x + 1);
    }
    return y;
}
void quic_server_test_connection_close::ext__initial_max_stream_data_uni__set(const initial_max_stream_data_uni& p, trans_params_struct& s){
    {
        s.initial_max_stream_data_uni__is_set = true;
        s.initial_max_stream_data_uni__value = p;
    }
}
void quic_server_test_connection_close::ext__app_send_event(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid dcid, unsigned s, const stream_data& data, unsigned long long pos, bool close){
    {
        {
            unsigned long long loc__send_end;
    loc__send_end = (unsigned long long)___ivy_choose(0,"loc:send_end",2934);
            {
                loc__send_end = (pos + stream_data__end(data));
                ivy_assume(!((stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)] < loc__send_end) && stream_app_data_finished[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_application.ivy: line 147");
                {
                    unsigned long long loc__end;
    loc__end = (unsigned long long)___ivy_choose(0,"loc:end",2933);
                    {
                        loc__end = stream_data__end(stream_app_data[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)]);
                        if((loc__end < loc__send_end)){
                            loc__end = loc__send_end;
                        }
                        ___ivy_stack.push_back(2959);
                        ext__stream_data__resize(stream_app_data[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)], loc__end, (0 & 255));
                        ___ivy_stack.pop_back();
                        {
                            unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2932);
                            {
                                loc__idx = stream_data__begin(data);
                                while((loc__idx < stream_data__end(data))){
                                    {
                                        unsigned loc__val;
    loc__val = (unsigned)___ivy_choose(0,"loc:val",2931);
                                        {
                                            loc__val = stream_data__value(stream_app_data[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)],(pos + loc__idx));
                                            ivy_assume((!!(loc__val == (0 & 255)) || (stream_data__value(data,loc__idx) == loc__val)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_application.ivy: line 160");
                                            ___ivy_stack.push_back(2960);
                                            ext__stream_data__set(stream_app_data[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)], (pos + loc__idx), stream_data__value(data,loc__idx));
                                            ___ivy_stack.pop_back();
                                            ___ivy_stack.push_back(2961);
                                            loc__idx = ext__stream_pos__next(loc__idx);
                                            ___ivy_stack.pop_back();
                                        }
                                    }
                                }
                                stream_app_data_end[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)] = loc__end;
                                if(close){
                                    {
                                        stream_app_data_finished[quic_server_test_connection_close::__tup__cid__unsigned(dcid,s)] = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
quic_server_test_connection_close::ip__endpoint quic_server_test_connection_close::ext__tls_id_to_src(unsigned long long tls_id){
    quic_server_test_connection_close::ip__endpoint src;
    src.protocol = (ip__protocol)___ivy_choose(0,"fml:src",0);
    src.addr = (unsigned)___ivy_choose(0,"fml:src",0);
    src.port = (unsigned)___ivy_choose(0,"fml:src",0);
    {
        src = ((tls_id == client__tls_id) ? client__ep : server__ep);
    }
    return src;
}
int quic_server_test_connection_close::ext__endpoint_to_socket(const ip__endpoint& src){
    int socket;
    socket = (int)___ivy_choose(0,"fml:socket",0);
    if((src == client__ep)){
        {
            socket = sock;
        }
    }
    else {
        if((src == client_alt)){
            {
                socket = sock_alt;
            }
        }
    }
    return socket;
}
void quic_server_test_connection_close::ext__handle_client_transport_parameters(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::cid scid, const quic_transport_parameters& tps, bool is_client_hello){
    {
        unsigned long long loc__idx;
    loc__idx = (unsigned long long)___ivy_choose(0,"loc:idx",2935);
        {
            loc__idx = vector__transport_parameter____begin(tps.transport_parameters);
            while((loc__idx < vector__transport_parameter____end(tps.transport_parameters))){
                {
                    {
                        active_connection_id_limit self__COLON__active_connection_id_limit;
                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 13)) self__COLON__active_connection_id_limit = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::active_connection_id_limit >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 13)){
                            ___ivy_stack.push_back(2962);
                            ext__active_connection_id_limit__set(self__COLON__active_connection_id_limit, trans_params[scid]);
                            ___ivy_stack.pop_back();
                        }
                        else {
                            {
                                max_ack_delay self__COLON__max_ack_delay;
                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 12)) self__COLON__max_ack_delay = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_ack_delay >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 12)){
                                    ___ivy_stack.push_back(2963);
                                    ext__max_ack_delay__set(self__COLON__max_ack_delay, trans_params[scid]);
                                    ___ivy_stack.pop_back();
                                }
                                else {
                                    {
                                        initial_max_stream_data_uni self__COLON__initial_max_stream_data_uni;
                                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 11)) self__COLON__initial_max_stream_data_uni = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_uni >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 11)){
                                            ___ivy_stack.push_back(2964);
                                            ext__initial_max_stream_data_uni__set(self__COLON__initial_max_stream_data_uni, trans_params[scid]);
                                            ___ivy_stack.pop_back();
                                        }
                                        else {
                                            {
                                                initial_max_stream_data_bidi_remote self__COLON__initial_max_stream_data_bidi_remote;
                                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 10)) self__COLON__initial_max_stream_data_bidi_remote = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_remote >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 10)){
                                                    ___ivy_stack.push_back(2965);
                                                    ext__initial_max_stream_data_bidi_remote__set(self__COLON__initial_max_stream_data_bidi_remote, trans_params[scid]);
                                                    ___ivy_stack.pop_back();
                                                }
                                                else {
                                                    {
                                                        disable_migration self__COLON__disable_migration;
                                                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 9)) self__COLON__disable_migration = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::disable_migration >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 9)){
                                                            ___ivy_stack.push_back(2966);
                                                            ext__disable_migration__set(self__COLON__disable_migration, trans_params[scid]);
                                                            ___ivy_stack.pop_back();
                                                        }
                                                        else {
                                                            {
                                                                initial_max_stream_id_uni self__COLON__initial_max_stream_id_uni;
                                                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 8)) self__COLON__initial_max_stream_id_uni = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_uni >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 8)){
                                                                    ___ivy_stack.push_back(2967);
                                                                    ext__initial_max_stream_id_uni__set(self__COLON__initial_max_stream_id_uni, trans_params[scid]);
                                                                    ___ivy_stack.pop_back();
                                                                }
                                                                else {
                                                                    {
                                                                        ack_delay_exponent self__COLON__ack_delay_exponent;
                                                                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 7)) self__COLON__ack_delay_exponent = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::ack_delay_exponent >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 7)){
                                                                            ___ivy_stack.push_back(2968);
                                                                            ext__ack_delay_exponent__set(self__COLON__ack_delay_exponent, trans_params[scid]);
                                                                            ___ivy_stack.pop_back();
                                                                        }
                                                                        else {
                                                                            {
                                                                                stateless_reset_token self__COLON__stateless_reset_token;
                                                                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 6)) self__COLON__stateless_reset_token = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::stateless_reset_token >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 6)){
                                                                                    ___ivy_stack.push_back(2969);
                                                                                    ext__stateless_reset_token__set(self__COLON__stateless_reset_token, trans_params[scid]);
                                                                                    ___ivy_stack.pop_back();
                                                                                }
                                                                                else {
                                                                                    {
                                                                                        max_packet_size self__COLON__max_packet_size;
                                                                                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 5)) self__COLON__max_packet_size = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::max_packet_size >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 5)){
                                                                                            ___ivy_stack.push_back(2970);
                                                                                            ext__max_packet_size__set(self__COLON__max_packet_size, trans_params[scid]);
                                                                                            ___ivy_stack.pop_back();
                                                                                        }
                                                                                        else {
                                                                                            {
                                                                                                preferred_address self__COLON__preferred_address;
                                                                                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 4)) self__COLON__preferred_address = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::preferred_address >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 4)){
                                                                                                    ___ivy_stack.push_back(2971);
                                                                                                    ext__preferred_address__set(self__COLON__preferred_address, trans_params[scid]);
                                                                                                    ___ivy_stack.pop_back();
                                                                                                }
                                                                                                else {
                                                                                                    {
                                                                                                        idle_timeout self__COLON__idle_timeout;
                                                                                                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 3)) self__COLON__idle_timeout = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::idle_timeout >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 3)){
                                                                                                            ___ivy_stack.push_back(2972);
                                                                                                            ext__idle_timeout__set(self__COLON__idle_timeout, trans_params[scid]);
                                                                                                            ___ivy_stack.pop_back();
                                                                                                        }
                                                                                                        else {
                                                                                                            {
                                                                                                                initial_max_stream_id_bidi self__COLON__initial_max_stream_id_bidi;
                                                                                                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 2)) self__COLON__initial_max_stream_id_bidi = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_id_bidi >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 2)){
                                                                                                                    ___ivy_stack.push_back(2973);
                                                                                                                    ext__initial_max_stream_id_bidi__set(self__COLON__initial_max_stream_id_bidi, trans_params[scid]);
                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                }
                                                                                                                else {
                                                                                                                    {
                                                                                                                        initial_max_data self__COLON__initial_max_data;
                                                                                                                        if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 1)) self__COLON__initial_max_data = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_data >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                                                        if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 1)){
                                                                                                                            ___ivy_stack.push_back(2974);
                                                                                                                            ext__initial_max_data__set(self__COLON__initial_max_data, trans_params[scid]);
                                                                                                                            ___ivy_stack.pop_back();
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            {
                                                                                                                                initial_max_stream_data_bidi_local self__COLON__initial_max_stream_data_bidi_local;
                                                                                                                                if (((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 0)) self__COLON__initial_max_stream_data_bidi_local = quic_server_test_connection_close::transport_parameter::unwrap< quic_server_test_connection_close::initial_max_stream_data_bidi_local >(vector__transport_parameter____value(tps.transport_parameters,loc__idx));
                                                                                                                                if(((vector__transport_parameter____value(tps.transport_parameters,loc__idx)).tag == 0)){
                                                                                                                                    ___ivy_stack.push_back(2975);
                                                                                                                                    ext__initial_max_stream_data_bidi_local__set(self__COLON__initial_max_stream_data_bidi_local, trans_params[scid]);
                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    ___ivy_stack.push_back(2976);
                                                                                                                                    ext__transport_parameter__set(vector__transport_parameter____value(tps.transport_parameters,loc__idx), trans_params[scid]);
                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ___ivy_stack.push_back(2977);
                    loc__idx = ext__vector__transport_parameter____domain__next(loc__idx);
                    ___ivy_stack.pop_back();
                }
            }
            ivy_assume(trans_params[scid].initial_max_stream_data_bidi_local__is_set, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 558");
            ivy_assume(trans_params[scid].initial_max_data__is_set, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 559");
            ivy_assume(trans_params[scid].idle_timeout__is_set, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 560");
            ivy_assume(trans_params[scid].initial_max_stream_data_bidi_remote__is_set, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 561");
            ivy_assume(trans_params[scid].initial_max_stream_data_uni__is_set, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 562");
            if(is_client_hello){
                {
                    ivy_assume(!trans_params[scid].stateless_reset_token__is_set, "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_packet.ivy: line 564");
                }
            }
        }
    }
}
void quic_server_test_connection_close::imp__tls__handshake_event(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::tls__handshake h){
    {
    }
}
quic_server_test_connection_close::tls_api__upper__decrypt_result quic_server_test_connection_close::ext__prot__decrypt(unsigned long long c, unsigned seq, const stream_data& pkt){
    quic_server_test_connection_close::tls_api__upper__decrypt_result res;
    res.ok = (bool)___ivy_choose(0,"fml:res",0);
    {
        {
            prot__header_info loc__0;
    loc__0.hdr_long = (bool)___ivy_choose(0,"loc:0",2958);
    loc__0.hdr_type = (unsigned)___ivy_choose(0,"loc:0",2958);
    loc__0.payload_length = (unsigned long long)___ivy_choose(0,"loc:0",2958);
    loc__0.payload_length_pos = (unsigned long long)___ivy_choose(0,"loc:0",2958);
    loc__0.pkt_num_pos = (unsigned long long)___ivy_choose(0,"loc:0",2958);
            {
                ___ivy_stack.push_back(2978);
                loc__0 = ext__prot__get_header_info(pkt);
                ___ivy_stack.pop_back();
                {
                    prot__header_info loc__h;
    loc__h.hdr_long = (bool)___ivy_choose(0,"loc:h",2957);
    loc__h.hdr_type = (unsigned)___ivy_choose(0,"loc:h",2957);
    loc__h.payload_length = (unsigned long long)___ivy_choose(0,"loc:h",2957);
    loc__h.payload_length_pos = (unsigned long long)___ivy_choose(0,"loc:h",2957);
    loc__h.pkt_num_pos = (unsigned long long)___ivy_choose(0,"loc:h",2957);
                    {
                        loc__h = loc__0;
                        {
                            int loc__0;
    loc__0 = (int)___ivy_choose(0,"loc:0",2956);
                            {
                                ___ivy_stack.push_back(2979);
                                loc__0 = ext__prot__get_level(pkt);
                                ___ivy_stack.pop_back();
                                {
                                    int loc__level;
    loc__level = (int)___ivy_choose(0,"loc:level",2955);
                                    {
                                        loc__level = loc__0;
                                        {
                                            unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2954);
                                            {
                                                ___ivy_stack.push_back(2980);
                                                loc__0 = ext__tls_api__upper__iv_size(c, loc__level);
                                                ___ivy_stack.pop_back();
                                                {
                                                    unsigned long long loc__sample_size;
    loc__sample_size = (unsigned long long)___ivy_choose(0,"loc:sample_size",2953);
                                                    {
                                                        loc__sample_size = loc__0;
                                                        if((loc__sample_size == 0)){
                                                            {
                                                                res.ok = false;
                                                            }
                                                        }
                                                        else {
                                                            {
                                                                unsigned long long loc__pnum_pos;
    loc__pnum_pos = (unsigned long long)___ivy_choose(0,"loc:pnum_pos",2952);
                                                                {
                                                                    loc__pnum_pos = loc__h.pkt_num_pos;
                                                                    {
                                                                        unsigned long long loc__sample_pos;
    loc__sample_pos = (unsigned long long)___ivy_choose(0,"loc:sample_pos",2951);
                                                                        {
                                                                            loc__sample_pos = (loc__pnum_pos + 4);
                                                                            if((stream_data__end(pkt) < (loc__sample_pos + loc__sample_size))){
                                                                                unsigned long long __tmp20;
                                                                                __tmp20 = stream_data__end(pkt);
                                                                                unsigned long long __tmp21;
                                                                                __tmp21 = loc__sample_size;
                                                                                loc__sample_pos = ( __tmp20 < __tmp21 ? 0 : __tmp20 - __tmp21);
                                                                            }
                                                                            {
                                                                                stream_data loc__sample;
                                                                                {
                                                                                    loc__sample = stream_data__segment(pkt,loc__sample_pos,(loc__sample_pos + loc__sample_size));
                                                                                    {
                                                                                        stream_data loc__pnum;
                                                                                        {
                                                                                            loc__pnum = stream_data__segment(pkt,loc__pnum_pos,(loc__pnum_pos + 4));
                                                                                            {
                                                                                                stream_data loc__0;
                                                                                                {
                                                                                                    ___ivy_stack.push_back(2981);
                                                                                                    loc__0 = ext__stream_data__empty();
                                                                                                    ___ivy_stack.pop_back();
                                                                                                    {
                                                                                                        stream_data loc__mask;
                                                                                                        {
                                                                                                            loc__mask = loc__0;
                                                                                                            {
                                                                                                                stream_data loc__0;
                                                                                                                {
                                                                                                                    ___ivy_stack.push_back(2982);
                                                                                                                    stream_data __tmp22;
                                                                                                                    __tmp22 = loc__mask; ext__stream_data__resize(__tmp22, 5, (0 & 255));
                                                                                                                    loc__0 = __tmp22;
                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                    ___ivy_stack.push_back(2983);
                                                                                                                    loc__mask = ext__tls_api__upper__encrypt_cipher(c, loc__level, loc__0, loc__sample, true);
                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                }
                                                                                                            }
                                                                                                            {
                                                                                                                unsigned loc__byte0_mask;
    loc__byte0_mask = (unsigned)___ivy_choose(0,"loc:byte0_mask",2946);
                                                                                                                {
                                                                                                                    loc__byte0_mask = ((stream_data__value(loc__mask,0) & (loc__h.hdr_long ? (0x0f & 255) : (0x1f & 255))) & 255);
                                                                                                                    {
                                                                                                                        stream_data loc__hdr;
                                                                                                                        {
                                                                                                                            loc__hdr = stream_data__segment(pkt,0,loc__pnum_pos);
                                                                                                                            {
                                                                                                                                unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2937);
                                                                                                                                {
                                                                                                                                    ___ivy_stack.push_back(2984);
                                                                                                                                    loc__0 = ext__prot__byte_xor(stream_data__value(pkt,0), loc__byte0_mask);
                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                    ___ivy_stack.push_back(2985);
                                                                                                                                    ext__stream_data__set(loc__hdr, 0, loc__0);
                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                }
                                                                                                                            }
                                                                                                                            {
                                                                                                                                unsigned long long loc__0;
    loc__0 = (unsigned long long)___ivy_choose(0,"loc:0",2944);
                                                                                                                                {
                                                                                                                                    ___ivy_stack.push_back(2986);
                                                                                                                                    loc__0 = ext__prot__get_pnum_len(loc__hdr, loc__pnum_pos);
                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                    {
                                                                                                                                        unsigned long long loc__pnum_len;
    loc__pnum_len = (unsigned long long)___ivy_choose(0,"loc:pnum_len",2943);
                                                                                                                                        {
                                                                                                                                            loc__pnum_len = loc__0;
                                                                                                                                            ___ivy_stack.push_back(2987);
                                                                                                                                            stream_data __tmp23;
                                                                                                                                            __tmp23 = stream_data__segment(loc__pnum,0,loc__pnum_len); ext__prot__stream_data_xor(__tmp23, stream_data__segment(loc__mask,1,(1 + loc__pnum_len)));
                                                                                                                                            loc__pnum = __tmp23;
                                                                                                                                            ___ivy_stack.pop_back();
                                                                                                                                            ___ivy_stack.push_back(2988);
                                                                                                                                            ext__stream_data__extend(loc__hdr, loc__pnum);
                                                                                                                                            ___ivy_stack.pop_back();
                                                                                                                                            {
                                                                                                                                                unsigned loc__0;
    loc__0 = (unsigned)___ivy_choose(0,"loc:0",2942);
                                                                                                                                                {
                                                                                                                                                    ___ivy_stack.push_back(2989);
                                                                                                                                                    loc__0 = ext__prot__get_pnum(loc__pnum, 0, loc__pnum_len);
                                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                                    {
                                                                                                                                                        unsigned loc__new_seq;
    loc__new_seq = (unsigned)___ivy_choose(0,"loc:new_seq",2941);
                                                                                                                                                        {
                                                                                                                                                            loc__new_seq = loc__0;
                                                                                                                                                            ___ivy_stack.push_back(2990);
                                                                                                                                                            ext__prot__correct_pnum(seq, loc__new_seq, loc__pnum_len);
                                                                                                                                                            ___ivy_stack.pop_back();
                                                                                                                                                            {
                                                                                                                                                                stream_data loc__pyld;
                                                                                                                                                                {
                                                                                                                                                                    loc__pyld = stream_data__segment(pkt,(loc__pnum_pos + loc__pnum_len),stream_data__end(pkt));
                                                                                                                                                                    ___ivy_stack.push_back(2991);
                                                                                                                                                                    res = ext__tls_api__upper__decrypt_aead(c, loc__level, loc__pyld, loc__new_seq, loc__hdr);
                                                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                                                    if(res.ok){
                                                                                                                                                                        {
                                                                                                                                                                            if(loc__h.hdr_long){
                                                                                                                                                                                {
                                                                                                                                                                                    {
                                                                                                                                                                                        stream_data loc__0;
                                                                                                                                                                                        {
                                                                                                                                                                                            ___ivy_stack.push_back(2992);
                                                                                                                                                                                            unsigned long long __tmp24;
                                                                                                                                                                                            __tmp24 = loc__h.payload_length;
                                                                                                                                                                                            unsigned long long __tmp25;
                                                                                                                                                                                            __tmp25 = 16;
                                                                                                                                                                                            loc__0 = ext__prot__to_var_int_16(( __tmp24 < __tmp25 ? 0 : __tmp24 - __tmp25));
                                                                                                                                                                                            ___ivy_stack.pop_back();
                                                                                                                                                                                            {
                                                                                                                                                                                                stream_data loc__new_len;
                                                                                                                                                                                                {
                                                                                                                                                                                                    loc__new_len = loc__0;
                                                                                                                                                                                                    ___ivy_stack.push_back(2993);
                                                                                                                                                                                                    ext__stream_data__resize(loc__hdr, loc__h.payload_length_pos, (0 & 255));
                                                                                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                                                                                    ___ivy_stack.push_back(2994);
                                                                                                                                                                                                    ext__stream_data__extend(loc__hdr, loc__new_len);
                                                                                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                                                                                    ___ivy_stack.push_back(2995);
                                                                                                                                                                                                    ext__stream_data__extend(loc__hdr, loc__pnum);
                                                                                                                                                                                                    ___ivy_stack.pop_back();
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            ___ivy_stack.push_back(2996);
                                                                                                                                                                            stream_data __tmp26;
                                                                                                                                                                            __tmp26 = loc__hdr; ext__stream_data__extend(__tmp26, res.data);
                                                                                                                                                                            res.data = __tmp26;
                                                                                                                                                                            ___ivy_stack.pop_back();
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return res;
}
void quic_server_test_connection_close::ext__frame__new_token__handle(const frame__new_token& f, quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_packet_type e){
    {
        ivy_assume((connected[dcid] && (connected_to[dcid] == scid)), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1150");
        ivy_assume(((e == quic_packet_type__one_rtt) && established_1rtt_keys[scid]), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1151");
        ivy_assume((!(0 < num_queued_frames[scid]) || (e == queued_level[scid])), "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1152");
        ivy_assume(!is_client[scid], "/usr/local/lib/python2.7/dist-packages/ivy/include/1.7/quic_frame.ivy: line 1153");
        ___ivy_stack.push_back(2998);
        ext__enqueue_frame(scid, quic_server_test_connection_close::frame(13, new quic_server_test_connection_close::frame::twrap<quic_server_test_connection_close::frame__new_token>(f)), e, false);
        ___ivy_stack.pop_back();
    }
}
quic_server_test_connection_close::stream_data quic_server_test_connection_close::ext__pkt_serdes__to_bytes(const quic_packet& x){
    quic_server_test_connection_close::stream_data y;
    {
        
                    quic_ser ser;
                    __ser(ser,x);
                    y.resize(ser.res.size());
                    for (unsigned i = 0; i < ser.res.size(); i++)
                        y[i] = (unsigned char) ser.res[i];
        //	    std::copy(ser.res.begin(),ser.res.end(),y.begin());
    }
    return y;
}
void quic_server_test_connection_close::ext__set_encryption_level(const ip__endpoint& src, quic_server_test_connection_close::cid scid, quic_packet_type e){
    {
        conn_enc_level[quic_server_test_connection_close::__tup__ip__endpoint__cid(src,scid)] = e;
    }
}
void quic_server_test_connection_close::__tick(int __timeout){
}
quic_server_test_connection_close::quic_server_test_connection_close(quic_server_test_connection_close::cid the_cid, unsigned client_addr, unsigned server_addr, unsigned server_port, quic_server_test_connection_close::cid server_cid, unsigned client_port, unsigned client_port_alt, unsigned long long max_stream_data){
#ifdef _WIN32
mutex = CreateMutex(NULL,FALSE,NULL);
#else
pthread_mutex_init(&mutex,NULL);
#endif
__lock();
    __CARD__stream_pos = 0;
    __CARD__tls__gmt = 4294967296;
    __CARD__microsecs = 0;
    __CARD__vector__tls__extension____domain = 0;
    __CARD__vector__tls__handshake____domain = 0;
    __CARD__tls__cipher_suite = 65536;
    __CARD__byte = 256;
    __CARD__vector__transport_parameter____domain = 0;
    __CARD__cid_length = 16;
    __CARD__tls__message_type = 256;
    __CARD__cid_seq = 256;
    __CARD__tls__handshakes__domain = 0;
    __CARD__quic_packet__idx = 0;
    __CARD__version = 4294967296;
    __CARD__tls__compression_method = 2;
    __CARD__tls_api__lower__level = 0;
    __CARD__frame__idx = 0;
    __CARD__frame__ack__block__idx = 0;
    __CARD__net__socket = 0;
    __CARD__tls__protocol_version = 65536;
    __CARD__vector__tls__cipher_suite____domain = 0;
    __CARD__tls_api__upper__level = 0;
    __CARD__ip__addr = 4294967296;
    __CARD__bit = 2;
    __CARD__tls_extensions__domain = 0;
    __CARD__prot__idx = 0;
    __CARD__tls_api__id = 0;
    __CARD__cid = 13;
    __CARD__vector__tls__compression_method____domain = 0;
    __CARD__pkt_num = 4294967296;
    __CARD__reset_token = 2147483648;
    __CARD__tls__extension_type = 65536;
    __CARD__stream_id = 65536;
    __CARD__type_bits = 128;
    __CARD__error_code = 65536;
    __CARD__ip__port = 65536;
    
    tls_make_name_map(tls_field_length_bytes,tls_field_length_bytes_map);
    tls_make_name_map(tls_field_bytes,tls_field_bytes_map);
    tls_make_name_map(tls_tags,tls_tags_map);
    tls_make_name_map(tls_tag_bytes,tls_tag_bytes_map);

    // Create the callbacks. When you put an
    // action in anti-quotes it creates a function object (a "thunk")
    // that captures the instance environment, in this case including
    // the instance's endpoint id "me".

    tls_api__upper__foo__cb = new tls_callbacks(thunk__tls_api__lower__send(this),thunk__tls_api__upper__recv(this),thunk__tls_api__upper__alert(this),thunk__tls_api__upper__keys_established(this));
    for (endpoint_id V0 = (endpoint_id)0; (int) V0 < 3; V0 = (endpoint_id)(((int)V0) + 1)) {

        // Create the callbacks. In a parameterized instance, this creates
        // one set of callbacks for each endpoint id. When you put an
        // action in anti-quotes it creates a function object (a "thunk")
        // that captures the instance environment, in this case including
        // the instance's endpoint id "me".

        net__impl__cb[V0] = new udp_callbacks(thunk__net__impl__handle_recv(this, V0));
    }
    {
        std::string pathname = "http_request_file.txt";
        int f = ::open(pathname.c_str(),O_RDWR,0666);
        if (f < 0) {
            perror("cannot open file");
        }
        http_request_file__fildes = f;
    }
    this->the_cid = the_cid;
    this->client_addr = client_addr;
    this->server_addr = server_addr;
    this->server_port = server_port;
    this->server_cid = server_cid;
    this->client_port = client_port;
    this->client_port_alt = client_port_alt;
    this->max_stream_data = max_stream_data;
}
quic_server_test_connection_close::~quic_server_test_connection_close(){
    __lock(); // otherwise, thread may die holding lock!
    for (unsigned i = 0; i < thread_ids.size(); i++){
#ifdef _WIN32
       // No idea how to cancel a thread on Windows. We just suspend it
       // so it can't cause any harm as we destruct this object.
       SuspendThread(thread_ids[i]);
#else
        pthread_cancel(thread_ids[i]);
        pthread_join(thread_ids[i],NULL);
#endif
    }
    __unlock();
}

class init_gen : public gen {
public:
    init_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&){}
};
init_gen::init_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    add("(assert (and\
      and\
    ))");
}
bool init_gen::generate(quic_server_test_connection_close& obj) {
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    alits.clear();
    struct __thunk__35 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>{
        __thunk__35()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            unsigned long long __tmp27;
    __tmp27 = (unsigned long long)___ivy_choose(0,"stream_length",0);
            return __tmp27;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp28;
    __tmp28 = (unsigned long long)___ivy_choose(0,"stream_length",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp28));
            return res;
        }
    };
    obj.stream_length = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>(new __thunk__35());
    struct __thunk__36 : z3_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,bool>{
        __thunk__36()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__stream_kind &arg){
            bool __tmp29;
    __tmp29 = (bool)___ivy_choose(0,"max_stream_set",0);
            return __tmp29;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp30;
    __tmp30 = (bool)___ivy_choose(0,"max_stream_set",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp30));
            return res;
        }
    };
    obj.max_stream_set = hash_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,bool>(new __thunk__36());
    obj.client_alt.protocol = (quic_server_test_connection_close::ip__protocol)(rand() % 2);
    obj.client_alt.addr = (unsigned)(rand() % 4294967296);
    obj.client_alt.port = (unsigned)(rand() % 65536);
    struct __thunk__37 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__37()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp31;
    __tmp31 = (bool)___ivy_choose(0,"conn_draining",0);
            return __tmp31;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp32;
    __tmp32 = (bool)___ivy_choose(0,"conn_draining",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp32));
            return res;
        }
    };
    obj.conn_draining = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__37());
    struct __thunk__38 : z3_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::frame__arr>{
        __thunk__38()  {
        }
        quic_server_test_connection_close::frame__arr operator()(const quic_server_test_connection_close::cid &arg){
            quic_server_test_connection_close::frame__arr __tmp33;
            return __tmp33;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::frame__arr __tmp34;
            z3::expr res = __to_solver(g,v,__tmp34);
            return res;
        }
    };
    obj.queued_frames = hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::frame__arr>(new __thunk__38());
    struct __thunk__39 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>{
        __thunk__39()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &arg){
            bool __tmp35;
    __tmp35 = (bool)___ivy_choose(0,"acked_pkt",0);
            return __tmp35;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp36;
    __tmp36 = (bool)___ivy_choose(0,"acked_pkt",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp36));
            return res;
        }
    };
    obj.acked_pkt = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>(new __thunk__39());
    struct __thunk__40 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>{
        __thunk__40()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            unsigned long long __tmp37;
    __tmp37 = (unsigned long long)___ivy_choose(0,"crypto_handler_pos",0);
            return __tmp37;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp38;
    __tmp38 = (unsigned long long)___ivy_choose(0,"crypto_handler_pos",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp38));
            return res;
        }
    };
    obj.crypto_handler_pos = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>(new __thunk__40());
    struct __thunk__41 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>{
        __thunk__41()  {
        }
        unsigned operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            unsigned __tmp39;
    __tmp39 = (unsigned)___ivy_choose(0,"max_acked",0);
            return __tmp39;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned __tmp40;
    __tmp40 = (unsigned)___ivy_choose(0,"max_acked",0);
            z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)(__tmp40));
            return res;
        }
    };
    obj.max_acked = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>(new __thunk__41());
    struct __thunk__42 : z3_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,quic_server_test_connection_close::quic_packet_type>{
        __thunk__42()  {
        }
        quic_server_test_connection_close::quic_packet_type operator()(const quic_server_test_connection_close::__tup__ip__endpoint__cid &arg){
            quic_server_test_connection_close::quic_packet_type __tmp41;
    __tmp41 = (quic_server_test_connection_close::quic_packet_type)___ivy_choose(0,"conn_enc_level",0);
            return __tmp41;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::quic_packet_type __tmp42;
    __tmp42 = (quic_server_test_connection_close::quic_packet_type)___ivy_choose(0,"conn_enc_level",0);
            z3::expr res = v == g.int_to_z3(g.sort("quic_packet_type"),(int)(__tmp42));
            return res;
        }
    };
    obj.conn_enc_level = hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,quic_server_test_connection_close::quic_packet_type>(new __thunk__42());
    struct __thunk__43 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__43()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp43;
    __tmp43 = (bool)___ivy_choose(0,"queued_non_ack",0);
            return __tmp43;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp44;
    __tmp44 = (bool)___ivy_choose(0,"queued_non_ack",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp44));
            return res;
        }
    };
    obj.queued_non_ack = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__43());
    struct __thunk__44 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>{
        __thunk__44()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            unsigned long long __tmp45;
    __tmp45 = (unsigned long long)___ivy_choose(0,"max_stream_data_val",0);
            return __tmp45;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp46;
    __tmp46 = (unsigned long long)___ivy_choose(0,"max_stream_data_val",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp46));
            return res;
        }
    };
    obj.max_stream_data_val = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>(new __thunk__44());
    struct __thunk__45 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>{
        __thunk__45()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            unsigned long long __tmp47;
    __tmp47 = (unsigned long long)___ivy_choose(0,"crypto_pos",0);
            return __tmp47;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp48;
    __tmp48 = (unsigned long long)___ivy_choose(0,"crypto_pos",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp48));
            return res;
        }
    };
    obj.crypto_pos = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>(new __thunk__45());
    struct __thunk__46 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__46()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp49;
    __tmp49 = (bool)___ivy_choose(0,"queued_non_probing",0);
            return __tmp49;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp50;
    __tmp50 = (bool)___ivy_choose(0,"queued_non_probing",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp50));
            return res;
        }
    };
    obj.queued_non_probing = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__46());
    struct __thunk__47 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long,bool>{
        __thunk__47()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long &arg){
            bool __tmp51;
    __tmp51 = (bool)___ivy_choose(0,"crypto_data_present",0);
            return __tmp51;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp52;
    __tmp52 = (bool)___ivy_choose(0,"crypto_data_present",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp52));
            return res;
        }
    };
    obj.crypto_data_present = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long,bool>(new __thunk__47());
    obj.current_stream = (unsigned)(rand() % 65536);
    struct __thunk__48 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__48()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp53;
    __tmp53 = (bool)___ivy_choose(0,"queued_close",0);
            return __tmp53;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp54;
    __tmp54 = (bool)___ivy_choose(0,"queued_close",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp54));
            return res;
        }
    };
    obj.queued_close = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__48());
    struct __thunk__49 : z3_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,bool>{
        __thunk__49()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__ip__endpoint &arg){
            bool __tmp55;
    __tmp55 = (bool)___ivy_choose(0,"hi_non_probing_endpoint",0);
            return __tmp55;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp56;
    __tmp56 = (bool)___ivy_choose(0,"hi_non_probing_endpoint",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp56));
            return res;
        }
    };
    obj.hi_non_probing_endpoint = hash_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,bool>(new __thunk__49());
    struct __thunk__50 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
        __thunk__50()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            bool __tmp57;
    __tmp57 = (bool)___ivy_choose(0,"stream_seen",0);
            return __tmp57;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp58;
    __tmp58 = (bool)___ivy_choose(0,"stream_seen",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp58));
            return res;
        }
    };
    obj.stream_seen = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__50());
    struct __thunk__51 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>{
        __thunk__51()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            unsigned long long __tmp59;
    __tmp59 = (unsigned long long)___ivy_choose(0,"stream_app_data_end",0);
            return __tmp59;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp60;
    __tmp60 = (unsigned long long)___ivy_choose(0,"stream_app_data_end",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp60));
            return res;
        }
    };
    obj.stream_app_data_end = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>(new __thunk__51());
    struct __thunk__52 : z3_thunk<quic_server_test_connection_close::cid,unsigned long long>{
        __thunk__52()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::cid &arg){
            unsigned long long __tmp61;
    __tmp61 = (unsigned long long)___ivy_choose(0,"max_data_val",0);
            return __tmp61;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp62;
    __tmp62 = (unsigned long long)___ivy_choose(0,"max_data_val",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp62));
            return res;
        }
    };
    obj.max_data_val = hash_thunk<quic_server_test_connection_close::cid,unsigned long long>(new __thunk__52());
    struct __thunk__53 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__53()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp63;
    __tmp63 = (bool)___ivy_choose(0,"max_data_set",0);
            return __tmp63;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp64;
    __tmp64 = (bool)___ivy_choose(0,"max_data_set",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp64));
            return res;
        }
    };
    obj.max_data_set = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__53());
    struct __thunk__54 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
        __thunk__54()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            bool __tmp65;
    __tmp65 = (bool)___ivy_choose(0,"stream_finished",0);
            return __tmp65;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp66;
    __tmp66 = (bool)___ivy_choose(0,"stream_finished",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp66));
            return res;
        }
    };
    obj.stream_finished = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__54());
    obj.client__tls_id = (unsigned long long)0;
    struct __thunk__55 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>{
        __thunk__55()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &arg){
            bool __tmp67;
    __tmp67 = (bool)___ivy_choose(0,"pkt_has_close",0);
            return __tmp67;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp68;
    __tmp68 = (bool)___ivy_choose(0,"pkt_has_close",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp68));
            return res;
        }
    };
    obj.pkt_has_close = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>(new __thunk__55());
    struct __thunk__56 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__56()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp69;
    __tmp69 = (bool)___ivy_choose(0,"trans_params_set",0);
            return __tmp69;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp70;
    __tmp70 = (bool)___ivy_choose(0,"trans_params_set",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp70));
            return res;
        }
    };
    obj.trans_params_set = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__56());
    struct __thunk__57 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__57()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp71;
    __tmp71 = (bool)___ivy_choose(0,"cid_mapped",0);
            return __tmp71;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp72;
    __tmp72 = (bool)___ivy_choose(0,"cid_mapped",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp72));
            return res;
        }
    };
    obj.cid_mapped = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__57());
    struct __thunk__58 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>{
        __thunk__58()  {
        }
        unsigned operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            unsigned __tmp73;
    __tmp73 = (unsigned)___ivy_choose(0,"last_pkt_num",0);
            return __tmp73;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned __tmp74;
    __tmp74 = (unsigned)___ivy_choose(0,"last_pkt_num",0);
            z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)(__tmp74));
            return res;
        }
    };
    obj.last_pkt_num = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned>(new __thunk__58());
    struct __thunk__59 : z3_thunk<quic_server_test_connection_close::cid,unsigned long long>{
        __thunk__59()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::cid &arg){
            unsigned long long __tmp75;
    __tmp75 = (unsigned long long)___ivy_choose(0,"num_queued_frames",0);
            return __tmp75;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp76;
    __tmp76 = (unsigned long long)___ivy_choose(0,"num_queued_frames",0);
            z3::expr res = v == g.int_to_z3(g.sort("frame.idx"),(int)(__tmp76));
            return res;
        }
    };
    obj.num_queued_frames = hash_thunk<quic_server_test_connection_close::cid,unsigned long long>(new __thunk__59());
    obj.client__ep.protocol = (quic_server_test_connection_close::ip__protocol)(rand() % 2);
    obj.client__ep.addr = (unsigned)(rand() % 4294967296);
    obj.client__ep.port = (unsigned)(rand() % 65536);
    obj.force_new_ack = (bool)(rand() % 2);
    struct __thunk__60 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>{
        __thunk__60()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            unsigned long long __tmp77;
    __tmp77 = (unsigned long long)___ivy_choose(0,"crypto_data_end",0);
            return __tmp77;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp78;
    __tmp78 = (unsigned long long)___ivy_choose(0,"crypto_data_end",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp78));
            return res;
        }
    };
    obj.crypto_data_end = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>(new __thunk__60());
    struct __thunk__61 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,quic_server_test_connection_close::stream_data>{
        __thunk__61()  {
        }
        quic_server_test_connection_close::stream_data operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            quic_server_test_connection_close::stream_data __tmp79;
            return __tmp79;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::stream_data __tmp80;
            z3::expr res = __to_solver(g,v,__tmp80);
            return res;
        }
    };
    obj.stream_app_data = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,quic_server_test_connection_close::stream_data>(new __thunk__61());
    obj.server__ep.protocol = (quic_server_test_connection_close::ip__protocol)(rand() % 2);
    obj.server__ep.addr = (unsigned)(rand() % 4294967296);
    obj.server__ep.port = (unsigned)(rand() % 65536);
    struct __thunk__62 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,quic_server_test_connection_close::stream_data>{
        __thunk__62()  {
        }
        quic_server_test_connection_close::stream_data operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            quic_server_test_connection_close::stream_data __tmp81;
            return __tmp81;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::stream_data __tmp82;
            z3::expr res = __to_solver(g,v,__tmp82);
            return res;
        }
    };
    obj.crypto_data = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,quic_server_test_connection_close::stream_data>(new __thunk__62());
    struct __thunk__63 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>{
        __thunk__63()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            unsigned long long __tmp83;
    __tmp83 = (unsigned long long)___ivy_choose(0,"stream_app_pos",0);
            return __tmp83;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp84;
    __tmp84 = (unsigned long long)___ivy_choose(0,"stream_app_pos",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp84));
            return res;
        }
    };
    obj.stream_app_pos = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,unsigned long long>(new __thunk__63());
    struct __thunk__64 : z3_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::quic_packet_type>{
        __thunk__64()  {
        }
        quic_server_test_connection_close::quic_packet_type operator()(const quic_server_test_connection_close::cid &arg){
            quic_server_test_connection_close::quic_packet_type __tmp85;
    __tmp85 = (quic_server_test_connection_close::quic_packet_type)___ivy_choose(0,"queued_level",0);
            return __tmp85;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::quic_packet_type __tmp86;
    __tmp86 = (quic_server_test_connection_close::quic_packet_type)___ivy_choose(0,"queued_level",0);
            z3::expr res = v == g.int_to_z3(g.sort("quic_packet_type"),(int)(__tmp86));
            return res;
        }
    };
    obj.queued_level = hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::quic_packet_type>(new __thunk__64());
    struct __thunk__65 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__65()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp87;
    __tmp87 = (bool)___ivy_choose(0,"draining_pkt_sent",0);
            return __tmp87;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp88;
    __tmp88 = (bool)___ivy_choose(0,"draining_pkt_sent",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp88));
            return res;
        }
    };
    obj.draining_pkt_sent = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__65());
    struct __thunk__66 : z3_thunk<quic_server_test_connection_close::cid,unsigned long long>{
        __thunk__66()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::cid &arg){
            unsigned long long __tmp89;
    __tmp89 = (unsigned long long)___ivy_choose(0,"conn_total_data",0);
            return __tmp89;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp90;
    __tmp90 = (unsigned long long)___ivy_choose(0,"conn_total_data",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp90));
            return res;
        }
    };
    obj.conn_total_data = hash_thunk<quic_server_test_connection_close::cid,unsigned long long>(new __thunk__66());
    struct __thunk__67 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__67()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp91;
    __tmp91 = (bool)___ivy_choose(0,"established_handshake_keys",0);
            return __tmp91;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp92;
    __tmp92 = (bool)___ivy_choose(0,"established_handshake_keys",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp92));
            return res;
        }
    };
    obj.established_handshake_keys = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__67());
    obj.sock = (int)0;
    obj.server__enc_level = (quic_server_test_connection_close::quic_packet_type)(rand() % 4);
    struct __thunk__68 : z3_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,bool>{
        __thunk__68()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid &arg){
            bool __tmp93;
    __tmp93 = (bool)___ivy_choose(0,"conn_requested",0);
            return __tmp93;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp94;
    __tmp94 = (bool)___ivy_choose(0,"conn_requested",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp94));
            return res;
        }
    };
    obj.conn_requested = hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,bool>(new __thunk__68());
    struct __thunk__69 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__69()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp95;
    __tmp95 = (bool)___ivy_choose(0,"used_cid",0);
            return __tmp95;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp96;
    __tmp96 = (bool)___ivy_choose(0,"used_cid",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp96));
            return res;
        }
    };
    obj.used_cid = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__69());
    struct __thunk__70 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__70()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp97;
    __tmp97 = (bool)___ivy_choose(0,"conn_closed",0);
            return __tmp97;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp98;
    __tmp98 = (bool)___ivy_choose(0,"conn_closed",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp98));
            return res;
        }
    };
    obj.conn_closed = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__70());
    struct __thunk__71 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
        __thunk__71()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            bool __tmp99;
    __tmp99 = (bool)___ivy_choose(0,"stream_reset",0);
            return __tmp99;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp100;
    __tmp100 = (bool)___ivy_choose(0,"stream_reset",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp100));
            return res;
        }
    };
    obj.stream_reset = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__71());
    obj.client__enc_level = (quic_server_test_connection_close::quic_packet_type)(rand() % 4);
    struct __thunk__72 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__72()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp101;
    __tmp101 = (bool)___ivy_choose(0,"queued_ack_eliciting",0);
            return __tmp101;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp102;
    __tmp102 = (bool)___ivy_choose(0,"queued_ack_eliciting",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp102));
            return res;
        }
    };
    obj.queued_ack_eliciting = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__72());
    obj.server__tls_id = (unsigned long long)0;
    struct __thunk__73 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>{
        __thunk__73()  {
        }
        unsigned long long operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type &arg){
            unsigned long long __tmp103;
    __tmp103 = (unsigned long long)___ivy_choose(0,"crypto_length",0);
            return __tmp103;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned long long __tmp104;
    __tmp104 = (unsigned long long)___ivy_choose(0,"crypto_length",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_pos"),(int)(__tmp104));
            return res;
        }
    };
    obj.crypto_length = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,unsigned long long>(new __thunk__73());
    struct __thunk__74 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__74()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp105;
    __tmp105 = (bool)___ivy_choose(0,"is_client",0);
            return __tmp105;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp106;
    __tmp106 = (bool)___ivy_choose(0,"is_client",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp106));
            return res;
        }
    };
    obj.is_client = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__74());
    struct __thunk__75 : z3_thunk<quic_server_test_connection_close::cid,unsigned>{
        __thunk__75()  {
        }
        unsigned operator()(const quic_server_test_connection_close::cid &arg){
            unsigned __tmp107;
    __tmp107 = (unsigned)___ivy_choose(0,"max_seq_num",0);
            return __tmp107;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned __tmp108;
    __tmp108 = (unsigned)___ivy_choose(0,"max_seq_num",0);
            z3::expr res = v == g.int_to_z3(g.sort("cid_seq"),(int)(__tmp108));
            return res;
        }
    };
    obj.max_seq_num = hash_thunk<quic_server_test_connection_close::cid,unsigned>(new __thunk__75());
    struct __thunk__76 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
        __thunk__76()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            bool __tmp109;
    __tmp109 = (bool)___ivy_choose(0,"stream_app_data_finished",0);
            return __tmp109;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp110;
    __tmp110 = (bool)___ivy_choose(0,"stream_app_data_finished",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp110));
            return res;
        }
    };
    obj.stream_app_data_finished = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__76());
    obj.sock_alt = (int)0;
    struct __thunk__77 : z3_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid>{
        __thunk__77()  {
        }
        quic_server_test_connection_close::cid operator()(const quic_server_test_connection_close::cid &arg){
            quic_server_test_connection_close::cid __tmp111;
            return __tmp111;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::cid __tmp112;
            z3::expr res = __to_solver(g,v,__tmp112);
            return res;
        }
    };
    obj.nonce_cid = hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid>(new __thunk__77());
    struct __thunk__78 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__78()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp113;
    __tmp113 = (bool)___ivy_choose(0,"connected",0);
            return __tmp113;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp114;
    __tmp114 = (bool)___ivy_choose(0,"connected",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp114));
            return res;
        }
    };
    obj.connected = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__78());
    struct __thunk__79 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__79()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp115;
    __tmp115 = (bool)___ivy_choose(0,"conn_seen",0);
            return __tmp115;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp116;
    __tmp116 = (bool)___ivy_choose(0,"conn_seen",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp116));
            return res;
        }
    };
    obj.conn_seen = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__79());
    struct __thunk__80 : z3_thunk<quic_server_test_connection_close::cid,unsigned>{
        __thunk__80()  {
        }
        unsigned operator()(const quic_server_test_connection_close::cid &arg){
            unsigned __tmp117;
    __tmp117 = (unsigned)___ivy_choose(0,"ack_credit",0);
            return __tmp117;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned __tmp118;
    __tmp118 = (unsigned)___ivy_choose(0,"ack_credit",0);
            z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)(__tmp118));
            return res;
        }
    };
    obj.ack_credit = hash_thunk<quic_server_test_connection_close::cid,unsigned>(new __thunk__80());
    struct __thunk__81 : z3_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::trans_params_struct>{
        __thunk__81()  {
        }
        quic_server_test_connection_close::trans_params_struct operator()(const quic_server_test_connection_close::cid &arg){
            quic_server_test_connection_close::trans_params_struct __tmp119;
    __tmp119.initial_max_stream_data_bidi_local__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_data_bidi_local__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_data__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_data__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_id_bidi__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_id_bidi__value.stream_id_16 = (unsigned)___ivy_choose(0,"trans_params",0);
    __tmp119.idle_timeout__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.idle_timeout__value.seconds_16 = (int)___ivy_choose(0,"trans_params",0);
    __tmp119.preferred_address__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.max_packet_size__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.max_packet_size__value.stream_pos_16 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp119.stateless_reset_token__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.ack_delay_exponent__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.ack_delay_exponent__value.exponent_8 = (int)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_id_uni__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_id_uni__value.stream_id_16 = (unsigned)___ivy_choose(0,"trans_params",0);
    __tmp119.disable_migration__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_data_bidi_remote__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_data_bidi_remote__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_data_uni__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.initial_max_stream_data_uni__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp119.max_ack_delay__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.max_ack_delay__value.exponent_8 = (int)___ivy_choose(0,"trans_params",0);
    __tmp119.active_connection_id_limit__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp119.active_connection_id_limit__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
            return __tmp119;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::trans_params_struct __tmp120;
    __tmp120.initial_max_stream_data_bidi_local__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_data_bidi_local__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_data__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_data__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_id_bidi__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_id_bidi__value.stream_id_16 = (unsigned)___ivy_choose(0,"trans_params",0);
    __tmp120.idle_timeout__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.idle_timeout__value.seconds_16 = (int)___ivy_choose(0,"trans_params",0);
    __tmp120.preferred_address__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.max_packet_size__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.max_packet_size__value.stream_pos_16 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp120.stateless_reset_token__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.ack_delay_exponent__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.ack_delay_exponent__value.exponent_8 = (int)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_id_uni__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_id_uni__value.stream_id_16 = (unsigned)___ivy_choose(0,"trans_params",0);
    __tmp120.disable_migration__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_data_bidi_remote__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_data_bidi_remote__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_data_uni__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.initial_max_stream_data_uni__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
    __tmp120.max_ack_delay__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.max_ack_delay__value.exponent_8 = (int)___ivy_choose(0,"trans_params",0);
    __tmp120.active_connection_id_limit__is_set = (bool)___ivy_choose(0,"trans_params",0);
    __tmp120.active_connection_id_limit__value.stream_pos_32 = (unsigned long long)___ivy_choose(0,"trans_params",0);
            z3::expr res = __to_solver(g,v,__tmp120);
            return res;
        }
    };
    obj.trans_params = hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::trans_params_struct>(new __thunk__81());
    obj._generating = (bool)(rand() % 2);
    struct __thunk__82 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,quic_server_test_connection_close::cid>{
        __thunk__82()  {
        }
        quic_server_test_connection_close::cid operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            quic_server_test_connection_close::cid __tmp121;
            return __tmp121;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::cid __tmp122;
            z3::expr res = __to_solver(g,v,__tmp122);
            return res;
        }
    };
    obj.seqnum_to_cid = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,quic_server_test_connection_close::cid>(new __thunk__82());
    struct __thunk__83 : z3_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid>{
        __thunk__83()  {
        }
        quic_server_test_connection_close::cid operator()(const quic_server_test_connection_close::cid &arg){
            quic_server_test_connection_close::cid __tmp123;
            return __tmp123;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::cid __tmp124;
            z3::expr res = __to_solver(g,v,__tmp124);
            return res;
        }
    };
    obj.cid_to_aid = hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid>(new __thunk__83());
    struct __thunk__84 : z3_thunk<quic_server_test_connection_close::cid,unsigned>{
        __thunk__84()  {
        }
        unsigned operator()(const quic_server_test_connection_close::cid &arg){
            unsigned __tmp125;
    __tmp125 = (unsigned)___ivy_choose(0,"hi_non_probing",0);
            return __tmp125;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned __tmp126;
    __tmp126 = (unsigned)___ivy_choose(0,"hi_non_probing",0);
            z3::expr res = v == g.int_to_z3(g.sort("pkt_num"),(int)(__tmp126));
            return res;
        }
    };
    obj.hi_non_probing = hash_thunk<quic_server_test_connection_close::cid,unsigned>(new __thunk__84());
    struct __thunk__85 : z3_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid>{
        __thunk__85()  {
        }
        quic_server_test_connection_close::cid operator()(const quic_server_test_connection_close::cid &arg){
            quic_server_test_connection_close::cid __tmp127;
            return __tmp127;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            quic_server_test_connection_close::cid __tmp128;
            z3::expr res = __to_solver(g,v,__tmp128);
            return res;
        }
    };
    obj.connected_to = hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid>(new __thunk__85());
    struct __thunk__86 : z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>{
        __thunk__86()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__unsigned &arg){
            bool __tmp129;
    __tmp129 = (bool)___ivy_choose(0,"max_stream_data_set",0);
            return __tmp129;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp130;
    __tmp130 = (bool)___ivy_choose(0,"max_stream_data_set",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp130));
            return res;
        }
    };
    obj.max_stream_data_set = hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,bool>(new __thunk__86());
    struct __thunk__87 : z3_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,unsigned>{
        __thunk__87()  {
        }
        unsigned operator()(const quic_server_test_connection_close::__tup__cid__stream_kind &arg){
            unsigned __tmp131;
    __tmp131 = (unsigned)___ivy_choose(0,"max_stream",0);
            return __tmp131;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            unsigned __tmp132;
    __tmp132 = (unsigned)___ivy_choose(0,"max_stream",0);
            z3::expr res = v == g.int_to_z3(g.sort("stream_id"),(int)(__tmp132));
            return res;
        }
    };
    obj.max_stream = hash_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,unsigned>(new __thunk__87());
    struct __thunk__88 : z3_thunk<quic_server_test_connection_close::__tup__cid__stream_data,bool>{
        __thunk__88()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__stream_data &arg){
            bool __tmp133;
    __tmp133 = (bool)___ivy_choose(0,"path_challenge_pending",0);
            return __tmp133;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp134;
    __tmp134 = (bool)___ivy_choose(0,"path_challenge_pending",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp134));
            return res;
        }
    };
    obj.path_challenge_pending = hash_thunk<quic_server_test_connection_close::__tup__cid__stream_data,bool>(new __thunk__88());
    struct __thunk__89 : z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>{
        __thunk__89()  {
        }
        bool operator()(const quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned &arg){
            bool __tmp135;
    __tmp135 = (bool)___ivy_choose(0,"sent_pkt",0);
            return __tmp135;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp136;
    __tmp136 = (bool)___ivy_choose(0,"sent_pkt",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp136));
            return res;
        }
    };
    obj.sent_pkt = hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,bool>(new __thunk__89());
    struct __thunk__90 : z3_thunk<quic_server_test_connection_close::cid,bool>{
        __thunk__90()  {
        }
        bool operator()(const quic_server_test_connection_close::cid &arg){
            bool __tmp137;
    __tmp137 = (bool)___ivy_choose(0,"established_1rtt_keys",0);
            return __tmp137;
        }
        z3::expr to_z3(gen &g, const z3::expr &v){
            bool __tmp138;
    __tmp138 = (bool)___ivy_choose(0,"established_1rtt_keys",0);
            z3::expr res = v == g.int_to_z3(g.sort("bool"),(int)(__tmp138));
            return res;
        }
    };
    obj.established_1rtt_keys = hash_thunk<quic_server_test_connection_close::cid,bool>(new __thunk__90());

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {

    }
quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    obj.___ivy_gen = this;
    obj.__init();
    return __res;
}
class ext___finalize_gen : public gen {
  public:
    ext___finalize_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext___finalize_gen::ext___finalize_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!2 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!3 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!4 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!5 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!6 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                    (|X:frame| frame) "
"                    (|Y:frame.max_stream_data| frame.max_stream_data)) "
"             (=> (and (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Y:frame.max_stream_data|) "
"                      (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Z:frame.max_stream_data|)) "
"                 (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!7 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Y:frame.stream_id_blocked|) "
"                      (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Z:frame.stream_id_blocked|)) "
"                 (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!8 (forall ((|Y:frame.crypto| frame.crypto) "
"                    (|X:frame| frame) "
"                    (|Z:frame.crypto| frame.crypto)) "
"             (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                      (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                 (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!9 (forall ((|Z:frame.ping| frame.ping) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ping| frame.ping)) "
"             (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                      (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                 (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!10 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!11 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!12 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!13 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!14 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!15 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!16 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!17 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!18 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!19 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!20 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!21 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!22 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!23 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!24 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!40 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!41 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!42 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!43 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!44 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!45 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!46 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!47 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!48 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!54 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!55 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!56 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!57 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!58 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!59 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!60 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!61 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!62 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!63 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!64 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!65 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!66 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!67 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!68 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!69 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!71 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!72 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!73 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!74 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!75 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!76 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!77 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!78 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!79 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!80 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!81 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!82 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!83 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!84 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!85 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!86 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!87 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!88 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!90 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!94 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!95 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!96 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!97 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!98 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!99 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!100 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!102 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!103 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!104 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!105 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!106 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!107 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!108 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!109 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!110 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!111 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!113 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!114 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!115 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!116 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!117 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!118 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!119 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!120 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!121 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!122 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!123 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!125 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!126 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!127 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!128 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!129 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!130 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!131 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!132 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!133 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!134 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!135 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!136 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!138 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!139 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!140 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!141 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!142 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!143 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!144 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!145 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!146 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!147 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!148 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!149 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!150 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!152 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!153 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!154 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!155 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!156 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!157 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!158 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!159 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!160 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!161 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!162 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!175 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!176 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!177 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!178 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!179 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!180 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!181 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!183 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!184 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!185 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!186 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!187 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!188 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!189 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!190 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!191 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!192 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!193 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!194 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!195 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!196 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!197 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!198 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!199 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!200 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!201 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!202 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!203 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!204 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!205 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!206 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!207 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!208 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!210 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!211 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!212 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!213 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!214 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!215 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!216 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!217 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!218 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!221 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!224 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!225 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!227 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!228 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!229 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!230 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!231 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!232 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!233 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!234 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!235 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!236 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!237 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!238 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!239 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!240 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!241 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!242 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!243 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!244 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!245 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!246 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!258 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!259 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!260 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!261 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!262 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!263 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!264 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!265 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!266 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!272 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!273 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!274 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!275 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!277 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!278 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!279 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!280 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!281 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!285 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!286 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!287 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!288 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!290 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!291 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!292 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!294 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!295 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!296 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!298 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!299 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!300 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!301 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!302 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!303 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!304 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!305 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!307 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!308 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!310 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!311 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!313 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!315 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!317 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!318 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!320 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!321 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!322 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!323 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!324 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!325 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!326 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!335 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!336 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!337 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!338 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!340 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!341 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!342 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!343 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!344 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!345 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!346 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!347 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!348 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (conn_total_data |X0:cid|) 0))))) "
"  (and (> (conn_total_data the_cid) 0) "
"       a!1 "
"       a!2 "
"       a!3 "
"       a!4 "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348)))");
}
bool ext___finalize_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("conn_total_data",ctx.constant("X__0",sort("cid"))),obj.conn_total_data)));
    slvr.add(__to_solver(*this,apply("the_cid"),obj.the_cid));
    alits.clear();

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext___finalize_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> _finalize" << std::endl;
    obj.ext___finalize();
}
class ext__frame__stream__handle_gen : public gen {
  public:
    quic_server_test_connection_close::frame__stream f;
    quic_server_test_connection_close::cid scid;
    quic_server_test_connection_close::cid dcid;
    quic_server_test_connection_close::quic_packet_type e;
    ext__frame__stream__handle_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__frame__stream__handle_gen::ext__frame__stream__handle_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    mk_const("__ts0__new_loc:msdv","stream_pos");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    mk_const("__fml:f__frame.stream.len","Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    mk_const("__m_fml:max_c","stream_pos");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    mk_const("__new_loc:offset","stream_pos");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    mk_const("__fml:f__frame.stream.data","stream_data");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    mk_const("__new_loc:kind","stream_kind");
    mk_const("__m_fml:max_b_a","stream_pos");
    mk_const("__new_loc:tp_a","trans_params_struct");
    mk_const("__new_loc:tp_b","trans_params_struct");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    mk_const("__fml:f__frame.stream.fin","Bool");
    mk_const("__m_fml:max_a_a","stream_pos");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    mk_const("__ts0__ts0_a","Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    mk_const("__fml:f__frame.stream.length","stream_pos");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__new_loc:tp","trans_params_struct");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    mk_const("__ts0_c","Bool");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    mk_const("__m_fml:max_a","stream_pos");
    mk_const("__new_fml:max","stream_pos");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    mk_const("__ts0__new_loc:smax","stream_pos");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    mk_const("__ts0_a_a","Bool");
    mk_const("__m_fml:ok","Bool");
    mk_const("__fml:f__frame.stream.off","Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    mk_const("__fml:scid","cid");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    mk_const("__ts0_c_a","Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    mk_const("__fml:f__frame.stream.offset","stream_pos");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__new_fml:max_a","stream_pos");
    mk_const("__fml:e","quic_packet_type");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    mk_const("__ts0__m_fml:ok","Bool");
    mk_const("__new_fml:ok","Bool");
    mk_const("__fml:f__frame.stream.id","stream_id");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    mk_const("__ts0__ts0_b_a","Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    mk_const("__ts0__ts0_b","Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    mk_const("__ts0_a","Bool");
    mk_const("__new_loc:alt_max","stream_pos");
    mk_const("__ts0_a_a_a","Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    mk_const("__new_loc:idhi","stream_id");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (ite __ts0_a "
"                (initial_max_stream_data_uni.stream_pos_32 "
"                  (initial_max_stream_data_uni.value "
"                    (trans_params |__fml:dcid|))) "
"                0)) "
"      (a!2 (ite __ts0_a "
"                (initial_max_stream_data_bidi_local.stream_pos_32 "
"                  (initial_max_stream_data_bidi_local.value "
"                    (trans_params |__fml:dcid|))) "
"                0)) "
"      (a!3 (ite __ts0_a "
"                (initial_max_stream_data_bidi_remote.stream_pos_32 "
"                  (initial_max_stream_data_bidi_remote.value "
"                    (trans_params |__fml:dcid|))) "
"                0)) "
"      (a!4 (= __ts0_a "
"              (ite __ts0_c "
"                   (initial_max_stream_data_uni.is_set |__new_loc:tp_a|) "
"                   (ite __ts0__ts0_b_a "
"                        (initial_max_stream_data_bidi_local.is_set "
"                          |__new_loc:tp_a|) "
"                        (initial_max_stream_data_bidi_remote.is_set "
"                          |__new_loc:tp_a|))))) "
"      (a!5 (= __ts0__ts0_b_a "
"              (= (is_client |__fml:dcid|) "
"                 (= (get_stream_role |__fml:f__frame.stream.id|) role.client)))) "
"      (a!6 (= |__m_fml:max_c| "
"              (ite __ts0_a_a "
"                   (ite (> |__ts0__new_loc:msdv| |__m_fml:max_a|) "
"                        |__ts0__new_loc:msdv| "
"                        |__m_fml:max_a|) "
"                   |__m_fml:max_a|))) "
"      (a!7 (= |__m_fml:max_a_a| "
"              (ite (initial_max_data.is_set |__new_loc:tp|) "
"                   (initial_max_data.stream_pos_32 "
"                     (initial_max_data.value |__new_loc:tp|)) "
"                   0))) "
"      (a!8 (= |__m_fml:max_b_a| "
"              (ite __ts0_a_a_a "
"                   (ite (> |__ts0__new_loc:smax| |__m_fml:max_a_a|) "
"                        |__ts0__new_loc:smax| "
"                        |__m_fml:max_a_a|) "
"                   |__m_fml:max_a_a|))) "
"      (a!9 (= |__new_fml:max| "
"              (ite (< |__m_fml:max_b_a| (conn_total_data |__fml:dcid|)) "
"                   0 "
"                   (- |__m_fml:max_b_a| (conn_total_data |__fml:dcid|))))) "
"      (a!10 (or |__ts0__m_fml:ok| "
"                (and (max_stream_set |__fml:dcid| |__new_loc:kind|) "
"                     (bvult |__new_loc:idhi| "
"                            (max_stream |__fml:dcid| |__new_loc:kind|))))) "
"      (a!11 (ite __ts0__ts0_a "
"                 (bvult |__new_loc:idhi| "
"                        (initial_max_stream_id_uni.stream_id_16 "
"                          (initial_max_stream_id_uni.value |__new_loc:tp_b|))) "
"                 |__m_fml:ok|)) "
"      (a!12 (ite __ts0__ts0_a "
"                 (bvult |__new_loc:idhi| "
"                        (initial_max_stream_id_bidi.stream_id_16 "
"                          (initial_max_stream_id_bidi.value |__new_loc:tp_b|))) "
"                 |__m_fml:ok|)) "
"      (a!13 (not (= (is_client |__fml:dcid|) "
"                    (= (get_stream_role |__fml:f__frame.stream.id|) role.client)))) "
"      (a!14 (= |__fml:f__frame.stream.fin| "
"               (and (stream_app_data_finished "
"                      |__fml:dcid| "
"                      |__fml:f__frame.stream.id|) "
"                    (= (+ |__new_loc:offset| |__fml:f__frame.stream.length|) "
"                       (stream_app_data_end "
"                         |__fml:dcid| "
"                         |__fml:f__frame.stream.id|))))) "
"      (a!15 (= |__fml:f__frame.stream.length| "
"               (ite (< (stream_app_data_end "
"                         |__fml:dcid| "
"                         |__fml:f__frame.stream.id|) "
"                       |__fml:f__frame.stream.offset|) "
"                    0 "
"                    (- (stream_app_data_end "
"                         |__fml:dcid| "
"                         |__fml:f__frame.stream.id|) "
"                       |__fml:f__frame.stream.offset|)))) "
"      (a!16 (forall ((|S:stream_id| (_ BitVec 16))) "
"              (= (get_stream_kind |S:stream_id|) "
"                 (ite (= ((_ extract 1 1) |S:stream_id|) bit.one) unidir bidir)))) "
"      (a!17 (forall ((|S:stream_id| (_ BitVec 16))) "
"              (= (get_stream_role |S:stream_id|) "
"                 (ite (= ((_ extract 0 0) |S:stream_id|) bit.one) "
"                      role.server "
"                      role.client)))) "
"      (a!18 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream| frame.stream) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                       (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                  (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!19 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                       (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                  (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!20 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Y:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!21 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Y:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!22 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Y:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!23 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Y:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!24 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!25 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                  (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!26 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                       (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                  (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!27 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!28 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!29 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!30 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!31 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!32 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!33 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!34 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!35 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!36 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!37 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!40 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!41 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!42 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!43 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!44 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!45 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!46 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!47 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!48 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!49 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!50 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!51 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!52 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!53 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!54 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!55 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!56 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!57 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!58 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!59 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!60 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!61 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!62 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!63 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!64 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!65 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!66 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!67 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!68 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!69 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!71 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!72 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!73 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!74 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!75 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!76 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!77 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!78 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!79 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!80 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!81 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!82 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!83 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!84 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!85 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!86 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!87 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!88 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!89 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!90 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!91 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!92 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!93 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!94 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!95 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!96 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!97 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!98 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!99 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!100 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.application_close| frame.application_close)) "
"               (not (and (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Y:frame.application_close|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!101 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!102 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!103 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!104 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!105 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!106 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!107 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!108 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!109 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!110 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Y:frame.new_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!111 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!112 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!113 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!114 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!115 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!116 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!117 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!118 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!119 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!120 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!121 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!122 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!123 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!124 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!125 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!126 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!127 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!128 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!129 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!130 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!131 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!132 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!133 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!134 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!135 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!136 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!137 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!138 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!139 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!140 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!141 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!142 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!143 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!144 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!145 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!146 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!147 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!148 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!149 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!150 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!151 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!152 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!153 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!154 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!155 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!156 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!157 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!158 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!159 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!160 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!161 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!162 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!163 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!164 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!165 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!166 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!167 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!168 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!169 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!170 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!171 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!172 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!173 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!174 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!175 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!176 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!177 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!178 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!179 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!180 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!181 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!182 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!183 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!184 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!185 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!186 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!187 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!188 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!189 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!190 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!191 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!192 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!193 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!194 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!195 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!196 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!197 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!198 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!199 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!200 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!201 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!202 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!203 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!204 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!205 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!206 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!207 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!208 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!209 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!210 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!211 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!212 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!213 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!214 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!215 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!216 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!217 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!218 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!219 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!220 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!221 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!222 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!223 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!224 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!225 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!226 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!227 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!228 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!229 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!230 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!231 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!232 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!233 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!234 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!235 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!236 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!237 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!238 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!239 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!240 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!241 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!242 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!243 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!244 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!245 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!246 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!247 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!248 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!249 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!250 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!251 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!252 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!253 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!255 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!256 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!257 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!258 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!259 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!260 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!261 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!262 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!263 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!264 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!265 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!266 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!267 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!268 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!269 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!270 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!271 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!272 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!273 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!274 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!275 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!276 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!277 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!278 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!279 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!280 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!281 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!282 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!283 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!284 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!285 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!286 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!287 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!288 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!290 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!291 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!292 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!294 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!295 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!296 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!297 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!298 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!299 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!300 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!301 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!302 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!303 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!304 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!305 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!307 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!308 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!310 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!311 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!312 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!313 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!314 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!315 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!317 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!318 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!320 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!321 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!322 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!323 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!324 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!325 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!326 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!327 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!328 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!329 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!330 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!331 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!332 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!333 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!334 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!335 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!336 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!337 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!338 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!339 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!340 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!341 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!342 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!343 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!344 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!345 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!346 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!347 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!348 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!349 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!350 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!351 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!352 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!353 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!354 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!355 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!356 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!357 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!358 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!359 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!360 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!361 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!362 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!363 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!364 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!365 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (max_data_val |X0:cid|) 0)))) "
"      (a!366 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (num_queued_frames |X0:cid|) 0)))) "
"      (a!367 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (conn_total_data |X0:cid|) 0)))) "
"      (a!368 (forall ((|X0:initial_max_data| initial_max_data)) "
"               (not (< (initial_max_data.stream_pos_32 |X0:initial_max_data|) 0)))) "
"      (a!369 (forall ((|X0:cid| (_ BitVec 2)) (|X1:stream_id| (_ BitVec 16))) "
"               (not (< (max_stream_data_val |X0:cid| |X1:stream_id|) 0)))) "
"      (a!370 (forall ((|X0:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (< (initial_max_stream_data_bidi_local.stream_pos_32 "
"                         |X0:initial_max_stream_data_bidi_local|) "
"                       0)))) "
"      (a!371 (forall ((|X0:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (< (initial_max_stream_data_uni.stream_pos_32 "
"                         |X0:initial_max_stream_data_uni|) "
"                       0)))) "
"      (a!372 (forall ((|X0:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (< (initial_max_stream_data_bidi_remote.stream_pos_32 "
"                         |X0:initial_max_stream_data_bidi_remote|) "
"                       0)))) "
"      (a!373 (forall ((|X0:cid| (_ BitVec 2)) (|X1:stream_id| (_ BitVec 16))) "
"               (not (< (stream_app_data_end |X0:cid| |X1:stream_id|) 0)))) "
"      (a!374 (forall ((|X0:cid| (_ BitVec 2)) (|X1:stream_id| (_ BitVec 16))) "
"               (not (< (stream_length |X0:cid| |X1:stream_id|) 0))))) "
"  (and (= |__new_loc:offset| "
"          (ite |__fml:f__frame.stream.off| |__fml:f__frame.stream.offset| 0)) "
"       (= |__new_loc:tp_a| (trans_params |__fml:dcid|)) "
"       (= |__m_fml:max_a| (ite __ts0_c a!1 (ite __ts0__ts0_b_a a!2 a!3))) "
"       a!4 "
"       a!5 "
"       (= __ts0_c (= (get_stream_kind |__fml:f__frame.stream.id|) unidir)) "
"       (= |__ts0__new_loc:msdv| "
"          (max_stream_data_val |__fml:dcid| |__fml:f__frame.stream.id|)) "
"       a!6 "
"       (= __ts0_a_a "
"          (max_stream_data_set |__fml:dcid| |__fml:f__frame.stream.id|)) "
"       (= |__new_loc:tp| (trans_params |__fml:dcid|)) "
"       a!7 "
"       a!8 "
"       (= |__ts0__new_loc:smax| (max_data_val |__fml:dcid|)) "
"       (= __ts0_a_a_a (max_data_set |__fml:dcid|)) "
"       a!9 "
"       (= |__new_loc:alt_max| "
"          (+ |__new_fml:max| "
"             (stream_length |__fml:dcid| |__fml:f__frame.stream.id|))) "
"       (= |__new_fml:max_a| "
"          (ite (< |__new_loc:alt_max| |__m_fml:max_c|) "
"               |__new_loc:alt_max| "
"               |__m_fml:max_c|)) "
"       (= |__m_fml:ok| or) "
"       (= |__new_loc:tp_b| (trans_params |__fml:dcid|)) "
"       (= |__new_loc:kind| (get_stream_kind |__fml:f__frame.stream.id|)) "
"       (= |__new_loc:idhi| (bvsdiv |__fml:f__frame.stream.id| #x0004)) "
"       (= __ts0__ts0_a "
"          (ite __ts0__ts0_b "
"               (initial_max_stream_id_uni.is_set |__new_loc:tp_b|) "
"               (initial_max_stream_id_bidi.is_set |__new_loc:tp_b|))) "
"       (= |__new_fml:ok| "
"          (ite __ts0_c_a "
"               a!10 "
"               (stream_seen |__fml:dcid| |__fml:f__frame.stream.id|))) "
"       (= |__ts0__m_fml:ok| (ite __ts0__ts0_b a!11 a!12)) "
"       (= __ts0__ts0_b (= |__new_loc:kind| unidir)) "
"       (= __ts0_c_a a!13) "
"       (connected |__fml:dcid|) "
"       (= (connected_to |__fml:dcid|) |__fml:scid|) "
"       (= |__fml:e| quic_packet_type.one_rtt) "
"       (established_1rtt_keys |__fml:scid|) "
"       (=> (> (num_queued_frames |__fml:scid|) 0) "
"           (= |__fml:e| (queued_level |__fml:scid|))) "
"       (not (conn_closed |__fml:scid|)) "
"       (<= (+ |__new_loc:offset| |__fml:f__frame.stream.length|) "
"           (stream_app_data_end |__fml:dcid| |__fml:f__frame.stream.id|)) "
"       a!14 "
"       (conn_seen |__fml:scid|) "
"       (<= (+ |__new_loc:offset| |__fml:f__frame.stream.length|) "
"           |__new_fml:max_a|) "
"       (=> (stream_reset |__fml:dcid| |__fml:f__frame.stream.id|) "
"           (<= (+ |__new_loc:offset| |__fml:f__frame.stream.length|) "
"               (stream_length |__fml:dcid| |__fml:f__frame.stream.id|))) "
"       |__new_fml:ok| "
"       (or (not _generating) (= |__fml:scid| the_cid)) "
"       (or (not _generating) (connected the_cid)) "
"       (or (not _generating) (= |__fml:dcid| (connected_to the_cid))) "
"       (or (not _generating) |__fml:f__frame.stream.len|) "
"       (or (not _generating) |__fml:f__frame.stream.off|) "
"       (or (not _generating) (> |__fml:f__frame.stream.length| 0)) "
"       (or (not _generating) "
"           (= |__fml:f__frame.stream.offset| "
"              (stream_length |__fml:dcid| |__fml:f__frame.stream.id|))) "
"       (or (not _generating) a!15) "
"       (= bit.one #b1) "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348 "
"       a!349 "
"       a!350 "
"       a!351 "
"       a!352 "
"       a!353 "
"       a!354 "
"       a!355 "
"       a!356 "
"       a!357 "
"       a!358 "
"       a!359 "
"       a!360 "
"       a!361 "
"       a!362 "
"       a!363 "
"       a!364 "
"       (not (< |__m_fml:max_c| 0)) "
"       (not (< |__new_loc:offset| 0)) "
"       a!365 "
"       a!366 "
"       a!367 "
"       a!368 "
"       (not (< |__m_fml:max_a| 0)) "
"       (not (< |__m_fml:max_b_a| 0)) "
"       a!369 "
"       a!370 "
"       (not (< |__fml:f__frame.stream.length| 0)) "
"       (not (< |__new_fml:max| 0)) "
"       (not (< |__new_fml:max_a| 0)) "
"       a!371 "
"       (not (< |__m_fml:max_a_a| 0)) "
"       (not (< |__ts0__new_loc:msdv| 0)) "
"       a!372 "
"       (not (< |__ts0__new_loc:smax| 0)) "
"       a!373 "
"       (not (< |__fml:f__frame.stream.offset| 0)) "
"       (not (< |__new_loc:alt_max| 0)) "
"       a!374)))");
}
bool ext__frame__stream__handle_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_length",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_length)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_kind")),__to_solver(*this,apply("max_stream_set",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_kind"))),obj.max_stream_set)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("max_stream_data_val",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.max_stream_data_val)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_seen",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_seen)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_app_data_end",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_app_data_end)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("max_data_val",ctx.constant("X__0",sort("cid"))),obj.max_data_val)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("max_data_set",ctx.constant("X__0",sort("cid"))),obj.max_data_set)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("num_queued_frames",ctx.constant("X__0",sort("cid"))),obj.num_queued_frames)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_level",ctx.constant("X__0",sort("cid"))),obj.queued_level)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("conn_total_data",ctx.constant("X__0",sort("cid"))),obj.conn_total_data)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("conn_closed",ctx.constant("X__0",sort("cid"))),obj.conn_closed)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_reset",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_reset)));
    slvr.add(__to_solver(*this,apply("the_cid"),obj.the_cid));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("is_client",ctx.constant("X__0",sort("cid"))),obj.is_client)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_app_data_finished",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_app_data_finished)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("conn_seen",ctx.constant("X__0",sort("cid"))),obj.conn_seen)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("trans_params",ctx.constant("X__0",sort("cid"))),obj.trans_params)));
    slvr.add(__to_solver(*this,apply("_generating"),obj._generating));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("max_stream_data_set",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.max_stream_data_set)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_kind")),__to_solver(*this,apply("max_stream",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_kind"))),obj.max_stream)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("established_1rtt_keys",ctx.constant("X__0",sort("cid"))),obj.established_1rtt_keys)));
    alits.clear();
    randomize("__fml:f__frame.stream.len");
    __randomize<quic_server_test_connection_close::stream_data>(*this,apply("__fml:f__frame.stream.data"));
    randomize("__fml:f__frame.stream.fin");
    randomize("__fml:f__frame.stream.length");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"));
    randomize("__fml:f__frame.stream.off");
    randomize("__fml:f__frame.stream.offset");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    randomize("__fml:e");
    randomize("__fml:f__frame.stream.id");

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        f.len = (bool)eval_apply("__fml:f__frame.stream.len");
        f.fin = (bool)eval_apply("__fml:f__frame.stream.fin");
        f.length = (unsigned long long)eval_apply("__fml:f__frame.stream.length");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"),scid);
        f.off = (bool)eval_apply("__fml:f__frame.stream.off");
        f.offset = (unsigned long long)eval_apply("__fml:f__frame.stream.offset");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
        e = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:e");
        f.id = (unsigned)eval_apply("__fml:f__frame.stream.id");
    hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,quic_server_test_connection_close::stream_data> (&stream_app_data) = obj.stream_app_data;
    unsigned long long __new_loc__offset;
        __new_loc__offset = (f.off ? f.offset : 0);
        f.data = obj.stream_data__segment(stream_app_data[quic_server_test_connection_close::__tup__cid__unsigned(dcid,f.id)],__new_loc__offset,(__new_loc__offset + f.length));

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__frame__stream__handle_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> frame.stream.handle(" << f << ","  << scid << ","  << dcid << ","  << e << ")" << std::endl;
    obj.ext__frame__stream__handle(f,scid,dcid,e);
}
class ext__tls_recv_event_gen : public gen {
  public:
    unsigned long long lo;
    quic_server_test_connection_close::cid dcid;
    unsigned long long hi;
    quic_server_test_connection_close::quic_packet_type e;
    quic_server_test_connection_close::ip__endpoint src;
    quic_server_test_connection_close::ip__endpoint dst;
    quic_server_test_connection_close::cid scid;
    ext__tls_recv_event_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__tls_recv_event_gen::ext__tls_recv_event_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__fml:scid","cid");
    mk_const("__fml:lo","stream_pos");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    mk_const("__fml:dst","ip.endpoint");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__fml:e","quic_packet_type");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    mk_const("__fml:hi","stream_pos");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    mk_const("__fml:src","ip.endpoint");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!2 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!3 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!4 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!5 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!6 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                    (|X:frame| frame) "
"                    (|Y:frame.max_stream_data| frame.max_stream_data)) "
"             (=> (and (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Y:frame.max_stream_data|) "
"                      (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Z:frame.max_stream_data|)) "
"                 (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!7 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Y:frame.stream_id_blocked|) "
"                      (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Z:frame.stream_id_blocked|)) "
"                 (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!8 (forall ((|Y:frame.crypto| frame.crypto) "
"                    (|X:frame| frame) "
"                    (|Z:frame.crypto| frame.crypto)) "
"             (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                      (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                 (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!9 (forall ((|Z:frame.ping| frame.ping) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ping| frame.ping)) "
"             (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                      (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                 (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!10 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!11 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!12 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!13 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!14 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!15 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!16 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!17 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!18 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!19 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!20 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!21 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!22 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!23 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!24 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!40 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!41 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!42 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!43 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!44 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!45 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!46 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!47 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!48 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!54 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!55 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!56 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!57 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!58 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!59 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!60 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!61 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!62 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!63 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!64 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!65 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!66 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!67 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!68 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!69 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!71 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!72 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!73 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!74 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!75 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!76 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!77 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!78 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!79 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!80 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!81 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!82 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!83 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!84 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!85 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!86 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!87 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!88 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!90 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!94 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!95 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!96 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!97 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!98 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!99 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!100 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!102 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!103 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!104 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!105 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!106 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!107 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!108 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!109 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!110 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!111 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!113 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!114 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!115 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!116 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!117 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!118 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!119 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!120 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!121 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!122 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!123 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!125 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!126 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!127 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!128 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!129 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!130 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!131 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!132 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!133 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!134 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!135 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!136 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!138 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!139 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!140 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!141 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!142 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!143 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!144 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!145 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!146 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!147 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!148 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!149 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!150 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!152 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!153 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!154 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!155 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!156 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!157 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!158 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!159 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!160 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!161 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!162 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!175 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!176 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!177 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!178 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!179 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!180 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!181 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!183 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!184 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!185 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!186 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!187 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!188 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!189 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!190 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!191 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!192 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!193 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!194 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!195 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!196 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!197 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!198 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!199 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!200 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!201 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!202 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!203 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!204 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!205 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!206 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!207 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!208 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!210 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!211 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!212 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!213 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!214 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!215 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!216 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!217 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!218 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!221 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!224 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!225 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!227 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!228 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!229 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!230 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!231 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!232 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!233 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!234 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!235 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!236 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!237 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!238 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!239 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!240 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!241 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!242 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!243 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!244 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!245 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!246 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!258 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!259 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!260 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!261 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!262 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!263 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!264 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!265 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!266 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!272 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!273 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!274 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!275 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!277 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!278 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!279 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!280 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!281 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!285 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!286 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!287 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!288 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!290 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!291 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!292 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!294 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!295 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!296 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!298 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!299 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!300 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!301 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!302 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!303 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!304 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!305 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!307 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!308 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!310 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!311 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!313 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!315 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!317 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!318 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!320 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!321 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!322 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!323 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!324 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!325 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!326 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!335 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!336 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!337 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!338 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!340 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!341 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!342 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!343 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!344 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!345 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!346 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!347 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!348 (forall ((|X0:cid| (_ BitVec 2)) "
"                      (|X1:quic_packet_type| quic_packet_type)) "
"               (not (< (crypto_pos |X0:cid| |X1:quic_packet_type|) 0)))) "
"      (a!349 (forall ((|X0:cid| (_ BitVec 2)) "
"                      (|X1:quic_packet_type| quic_packet_type)) "
"               (not (< (crypto_length |X0:cid| |X1:quic_packet_type|) 0))))) "
"  (and (connected |__fml:dcid|) "
"       (= (connected_to |__fml:dcid|) |__fml:scid|) "
"       (< |__fml:lo| |__fml:hi|) "
"       (= |__fml:lo| (crypto_pos |__fml:dcid| |__fml:e|)) "
"       (<= |__fml:hi| (crypto_length |__fml:scid| |__fml:e|)) "
"       a!1 "
"       a!2 "
"       a!3 "
"       a!4 "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       (not (< |__fml:lo| 0)) "
"       a!348 "
"       a!349 "
"       (not (< |__fml:hi| 0)))))");
}
bool ext__tls_recv_event_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),__to_solver(*this,apply("crypto_pos",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type"))),obj.crypto_pos)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),__to_solver(*this,apply("crypto_length",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type"))),obj.crypto_length)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    alits.clear();
    randomize("__fml:lo");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    randomize("__fml:hi");
    randomize("__fml:e");
    __randomize<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:src"));
    __randomize<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:dst"));
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"));

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        lo = (unsigned long long)eval_apply("__fml:lo");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
        hi = (unsigned long long)eval_apply("__fml:hi");
        e = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:e");
                __from_solver<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:src"),src);
                __from_solver<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:dst"),dst);
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"),scid);

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__tls_recv_event_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> tls_recv_event(" << src << ","  << dst << ","  << scid << ","  << dcid << ","  << e << ","  << lo << ","  << hi << ")" << std::endl;
    obj.ext__tls_recv_event(src,dst,scid,dcid,e,lo,hi);
}
class ext__frame__path_response__handle_gen : public gen {
  public:
    quic_server_test_connection_close::quic_packet_type e;
    quic_server_test_connection_close::frame__path_response f;
    quic_server_test_connection_close::cid dcid;
    quic_server_test_connection_close::cid scid;
    ext__frame__path_response__handle_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__frame__path_response__handle_gen::ext__frame__path_response__handle_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    mk_const("__fml:f__frame.path_response.data","stream_data");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__fml:scid","cid");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__fml:e","quic_packet_type");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!2 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!3 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!4 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!5 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!6 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                    (|X:frame| frame) "
"                    (|Y:frame.max_stream_data| frame.max_stream_data)) "
"             (=> (and (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Y:frame.max_stream_data|) "
"                      (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Z:frame.max_stream_data|)) "
"                 (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!7 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Y:frame.stream_id_blocked|) "
"                      (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Z:frame.stream_id_blocked|)) "
"                 (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!8 (forall ((|Y:frame.crypto| frame.crypto) "
"                    (|X:frame| frame) "
"                    (|Z:frame.crypto| frame.crypto)) "
"             (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                      (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                 (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!9 (forall ((|Z:frame.ping| frame.ping) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ping| frame.ping)) "
"             (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                      (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                 (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!10 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!11 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!12 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!13 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!14 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!15 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!16 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!17 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!18 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!19 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!20 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!21 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!22 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!23 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!24 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!40 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!41 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!42 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!43 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!44 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!45 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!46 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!47 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!48 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!54 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!55 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!56 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!57 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!58 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!59 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!60 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!61 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!62 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!63 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!64 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!65 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!66 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!67 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!68 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!69 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!71 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!72 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!73 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!74 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!75 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!76 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!77 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!78 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!79 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!80 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!81 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!82 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!83 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!84 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!85 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!86 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!87 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!88 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!90 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!94 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!95 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!96 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!97 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!98 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!99 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!100 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!102 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!103 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!104 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!105 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!106 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!107 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!108 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!109 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!110 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!111 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!113 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!114 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!115 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!116 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!117 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!118 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!119 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!120 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!121 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!122 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!123 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!125 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!126 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!127 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!128 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!129 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!130 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!131 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!132 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!133 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!134 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!135 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!136 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!138 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!139 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!140 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!141 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!142 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!143 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!144 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!145 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!146 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!147 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!148 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!149 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!150 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!152 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!153 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!154 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!155 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!156 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!157 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!158 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!159 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!160 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!161 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!162 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!175 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!176 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!177 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!178 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!179 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!180 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!181 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!183 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!184 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!185 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!186 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!187 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!188 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!189 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!190 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!191 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!192 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!193 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!194 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!195 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!196 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!197 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!198 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!199 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!200 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!201 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!202 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!203 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!204 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!205 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!206 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!207 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!208 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!210 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!211 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!212 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!213 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!214 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!215 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!216 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!217 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!218 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!221 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!224 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!225 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!227 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!228 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!229 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!230 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!231 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!232 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!233 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!234 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!235 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!236 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!237 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!238 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!239 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!240 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!241 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!242 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!243 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!244 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!245 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!246 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!258 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!259 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!260 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!261 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!262 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!263 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!264 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!265 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!266 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!272 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!273 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!274 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!275 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!277 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!278 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!279 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!280 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!281 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!285 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!286 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!287 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!288 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!290 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!291 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!292 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!294 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!295 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!296 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!298 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!299 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!300 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!301 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!302 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!303 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!304 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!305 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!307 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!308 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!310 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!311 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!313 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!315 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!317 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!318 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!320 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!321 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!322 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!323 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!324 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!325 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!326 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!335 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!336 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!337 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!338 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!340 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!341 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!342 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!343 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!344 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!345 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!346 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!347 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!348 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (num_queued_frames |X0:cid|) 0)))) "
"      (a!349 (forall ((|X0:stream_data| stream_data)) "
"               (not (< (stream_data.end |X0:stream_data|) 0))))) "
"  (and (connected |__fml:dcid|) "
"       (= (connected_to |__fml:dcid|) |__fml:scid|) "
"       (= |__fml:e| quic_packet_type.one_rtt) "
"       (established_1rtt_keys |__fml:scid|) "
"       (=> (> (num_queued_frames |__fml:scid|) 0) "
"           (= |__fml:e| (queued_level |__fml:scid|))) "
"       (= (stream_data.end |__fml:f__frame.path_response.data|) 8) "
"       (path_challenge_pending |__fml:scid| |__fml:f__frame.path_response.data|) "
"       a!1 "
"       a!2 "
"       a!3 "
"       a!4 "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348 "
"       a!349)))");
}
bool ext__frame__path_response__handle_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("num_queued_frames",ctx.constant("X__0",sort("cid"))),obj.num_queued_frames)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_level",ctx.constant("X__0",sort("cid"))),obj.queued_level)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_data")),__to_solver(*this,apply("path_challenge_pending",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_data"))),obj.path_challenge_pending)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("established_1rtt_keys",ctx.constant("X__0",sort("cid"))),obj.established_1rtt_keys)));
    alits.clear();
    randomize("__fml:e");
    __randomize<quic_server_test_connection_close::stream_data>(*this,apply("__fml:f__frame.path_response.data"));
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"));

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        e = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:e");
                __from_solver<quic_server_test_connection_close::stream_data>(*this,apply("__fml:f__frame.path_response.data"),f.data);
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"),scid);

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__frame__path_response__handle_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> frame.path_response.handle(" << f << ","  << scid << ","  << dcid << ","  << e << ")" << std::endl;
    obj.ext__frame__path_response__handle(f,scid,dcid,e);
}
class ext__client_send_event_gen : public gen {
  public:
    unsigned s;
    quic_server_test_connection_close::cid dcid;
    quic_server_test_connection_close::ip__endpoint src;
    unsigned long long end;
    quic_server_test_connection_close::ip__endpoint dst;
    ext__client_send_event_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__client_send_event_gen::ext__client_send_event_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    mk_const("__fml:end","stream_pos");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    mk_const("__fml:dst","ip.endpoint");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__fml:s","stream_id");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    mk_const("__fml:src","ip.endpoint");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!2 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!3 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!4 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!5 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!6 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                    (|X:frame| frame) "
"                    (|Y:frame.max_stream_data| frame.max_stream_data)) "
"             (=> (and (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Y:frame.max_stream_data|) "
"                      (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Z:frame.max_stream_data|)) "
"                 (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!7 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Y:frame.stream_id_blocked|) "
"                      (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Z:frame.stream_id_blocked|)) "
"                 (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!8 (forall ((|Y:frame.crypto| frame.crypto) "
"                    (|X:frame| frame) "
"                    (|Z:frame.crypto| frame.crypto)) "
"             (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                      (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                 (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!9 (forall ((|Z:frame.ping| frame.ping) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ping| frame.ping)) "
"             (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                      (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                 (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!10 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!11 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!12 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!13 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!14 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!15 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!16 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!17 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!18 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!19 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!20 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!21 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!22 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!23 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!24 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!40 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!41 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!42 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!43 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!44 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!45 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!46 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!47 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!48 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!54 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!55 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!56 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!57 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!58 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!59 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!60 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!61 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!62 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!63 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!64 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!65 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!66 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!67 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!68 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!69 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!71 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!72 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!73 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!74 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!75 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!76 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!77 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!78 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!79 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!80 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!81 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!82 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!83 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!84 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!85 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!86 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!87 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!88 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!90 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!94 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!95 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!96 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!97 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!98 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!99 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!100 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!102 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!103 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!104 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!105 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!106 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!107 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!108 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!109 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!110 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!111 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!113 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!114 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!115 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!116 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!117 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!118 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!119 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!120 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!121 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!122 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!123 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!125 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!126 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!127 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!128 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!129 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!130 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!131 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!132 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!133 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!134 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!135 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!136 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!138 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!139 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!140 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!141 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!142 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!143 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!144 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!145 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!146 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!147 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!148 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!149 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!150 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!152 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!153 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!154 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!155 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!156 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!157 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!158 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!159 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!160 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!161 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!162 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!175 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!176 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!177 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!178 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!179 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!180 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!181 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!183 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!184 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!185 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!186 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!187 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!188 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!189 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!190 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!191 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!192 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!193 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!194 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!195 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!196 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!197 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!198 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!199 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!200 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!201 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!202 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!203 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!204 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!205 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!206 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!207 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!208 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!210 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!211 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!212 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!213 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!214 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!215 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!216 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!217 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!218 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!221 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!224 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!225 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!227 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!228 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!229 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!230 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!231 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!232 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!233 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!234 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!235 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!236 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!237 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!238 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!239 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!240 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!241 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!242 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!243 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!244 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!245 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!246 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!258 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!259 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!260 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!261 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!262 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!263 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!264 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!265 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!266 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!272 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!273 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!274 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!275 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!277 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!278 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!279 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!280 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!281 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!285 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!286 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!287 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!288 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!290 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!291 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!292 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!294 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!295 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!296 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!298 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!299 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!300 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!301 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!302 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!303 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!304 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!305 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!307 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!308 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!310 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!311 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!313 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!315 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!317 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!318 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!320 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!321 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!322 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!323 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!324 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!325 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!326 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!335 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!336 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!337 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!338 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!340 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!341 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!342 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!343 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!344 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!345 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!346 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!347 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!348 (forall ((|X0:stream_data| stream_data)) "
"               (not (< (stream_data.end |X0:stream_data|) 0)))) "
"      (a!349 (forall ((|X0:cid| (_ BitVec 2)) (|X1:stream_id| (_ BitVec 16))) "
"               (not (< (stream_app_data_end |X0:cid| |X1:stream_id|) 0)))) "
"      (a!350 (forall ((|X0:cid| (_ BitVec 2)) (|X1:stream_id| (_ BitVec 16))) "
"               (not (< (stream_length |X0:cid| |X1:stream_id|) 0))))) "
"  (and (= |__fml:s| current_stream) "
"       (or (= |__fml:src| client.ep) (= |__fml:src| client_alt)) "
"       (connected the_cid) "
"       (= |__fml:dcid| (connected_to the_cid)) "
"       (= (stream_length |__fml:dcid| |__fml:s|) "
"          (stream_app_data_end |__fml:dcid| |__fml:s|)) "
"       (< (stream_length |__fml:dcid| |__fml:s|) |__fml:end|) "
"       (<= |__fml:end| (stream_data.end http_request)) "
"       (bvult current_stream #x003c) "
"       a!1 "
"       a!2 "
"       a!3 "
"       a!4 "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       (not (< |__fml:end| 0)) "
"       a!348 "
"       a!349 "
"       a!350)))");
}
bool ext__client_send_event_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_length",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_length)));
    slvr.add(__to_solver(*this,apply("ip.endpoint.protocol",apply("client_alt")),obj.client_alt.protocol));
    slvr.add(__to_solver(*this,apply("ip.endpoint.addr",apply("client_alt")),obj.client_alt.addr));
    slvr.add(__to_solver(*this,apply("ip.endpoint.port",apply("client_alt")),obj.client_alt.port));
    slvr.add(__to_solver(*this,apply("current_stream"),obj.current_stream));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id")),__to_solver(*this,apply("stream_app_data_end",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("stream_id"))),obj.stream_app_data_end)));
    slvr.add(__to_solver(*this,apply("http_request"),obj.http_request));
    slvr.add(__to_solver(*this,apply("ip.endpoint.protocol",apply("client.ep")),obj.client__ep.protocol));
    slvr.add(__to_solver(*this,apply("ip.endpoint.addr",apply("client.ep")),obj.client__ep.addr));
    slvr.add(__to_solver(*this,apply("ip.endpoint.port",apply("client.ep")),obj.client__ep.port));
    slvr.add(__to_solver(*this,apply("the_cid"),obj.the_cid));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    alits.clear();
    randomize("__fml:s");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    __randomize<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:src"));
    randomize("__fml:end");
    __randomize<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:dst"));

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        s = (unsigned)eval_apply("__fml:s");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
                __from_solver<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:src"),src);
        end = (unsigned long long)eval_apply("__fml:end");
    quic_server_test_connection_close::ip__endpoint (&server__ep) = obj.server__ep;
        dst = server__ep;

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__client_send_event_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> client_send_event(" << src << ","  << dst << ","  << dcid << ","  << s << ","  << end << ")" << std::endl;
    obj.ext__client_send_event(src,dst,dcid,s,end);
}
class ext__frame__connection_close__handle_gen : public gen {
  public:
    quic_server_test_connection_close::frame__connection_close f;
    quic_server_test_connection_close::cid dcid;
    quic_server_test_connection_close::quic_packet_type e;
    quic_server_test_connection_close::cid scid;
    ext__frame__connection_close__handle_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__frame__connection_close__handle_gen::ext__frame__connection_close__handle_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    mk_const("__fml:f__frame.connection_close.frame_type","error_code");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__fml:scid","cid");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    mk_const("__fml:f__frame.connection_close.err_code","error_code");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__fml:e","quic_packet_type");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    mk_const("__fml:f__frame.connection_close.reason_phrase","stream_data");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    mk_const("__fml:f__frame.connection_close.reason_phrase_length","stream_pos");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!2 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!3 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!4 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!5 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!6 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                    (|X:frame| frame) "
"                    (|Y:frame.max_stream_data| frame.max_stream_data)) "
"             (=> (and (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Y:frame.max_stream_data|) "
"                      (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Z:frame.max_stream_data|)) "
"                 (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!7 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Y:frame.stream_id_blocked|) "
"                      (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Z:frame.stream_id_blocked|)) "
"                 (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!8 (forall ((|Y:frame.crypto| frame.crypto) "
"                    (|X:frame| frame) "
"                    (|Z:frame.crypto| frame.crypto)) "
"             (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                      (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                 (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!9 (forall ((|Z:frame.ping| frame.ping) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ping| frame.ping)) "
"             (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                      (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                 (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!10 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!11 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!12 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!13 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!14 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!15 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!16 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!17 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!18 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!19 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!20 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!21 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!22 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!23 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!24 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!40 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!41 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!42 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!43 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!44 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!45 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!46 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!47 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!48 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!54 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!55 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!56 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!57 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!58 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!59 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!60 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!61 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!62 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!63 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!64 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!65 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!66 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!67 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!68 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!69 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!71 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!72 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!73 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!74 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!75 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!76 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!77 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!78 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!79 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!80 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!81 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!82 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!83 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!84 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!85 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!86 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!87 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!88 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!90 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!94 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!95 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!96 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!97 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!98 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!99 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!100 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!102 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!103 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!104 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!105 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!106 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!107 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!108 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!109 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!110 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!111 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!113 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!114 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!115 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!116 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!117 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!118 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!119 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!120 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!121 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!122 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!123 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!125 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!126 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!127 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!128 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!129 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!130 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!131 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!132 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!133 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!134 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!135 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!136 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!138 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!139 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!140 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!141 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!142 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!143 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!144 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!145 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!146 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!147 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!148 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!149 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!150 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!152 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!153 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!154 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!155 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!156 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!157 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!158 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!159 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!160 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!161 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!162 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!175 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!176 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!177 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!178 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!179 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!180 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!181 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!183 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!184 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!185 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!186 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!187 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!188 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!189 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!190 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!191 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!192 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!193 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!194 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!195 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!196 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!197 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!198 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!199 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!200 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!201 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!202 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!203 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!204 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!205 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!206 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!207 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!208 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!210 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!211 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!212 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!213 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!214 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!215 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!216 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!217 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!218 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!221 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!224 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!225 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!227 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!228 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!229 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!230 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!231 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!232 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!233 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!234 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!235 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!236 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!237 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!238 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!239 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!240 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!241 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!242 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!243 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!244 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!245 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!246 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!258 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!259 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!260 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!261 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!262 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!263 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!264 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!265 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!266 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!272 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!273 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!274 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!275 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!277 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!278 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!279 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!280 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!281 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!285 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!286 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!287 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!288 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!290 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!291 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!292 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!294 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!295 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!296 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!298 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!299 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!300 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!301 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!302 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!303 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!304 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!305 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!307 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!308 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!310 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!311 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!313 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!315 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!317 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!318 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!320 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!321 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!322 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!323 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!324 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!325 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!326 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!335 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!336 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!337 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!338 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!340 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!341 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!342 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!343 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!344 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!345 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!346 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!347 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!348 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (num_queued_frames |X0:cid|) 0))))) "
"  (and (connected |__fml:dcid|) "
"       (= (connected_to |__fml:dcid|) |__fml:scid|) "
"       (=> (= |__fml:e| quic_packet_type.one_rtt) "
"           (established_1rtt_keys |__fml:scid|)) "
"       (=> (= |__fml:e| quic_packet_type.handshake) "
"           (established_handshake_keys |__fml:scid|)) "
"       (=> (> (num_queued_frames |__fml:scid|) 0) "
"           (= |__fml:e| (queued_level |__fml:scid|))) "
"       (connected |__fml:scid|) "
"       (= (connected_to |__fml:scid|) |__fml:dcid|) "
"       (or (not _generating) (= |__fml:scid| the_cid)) "
"       (or _generating (= |__fml:f__frame.connection_close.err_code| #x0000)) "
"       a!1 "
"       a!2 "
"       a!3 "
"       a!4 "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348)))");
}
bool ext__frame__connection_close__handle_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("num_queued_frames",ctx.constant("X__0",sort("cid"))),obj.num_queued_frames)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_level",ctx.constant("X__0",sort("cid"))),obj.queued_level)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("established_handshake_keys",ctx.constant("X__0",sort("cid"))),obj.established_handshake_keys)));
    slvr.add(__to_solver(*this,apply("the_cid"),obj.the_cid));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(__to_solver(*this,apply("_generating"),obj._generating));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("established_1rtt_keys",ctx.constant("X__0",sort("cid"))),obj.established_1rtt_keys)));
    alits.clear();
    randomize("__fml:f__frame.connection_close.frame_type");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    randomize("__fml:e");
    randomize("__fml:f__frame.connection_close.reason_phrase_length");
    randomize("__fml:f__frame.connection_close.err_code");
    __randomize<quic_server_test_connection_close::stream_data>(*this,apply("__fml:f__frame.connection_close.reason_phrase"));
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"));

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        f.frame_type = (unsigned)eval_apply("__fml:f__frame.connection_close.frame_type");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
        e = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:e");
        f.err_code = (unsigned)eval_apply("__fml:f__frame.connection_close.err_code");
                __from_solver<quic_server_test_connection_close::stream_data>(*this,apply("__fml:f__frame.connection_close.reason_phrase"),f.reason_phrase);
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"),scid);
        f.reason_phrase_length = obj.stream_data__end(f.reason_phrase);

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__frame__connection_close__handle_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> frame.connection_close.handle(" << f << ","  << scid << ","  << dcid << ","  << e << ")" << std::endl;
    obj.ext__frame__connection_close__handle(f,scid,dcid,e);
}
class ext__frame__ack__handle_gen : public gen {
  public:
    quic_server_test_connection_close::frame__ack f;
    quic_server_test_connection_close::cid dcid;
    quic_server_test_connection_close::quic_packet_type e;
    quic_server_test_connection_close::cid scid;
    ext__frame__ack__handle_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__frame__ack__handle_gen::ext__frame__ack__handle_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    mk_const("__ts0__new_loc:jdx","pkt_num");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    mk_const("__ts0__new_loc:ack_block","frame.ack.block");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    mk_const("__fml:f__frame.ack.ack_blocks","frame.ack.block.arr");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__fml:scid","cid");
    mk_const("__fml:f__frame.ack.largest_acked","pkt_num");
    mk_const("__ts0_c","Bool");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    mk_const("__ts0__new_loc:upper","pkt_num");
    mk_const("__new_loc:some_new_ack","Bool");
    mk_const("__ts0__ts0_a_c","Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    mk_const("__ts0__new_fml:y","frame.ack.block.idx");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    mk_const("__ts0__ts0__ts0_a_a","Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__fml:f__frame.ack.ack_delay","microsecs");
    mk_const("__fml:e","quic_packet_type");
    mk_const("__new_loc:idx","frame.ack.block.idx");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    mk_const("__ts0__ts0_b","Bool");
    mk_const("__m_loc:some_new_ack","Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    mk_const("__ts0__ts0__ts0_a_b","Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    mk_const("__new_loc:last","pkt_num");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (= |__new_loc:last| "
"              (ite __ts0_c "
"                   (bvsub |__ts0__new_loc:upper| "
"                          (frame.ack.block.blocks |__ts0__new_loc:ack_block|)) "
"                   |__fml:f__frame.ack.largest_acked|))) "
"      (a!2 (bvsub |__fml:f__frame.ack.largest_acked| "
"                  (ite (> 0 0) "
"                       (bvadd (frame.ack.block.gap |__ts0__new_loc:ack_block|) "
"                              #x00000002) "
"                       #x00000000))) "
"      (a!3 (= |__new_loc:some_new_ack| "
"              (ite __ts0_c "
"                   (ite __ts0__ts0_b "
"                        (or __ts0__ts0__ts0_a_a |__m_loc:some_new_ack|) "
"                        |__m_loc:some_new_ack|) "
"                   |__m_loc:some_new_ack|))) "
"      (a!4 (or (not __ts0_c) "
"               (=> (> 0 0) "
"                   (bvult (frame.ack.block.gap |__ts0__new_loc:ack_block|) "
"                          (bvsub |__fml:f__frame.ack.largest_acked| #x00000001))))) "
"      (a!5 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!6 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!7 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!8 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!9 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!10 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Y:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!11 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!12 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                  (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!13 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                       (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                  (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!14 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!15 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!16 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!17 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!18 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!19 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!20 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!21 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!22 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!23 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!24 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!40 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!41 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!42 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!43 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!44 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!45 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!46 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!47 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!48 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!54 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!55 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!56 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!57 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!58 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!59 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!60 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!61 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!62 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!63 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!64 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!65 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!66 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!67 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!68 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!69 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!70 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!71 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!72 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!73 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!74 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!75 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!76 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!77 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!78 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!79 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!80 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!81 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!82 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!83 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!84 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!85 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!86 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!87 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!88 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!90 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!94 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!95 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!96 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!97 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!98 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!99 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!100 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!102 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!103 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!104 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!105 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!106 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!107 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!108 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!109 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!110 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!111 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!113 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!114 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!115 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!116 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!117 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!118 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!119 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!120 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!121 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!122 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!123 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!125 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!126 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!127 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!128 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!129 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!130 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!131 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!132 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!133 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!134 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!135 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!136 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!138 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!139 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!140 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!141 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!142 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!143 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!144 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!145 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!146 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!147 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!148 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!149 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!150 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!152 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!153 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!154 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!155 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!156 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!157 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!158 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!159 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!160 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!161 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!162 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!175 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!176 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!177 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!178 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!179 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!180 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!181 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!183 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!184 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!185 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!186 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!187 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!188 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!189 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!190 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!191 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!192 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!193 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!194 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!195 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!196 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!197 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!198 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!199 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!200 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!201 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!202 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!203 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!204 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!205 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!206 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!207 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!208 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!210 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!211 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!212 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!213 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!214 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!215 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!216 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!217 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!218 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!221 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!224 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!225 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!227 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!228 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!229 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!230 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!231 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!232 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!233 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!234 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!235 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!236 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!237 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!238 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!239 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!240 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!241 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!242 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!243 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!244 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!245 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!246 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!258 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!259 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!260 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!261 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!262 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!263 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!264 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!265 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!266 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!272 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!273 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!274 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!275 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!277 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!278 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!279 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!280 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!281 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!285 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!286 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!287 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!288 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!290 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!291 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!292 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!294 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!295 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!296 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!298 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!299 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!300 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!301 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!302 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!303 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!304 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!305 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!307 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!308 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!309 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!310 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!311 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!313 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!315 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!317 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!318 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!319 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!320 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!321 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!322 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!323 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!324 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!325 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!326 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!335 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!336 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!337 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!338 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!340 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!341 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!342 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!343 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!344 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!345 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!346 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!347 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!348 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!349 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!350 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!351 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!352 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (num_queued_frames |X0:cid|) 0)))) "
"      (a!353 (forall ((|X0:frame.ack.block.arr| frame.ack.block.arr)) "
"               (not (< (frame.ack.block.arr.end |X0:frame.ack.block.arr|) 0))))) "
"  (and (= |__m_loc:some_new_ack| or) "
"       (= |__ts0__new_loc:ack_block| "
"          (frame.ack.block.arr.value |__fml:f__frame.ack.ack_blocks| 0)) "
"       (= |__ts0__new_loc:jdx| "
"          (ite __ts0__ts0_b "
"               (bvadd |__new_loc:last| #x00000001) "
"               |__new_loc:last|)) "
"       a!1 "
"       (= |__ts0__new_loc:upper| a!2) "
"       (= __ts0__ts0__ts0_a_a "
"          (not (acked_pkt |__fml:dcid| |__fml:e| |__new_loc:last|))) "
"       a!3 "
"       (= __ts0__ts0_a_c "
"          (< |__new_loc:idx| "
"             (frame.ack.block.arr.end |__fml:f__frame.ack.ack_blocks|))) "
"       (= |__new_loc:idx| (ite __ts0_c |__ts0__new_fml:y| 0)) "
"       (= |__ts0__new_fml:y| (+ 0 1)) "
"       (= __ts0__ts0_b (bvule |__new_loc:last| |__ts0__new_loc:upper|)) "
"       (= __ts0__ts0__ts0_a_b "
"          (bvule |__ts0__new_loc:jdx| |__ts0__new_loc:upper|)) "
"       (= __ts0_c "
"          (< 0 (frame.ack.block.arr.end |__fml:f__frame.ack.ack_blocks|))) "
"       (connected |__fml:dcid|) "
"       (= (connected_to |__fml:dcid|) |__fml:scid|) "
"       (=> (= |__fml:e| quic_packet_type.handshake) "
"           (established_handshake_keys |__fml:scid|)) "
"       (=> (= |__fml:e| quic_packet_type.one_rtt) "
"           (established_1rtt_keys |__fml:scid|)) "
"       (=> (> (num_queued_frames |__fml:scid|) 0) "
"           (= |__fml:e| (queued_level |__fml:scid|))) "
"       (> (frame.ack.block.arr.end |__fml:f__frame.ack.ack_blocks|) 0) "
"       a!4 "
"       (or (not __ts0_c) "
"           (bvule (frame.ack.block.blocks |__ts0__new_loc:ack_block|) "
"                  |__ts0__new_loc:upper|)) "
"       (or (not __ts0_c) "
"           (not __ts0__ts0_b) "
"           (sent_pkt |__fml:dcid| |__fml:e| |__new_loc:last|)) "
"       (or (not __ts0_c) (not __ts0__ts0_b) (not __ts0__ts0__ts0_a_b) or) "
"       (or (not __ts0_c) (not __ts0__ts0_a_c) or) "
"       (or (not _generating) |__new_loc:some_new_ack|) "
"       (or (not _generating) (= |__fml:scid| the_cid)) "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348 "
"       a!349 "
"       a!350 "
"       a!351 "
"       a!352 "
"       (not (< |__new_loc:idx| 0)) "
"       (not (< |__ts0__new_fml:y| 0)) "
"       a!353)))");
}
bool ext__frame__ack__handle_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),ctx.constant("X__2",sort("pkt_num")),__to_solver(*this,apply("acked_pkt",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),ctx.constant("X__2",sort("pkt_num"))),obj.acked_pkt)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("num_queued_frames",ctx.constant("X__0",sort("cid"))),obj.num_queued_frames)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_level",ctx.constant("X__0",sort("cid"))),obj.queued_level)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("established_handshake_keys",ctx.constant("X__0",sort("cid"))),obj.established_handshake_keys)));
    slvr.add(__to_solver(*this,apply("the_cid"),obj.the_cid));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(__to_solver(*this,apply("_generating"),obj._generating));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),ctx.constant("X__2",sort("pkt_num")),__to_solver(*this,apply("sent_pkt",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),ctx.constant("X__2",sort("pkt_num"))),obj.sent_pkt)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("established_1rtt_keys",ctx.constant("X__0",sort("cid"))),obj.established_1rtt_keys)));
    alits.clear();
    randomize("__fml:f__frame.ack.largest_acked");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    __randomize<quic_server_test_connection_close::frame__ack__block__arr>(*this,apply("__fml:f__frame.ack.ack_blocks"));
    randomize("__fml:e");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"));
    randomize("__fml:f__frame.ack.ack_delay");

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        f.largest_acked = (unsigned)eval_apply("__fml:f__frame.ack.largest_acked");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
                __from_solver<quic_server_test_connection_close::frame__ack__block__arr>(*this,apply("__fml:f__frame.ack.ack_blocks"),f.ack_blocks);
        e = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:e");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"),scid);
        f.ack_delay = (int)eval_apply("__fml:f__frame.ack.ack_delay");

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__frame__ack__handle_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> frame.ack.handle(" << f << ","  << scid << ","  << dcid << ","  << e << ")" << std::endl;
    obj.ext__frame__ack__handle(f,scid,dcid,e);
}
class ext__packet_event_gen : public gen {
  public:
    quic_server_test_connection_close::quic_packet pkt;
    quic_server_test_connection_close::ip__endpoint src;
    quic_server_test_connection_close::ip__endpoint dst;
    ext__packet_event_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__packet_event_gen::ext__packet_event_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    mk_const("__new_fml:res","Bool");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    mk_const("__fml:pkt__quic_packet.src_cid","cid");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__new_loc:scid","cid");
    mk_const("__new_fml:res_b","Bool");
    mk_const("__fml:pkt__quic_packet.ptype","quic_packet_type");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    mk_const("__fml:pkt__quic_packet.dst_cid","cid");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    mk_const("__new_fml:res_a","Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    mk_const("__fml:dst","ip.endpoint");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    mk_const("__fml:pkt__quic_packet.token","stream_data");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__new_loc:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    mk_const("__fml:pkt__quic_packet.seq_num","pkt_num");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    mk_const("__ts0_a_b","Bool");
    mk_const("__fml:pkt__quic_packet.payload","frame.arr");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    mk_const("__ts0_a","Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    mk_const("__fml:src","ip.endpoint");
    mk_const("__fml:pkt__quic_packet.pversion","version");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (=> (not (= (stream_data.end |__fml:pkt__quic_packet.token|) 0)) "
"               (= |__fml:pkt__quic_packet.ptype| quic_packet_type.initial))) "
"      (a!2 (or (connected |__new_loc:dcid|) "
"               (and (= |__fml:pkt__quic_packet.ptype| quic_packet_type.initial) "
"                    (is_client |__fml:pkt__quic_packet.src_cid|) "
"                    (= |__new_loc:dcid| "
"                       (nonce_cid |__fml:pkt__quic_packet.src_cid|))))) "
"      (a!3 (or (not |__new_fml:res|) "
"               (=> (connected |__new_loc:dcid|) "
"                   (= (connected_to |__new_loc:dcid|) "
"                      |__fml:pkt__quic_packet.src_cid|)))) "
"      (a!4 (=> (and (not _generating) (not (queued_non_ack |__new_loc:scid|))) "
"               (bvugt (ack_credit |__new_loc:scid|) #x00000000))) "
"      (a!5 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!6 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!7 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!8 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!9 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!10 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Y:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!11 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!12 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                  (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!13 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                       (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                  (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!14 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!15 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!16 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!17 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!18 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!19 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!20 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!21 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!22 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!23 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!24 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!40 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!41 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!42 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!43 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!44 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!45 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!46 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!47 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!48 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!49 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!50 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!51 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!52 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!53 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!54 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!55 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!56 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!57 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!58 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!59 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!60 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!61 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!62 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!63 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!64 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!65 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!66 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!67 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!68 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!69 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!70 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!71 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!72 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!73 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!74 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!75 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!76 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!77 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!78 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!79 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!80 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!81 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!82 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!83 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!84 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!85 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!86 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!87 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!88 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!90 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!91 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!94 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!95 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!96 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!97 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!98 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!99 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!100 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!101 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!102 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!103 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!104 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!105 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!106 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!107 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!108 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!109 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!110 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!111 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!112 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!113 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!114 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!115 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!116 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!117 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!118 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!119 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!120 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!121 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!122 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!123 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!124 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!125 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!126 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!127 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!128 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!129 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!130 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!131 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!132 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!133 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!134 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!135 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!136 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!137 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!138 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!139 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!140 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!141 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!142 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!143 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!144 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!145 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!146 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!147 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!148 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!149 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!150 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!151 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!152 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!153 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!154 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!155 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!156 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!157 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!158 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!159 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!160 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!161 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!162 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!175 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!176 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!177 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!178 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!179 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!180 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!181 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!182 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!183 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!184 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!185 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!186 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!187 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!188 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!189 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!190 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!191 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!192 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!193 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!194 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!195 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!196 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!197 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!198 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!199 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!200 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!201 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!202 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!203 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!204 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!205 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!206 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!207 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!208 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!209 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!210 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!211 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!212 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!213 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!214 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!215 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!216 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!217 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!218 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!220 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!221 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!222 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!224 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!225 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!226 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!227 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!228 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!229 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!230 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!231 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!232 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!233 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!234 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!235 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!236 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!237 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!238 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!239 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!240 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!241 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!242 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!243 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!244 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!245 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!246 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!258 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!259 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!260 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!261 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!262 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!263 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!264 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!265 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!266 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!267 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!268 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!269 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!270 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!271 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!272 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!273 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!274 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!275 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!276 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!277 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!278 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!279 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!280 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!281 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!285 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!286 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!287 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!288 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!289 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!290 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!291 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!292 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!294 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!295 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!296 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!297 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!298 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!299 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!300 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!301 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!302 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!303 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!304 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!305 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!306 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!307 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!308 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!309 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!310 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!311 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!312 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!313 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!314 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!315 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!316 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!317 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!318 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!319 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!320 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!321 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!322 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!323 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!324 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!325 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!326 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!335 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!336 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!337 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!338 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!339 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!340 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!341 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!342 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!343 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!344 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!345 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!346 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!347 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!348 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!349 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!350 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!351 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!352 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (num_queued_frames |X0:cid|) 0)))) "
"      (a!353 (forall ((|X0:stream_data| stream_data)) "
"               (not (< (stream_data.end |X0:stream_data|) 0))))) "
"  (and (= |__new_loc:dcid| "
"          (ite __ts0_a "
"               (cid_to_aid |__fml:pkt__quic_packet.dst_cid|) "
"               |__fml:pkt__quic_packet.dst_cid|)) "
"       (= __ts0_a (cid_mapped |__fml:pkt__quic_packet.dst_cid|)) "
"       (= |__new_fml:res| "
"          (not (= |__fml:pkt__quic_packet.ptype| quic_packet_type.one_rtt))) "
"       (= |__new_loc:scid| "
"          (ite |__new_fml:res| "
"               |__fml:pkt__quic_packet.src_cid| "
"               (connected_to |__new_loc:dcid|))) "
"       (= |__new_fml:res_a| "
"          (not (= |__fml:pkt__quic_packet.ptype| quic_packet_type.one_rtt))) "
"       (= __ts0_a_b (conn_draining |__new_loc:scid|)) "
"       (= |__new_fml:res_b| "
"          (not (= |__fml:pkt__quic_packet.ptype| quic_packet_type.one_rtt))) "
"       a!1 "
"       (not (= |__fml:pkt__quic_packet.ptype| quic_packet_type.zero_rtt)) "
"       a!2 "
"       a!3 "
"       (= |__fml:pkt__quic_packet.ptype| (queued_level |__new_loc:scid|)) "
"       (bvule |__fml:pkt__quic_packet.seq_num| "
"              (bvadd (last_pkt_num |__new_loc:scid| "
"                                   |__fml:pkt__quic_packet.ptype|) "
"                     #x00000015)) "
"       (not (sent_pkt |__new_loc:scid| "
"                      |__fml:pkt__quic_packet.ptype| "
"                      |__fml:pkt__quic_packet.seq_num|)) "
"       (> (num_queued_frames |__new_loc:scid|) 0) "
"       (=> (and (conn_seen |__new_loc:scid|) "
"                |__new_fml:res_a| "
"                (is_client |__new_loc:scid|)) "
"           (conn_requested |__fml:src| |__fml:dst| |__new_loc:scid|)) "
"       (=> (conn_seen |__new_loc:dcid|) "
"           (hi_non_probing_endpoint |__new_loc:dcid| |__fml:dst|)) "
"       a!4 "
"       (or (not __ts0_a_b) (not (draining_pkt_sent |__new_loc:scid|))) "
"       (or (not __ts0_a_b) (queued_close |__new_loc:scid|)) "
"       (or (not _generating) "
"           (= |__fml:src| client.ep) "
"           (= |__fml:src| client_alt)) "
"       (or (not _generating) (= |__fml:dst| server.ep)) "
"       (or (not _generating) "
"           (= (stream_data.end |__fml:pkt__quic_packet.token|) 0)) "
"       (=> |__new_fml:res_b| (= |__fml:pkt__quic_packet.pversion| #xff000017)) "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348 "
"       a!349 "
"       a!350 "
"       a!351 "
"       a!352 "
"       a!353)))");
}
bool ext__packet_event_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(__to_solver(*this,apply("ip.endpoint.protocol",apply("client_alt")),obj.client_alt.protocol));
    slvr.add(__to_solver(*this,apply("ip.endpoint.addr",apply("client_alt")),obj.client_alt.addr));
    slvr.add(__to_solver(*this,apply("ip.endpoint.port",apply("client_alt")),obj.client_alt.port));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("conn_draining",ctx.constant("X__0",sort("cid"))),obj.conn_draining)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_non_ack",ctx.constant("X__0",sort("cid"))),obj.queued_non_ack)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_close",ctx.constant("X__0",sort("cid"))),obj.queued_close)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("ip.endpoint")),__to_solver(*this,apply("hi_non_probing_endpoint",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("ip.endpoint"))),obj.hi_non_probing_endpoint)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("cid_mapped",ctx.constant("X__0",sort("cid"))),obj.cid_mapped)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),__to_solver(*this,apply("last_pkt_num",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type"))),obj.last_pkt_num)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("num_queued_frames",ctx.constant("X__0",sort("cid"))),obj.num_queued_frames)));
    slvr.add(__to_solver(*this,apply("ip.endpoint.protocol",apply("client.ep")),obj.client__ep.protocol));
    slvr.add(__to_solver(*this,apply("ip.endpoint.addr",apply("client.ep")),obj.client__ep.addr));
    slvr.add(__to_solver(*this,apply("ip.endpoint.port",apply("client.ep")),obj.client__ep.port));
    slvr.add(__to_solver(*this,apply("ip.endpoint.protocol",apply("server.ep")),obj.server__ep.protocol));
    slvr.add(__to_solver(*this,apply("ip.endpoint.addr",apply("server.ep")),obj.server__ep.addr));
    slvr.add(__to_solver(*this,apply("ip.endpoint.port",apply("server.ep")),obj.server__ep.port));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_level",ctx.constant("X__0",sort("cid"))),obj.queued_level)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("draining_pkt_sent",ctx.constant("X__0",sort("cid"))),obj.draining_pkt_sent)));
    slvr.add(forall(ctx.constant("X__0",sort("ip.endpoint")),ctx.constant("X__1",sort("ip.endpoint")),ctx.constant("X__2",sort("cid")),__to_solver(*this,apply("conn_requested",ctx.constant("X__0",sort("ip.endpoint")),ctx.constant("X__1",sort("ip.endpoint")),ctx.constant("X__2",sort("cid"))),obj.conn_requested)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("is_client",ctx.constant("X__0",sort("cid"))),obj.is_client)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("nonce_cid",ctx.constant("X__0",sort("cid"))),obj.nonce_cid)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected",ctx.constant("X__0",sort("cid"))),obj.connected)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("conn_seen",ctx.constant("X__0",sort("cid"))),obj.conn_seen)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("ack_credit",ctx.constant("X__0",sort("cid"))),obj.ack_credit)));
    slvr.add(__to_solver(*this,apply("_generating"),obj._generating));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("cid_to_aid",ctx.constant("X__0",sort("cid"))),obj.cid_to_aid)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("connected_to",ctx.constant("X__0",sort("cid"))),obj.connected_to)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),ctx.constant("X__2",sort("pkt_num")),__to_solver(*this,apply("sent_pkt",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),ctx.constant("X__2",sort("pkt_num"))),obj.sent_pkt)));
    alits.clear();
    __randomize<quic_server_test_connection_close::frame__arr>(*this,apply("__fml:pkt__quic_packet.payload"));
    randomize("__fml:pkt__quic_packet.ptype");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:pkt__quic_packet.dst_cid"));
    randomize("__fml:pkt__quic_packet.seq_num");
    __randomize<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:src"));
    randomize("__fml:pkt__quic_packet.pversion");
    __randomize<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:dst"));
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:pkt__quic_packet.src_cid"));
    __randomize<quic_server_test_connection_close::stream_data>(*this,apply("__fml:pkt__quic_packet.token"));

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        pkt.ptype = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:pkt__quic_packet.ptype");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:pkt__quic_packet.dst_cid"),pkt.dst_cid);
        pkt.seq_num = (unsigned)eval_apply("__fml:pkt__quic_packet.seq_num");
                __from_solver<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:src"),src);
        pkt.pversion = (unsigned)eval_apply("__fml:pkt__quic_packet.pversion");
                __from_solver<quic_server_test_connection_close::ip__endpoint>(*this,apply("__fml:dst"),dst);
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:pkt__quic_packet.src_cid"),pkt.src_cid);
                __from_solver<quic_server_test_connection_close::stream_data>(*this,apply("__fml:pkt__quic_packet.token"),pkt.token);
    hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::frame__arr> (&queued_frames) = obj.queued_frames;
    hash_thunk<quic_server_test_connection_close::cid,bool> (&cid_mapped) = obj.cid_mapped;
    hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid> (&cid_to_aid) = obj.cid_to_aid;
    hash_thunk<quic_server_test_connection_close::cid,quic_server_test_connection_close::cid> (&connected_to) = obj.connected_to;
    quic_server_test_connection_close::quic_packet __new_pkt_a;
        __new_pkt_a = pkt;
    bool __new_res;
        __new_res = !(__new_pkt_a.ptype == quic_server_test_connection_close::quic_packet_type__one_rtt);
    bool __new_loc__0;
        __new_loc__0 = __new_res;
    bool __ts0_a_a;
        __ts0_a_a = __new_loc__0;
    quic_server_test_connection_close::cid __m_loc__scid;
        __m_loc__scid = pkt.src_cid;
    quic_server_test_connection_close::cid __m_loc__dcid;
        __m_loc__dcid = pkt.dst_cid;
    bool __ts0_a;
        __ts0_a = cid_mapped[__m_loc__dcid];
    quic_server_test_connection_close::cid __new_loc__dcid;
        __new_loc__dcid = (__ts0_a ? cid_to_aid[__m_loc__dcid] : __m_loc__dcid);
    quic_server_test_connection_close::cid __new_loc__scid;
        __new_loc__scid = (__ts0_a_a ? __m_loc__scid : connected_to[__new_loc__dcid]);
        pkt.payload = queued_frames[__new_loc__scid];

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__packet_event_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> packet_event(" << src << ","  << dst << ","  << pkt << ")" << std::endl;
    obj.ext__packet_event(src,dst,pkt);
}
class ext__frame__crypto__handle_gen : public gen {
  public:
    quic_server_test_connection_close::frame__crypto f;
    quic_server_test_connection_close::cid dcid;
    quic_server_test_connection_close::quic_packet_type e;
    quic_server_test_connection_close::cid scid;
    ext__frame__crypto__handle_gen();
    bool generate(quic_server_test_connection_close&);
    void execute(quic_server_test_connection_close&);
};
ext__frame__crypto__handle_gen::ext__frame__crypto__handle_gen(){
mk_sort("frame.rst_stream");
    mk_bv("tls.gmt",32);
mk_sort("initial_max_stream_data_uni");
    mk_int("tls_extensions.domain");
    mk_bv("stream_id",16);
mk_sort("frame.ping");
mk_sort("frame.stream");
mk_sort("trans_params_struct");
mk_sort("quic_packet.retired_cids");
    mk_bv("cid_seq",8);
mk_sort("prot.arr");
mk_sort("prot.header_info");
    mk_int("quic_packet.idx");
mk_sort("frame.ack");
    mk_int("tls_api.lower.level");
mk_sort("disable_migration");
mk_sort("frame.stop_sending");
    mk_int("frame.idx");
mk_sort("frame.max_stream_id");
    const char *stream_kind_values[2] = {"unidir","bidir"};
    mk_enum("stream_kind",2,stream_kind_values);
    mk_int("frame.ack.block.idx");
mk_sort("frame.blocked");
mk_sort("frame.max_data");
mk_sort("stateless_reset_token");
mk_sort("initial_max_stream_id_bidi");
mk_sort("frame.new_connection_id");
    mk_bv("tls.protocol_version",16);
mk_sort("preferred_address");
mk_sort("active_connection_id_limit");
    mk_int("tls_api.upper.level");
    mk_bv("ip.addr",32);
    mk_bv("bit",1);
    mk_int("vector[tls.extension].domain");
    mk_int("prot.idx");
    mk_int("tls_api.id");
mk_sort("vector[tls.extension]");
mk_sort("vector[tls.handshake]");
    enum_sorts.insert(std::pair<std::string, z3::sort>("cid",quic_server_test_connection_close::cid::z3_sort(ctx)));
    mk_int("microsecs");
    mk_bv("reset_token",31);
mk_sort("tls.extension");
    mk_int("vector[tls.compression_method].domain");
    mk_bv("type_bits",7);
mk_sort("tls.client_hello");
mk_sort("frame.path_challenge");
mk_sort("frame.retire_connection_id");
    const char *quic_packet_type_values[4] = {"quic_packet_type.initial","quic_packet_type.zero_rtt","quic_packet_type.handshake","quic_packet_type.one_rtt"};
    mk_enum("quic_packet_type",4,quic_packet_type_values);
    mk_int("stream_pos");
mk_sort("tls_api.upper.decrypt_result");
mk_sort("tls.unknown_extension");
mk_sort("frame.ack.block.arr");
mk_sort("frame.connection_close");
mk_sort("frame");
mk_sort("initial_max_stream_data_bidi_remote");
mk_sort("quic_transport_parameters");
mk_sort("tls.server_hello");
mk_sort("tls.unknown_message");
mk_sort("vector[transport_parameter]");
mk_sort("ip.endpoint");
mk_sort("quic_packet.arr");
mk_sort("vector[tls.compression_method]");
mk_sort("frame.path_response");
mk_sort("frame.crypto");
    mk_bv("cid_length",4);
    mk_bv("tls.message_type",8);
    const char *ip__protocol_values[2] = {"ip.udp","ip.tcp"};
    mk_enum("ip.protocol",2,ip__protocol_values);
mk_sort("frame.application_close");
mk_sort("frame.new_token");
mk_sort("frame.stream_id_blocked");
mk_sort("vector[tls.cipher_suite]");
mk_sort("tls.random");
mk_sort("tls_extensions");
    mk_bv("version",32);
    const char *role_values[2] = {"role.client","role.server"};
    mk_enum("role",2,role_values);
    mk_bv("tls.compression_method",1);
mk_sort("initial_max_stream_data_bidi_local");
mk_sort("frame.ack.block");
mk_sort("initial_max_data");
mk_sort("tls.handshake");
    mk_int("vector[transport_parameter].domain");
mk_sort("initial_max_stream_id_uni");
mk_sort("quic_packet");
mk_sort("tls.handshake_parser.result");
    mk_int("net.socket");
mk_sort("frame.stream_blocked");
mk_sort("idle_timeout");
mk_sort("stream_data");
    mk_int("vector[tls.cipher_suite].domain");
    mk_bv("byte",8);
    mk_bv("tls.cipher_suite",16);
mk_sort("frame.arr");
mk_sort("ack_delay_exponent");
    mk_int("vector[tls.handshake].domain");
mk_sort("max_packet_size");
    mk_bv("pkt_num",32);
    mk_bv("error_code",16);
mk_sort("tls.handshakes");
    mk_bv("tls.extension_type",16);
    mk_int("tls.handshakes.domain");
mk_sort("tls.encrypted_extensions");
mk_sort("frame.max_stream_data");
    const char *endpoint_id_values[3] = {"endpoint_id.client","endpoint_id.client_alt","endpoint_id.server"};
    mk_enum("endpoint_id",3,endpoint_id_values);
mk_sort("max_ack_delay");
mk_sort("transport_parameter");
    mk_bv("ip.port",16);
    const char *frame__crypto__offset_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.offset",1,frame__crypto__offset_domain,"stream_pos");
    const char *prot__dcid_domain[1] = {"prot.header_info"};
    mk_decl("prot.dcid",1,prot__dcid_domain,"cid");
    const char *initial_max_stream_data_uni__stream_pos_32_domain[1] = {"initial_max_stream_data_uni"};
    mk_decl("initial_max_stream_data_uni.stream_pos_32",1,initial_max_stream_data_uni__stream_pos_32_domain,"stream_pos");
    const char *vector__transport_parameter____value_domain[2] = {"vector[transport_parameter]","vector[transport_parameter].domain"};
    mk_decl("vector[transport_parameter].value",2,vector__transport_parameter____value_domain,"transport_parameter");
    const char *vector__tls__extension____begin_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].begin",1,vector__tls__extension____begin_domain,"vector[tls.extension].domain");
    const char *stream_length_domain[2] = {"cid","stream_id"};
    mk_decl("stream_length",2,stream_length_domain,"stream_pos");
    const char *quic_packet__retired_cids__value_domain[2] = {"quic_packet.retired_cids","quic_packet.idx"};
    mk_decl("quic_packet.retired_cids.value",2,quic_packet__retired_cids__value_domain,"cid_seq");
    const char *stateless_reset_token__value_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.value",1,stateless_reset_token__value_domain,"stateless_reset_token");
    const char *max_stream_set_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream_set",2,max_stream_set_domain,"Bool");
    mk_const("client_alt","ip.endpoint");
    const char *tls__unknown_extension__content_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.content",1,tls__unknown_extension__content_domain,"stream_data");
    const char *frame__max_stream_id__id_domain[1] = {"frame.max_stream_id"};
    mk_decl("frame.max_stream_id.id",1,frame__max_stream_id__id_domain,"stream_id");
    const char *quic_transport_parameters__transport_parameters_domain[1] = {"quic_transport_parameters"};
    mk_decl("quic_transport_parameters.transport_parameters",1,quic_transport_parameters__transport_parameters_domain,"vector[transport_parameter]");
    const char *frame__connection_close__reason_phrase_length_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase_length",1,frame__connection_close__reason_phrase_length_domain,"stream_pos");
    const char *tls__handshakes__begin_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.begin",1,tls__handshakes__begin_domain,"tls.handshakes.domain");
    const char *conn_draining_domain[1] = {"cid"};
    mk_decl("conn_draining",1,conn_draining_domain,"Bool");
    const char *prot__arr__begin_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.begin",1,prot__arr__begin_domain,"prot.idx");
    const char *preferred_address__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.is_set",1,preferred_address__is_set_domain,"Bool");
    const char *queued_frames_domain[1] = {"cid"};
    mk_decl("queued_frames",1,queued_frames_domain,"frame.arr");
    const char *acked_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("acked_pkt",3,acked_pkt_domain,"Bool");
    const char *tls__client_hello__client_version_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.client_version",1,tls__client_hello__client_version_domain,"tls.protocol_version");
    const char *frame__ack__largest_acked_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.largest_acked",1,frame__ack__largest_acked_domain,"pkt_num");
    const char *crypto_handler_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_handler_pos",2,crypto_handler_pos_domain,"stream_pos");
    const char *max_acked_domain[2] = {"cid","quic_packet_type"};
    mk_decl("max_acked",2,max_acked_domain,"pkt_num");
    const char *frame__ack__block__arr__value_domain[2] = {"frame.ack.block.arr","frame.ack.block.idx"};
    mk_decl("frame.ack.block.arr.value",2,frame__ack__block__arr__value_domain,"frame.ack.block");
    const char *conn_enc_level_domain[2] = {"ip.endpoint","cid"};
    mk_decl("conn_enc_level",2,conn_enc_level_domain,"quic_packet_type");
    const char *queued_non_ack_domain[1] = {"cid"};
    mk_decl("queued_non_ack",1,queued_non_ack_domain,"Bool");
    mk_const("server_addr","ip.addr");
    const char *max_stream_data_val_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_val",2,max_stream_data_val_domain,"stream_pos");
    const char *preferred_address__value_domain[1] = {"trans_params_struct"};
    mk_decl("preferred_address.value",1,preferred_address__value_domain,"preferred_address");
    const char *frame__stream__offset_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.offset",1,frame__stream__offset_domain,"stream_pos");
    const char *prot__hdr_type_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_type",1,prot__hdr_type_domain,"type_bits");
    const char *frame__connection_close__err_code_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.err_code",1,frame__connection_close__err_code_domain,"error_code");
    const char *crypto_pos_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_pos",2,crypto_pos_domain,"stream_pos");
    const char *queued_non_probing_domain[1] = {"cid"};
    mk_decl("queued_non_probing",1,queued_non_probing_domain,"Bool");
    const char *max_packet_size__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.is_set",1,max_packet_size__is_set_domain,"Bool");
    const char *frame__crypto__length_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.length",1,frame__crypto__length_domain,"stream_pos");
    const char *crypto_data_present_domain[3] = {"cid","quic_packet_type","stream_pos"};
    mk_decl("crypto_data_present",3,crypto_data_present_domain,"Bool");
    mk_const("current_stream","stream_id");
    const char *queued_close_domain[1] = {"cid"};
    mk_decl("queued_close",1,queued_close_domain,"Bool");
    const char *frame__new_connection_id__length_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.length",1,frame__new_connection_id__length_domain,"cid_length");
    const char *disable_migration__value_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.value",1,disable_migration__value_domain,"disable_migration");
    const char *hi_non_probing_endpoint_domain[2] = {"cid","ip.endpoint"};
    mk_decl("hi_non_probing_endpoint",2,hi_non_probing_endpoint_domain,"Bool");
    const char *stream_seen_domain[2] = {"cid","stream_id"};
    mk_decl("stream_seen",2,stream_seen_domain,"Bool");
    const char *stream_app_data_end_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_end",2,stream_app_data_end_domain,"stream_pos");
    const char *tls__server_hello__extensions_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.extensions",1,tls__server_hello__extensions_domain,"vector[tls.extension]");
    const char *initial_max_stream_data_bidi_local__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.value",1,initial_max_stream_data_bidi_local__value_domain,"initial_max_stream_data_bidi_local");
    const char *initial_max_stream_id_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.value",1,initial_max_stream_id_uni__value_domain,"initial_max_stream_id_uni");
    mk_const("client_addr","ip.addr");
    const char *initial_max_data__stream_pos_32_domain[1] = {"initial_max_data"};
    mk_decl("initial_max_data.stream_pos_32",1,initial_max_data__stream_pos_32_domain,"stream_pos");
    const char *vector__tls__compression_method____end_domain[1] = {"vector[tls.compression_method]"};
    mk_decl("vector[tls.compression_method].end",1,vector__tls__compression_method____end_domain,"vector[tls.compression_method].domain");
    const char *quic_packet__pversion_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.pversion",1,quic_packet__pversion_domain,"version");
    const char *prot__arr__end_domain[1] = {"prot.arr"};
    mk_decl("prot.arr.end",1,prot__arr__end_domain,"prot.idx");
    const char *frame__ack__ack_blocks_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_blocks",1,frame__ack__ack_blocks_domain,"frame.ack.block.arr");
    const char *tls__handshakes__value_domain[2] = {"tls.handshakes","tls.handshakes.domain"};
    mk_decl("tls.handshakes.value",2,tls__handshakes__value_domain,"tls.handshake");
    const char *tls__client_hello__compression_methods_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.compression_methods",1,tls__client_hello__compression_methods_domain,"vector[tls.compression_method]");
    const char *max_data_val_domain[1] = {"cid"};
    mk_decl("max_data_val",1,max_data_val_domain,"stream_pos");
    const char *frame__arr__begin_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.begin",1,frame__arr__begin_domain,"frame.idx");
    const char *max_data_set_domain[1] = {"cid"};
    mk_decl("max_data_set",1,max_data_set_domain,"Bool");
    const char *idle_timeout__value_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.value",1,idle_timeout__value_domain,"idle_timeout");
    const char *stream_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_finished",2,stream_finished_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.is_set",1,initial_max_stream_data_bidi_remote__is_set_domain,"Bool");
    mk_const("client.tls_id","tls_api.id");
    const char *prot__payload_length_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length_pos",1,prot__payload_length_pos_domain,"stream_pos");
    const char *quic_packet__src_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.src_cid",1,quic_packet__src_cid_domain,"cid");
    const char *active_connection_id_limit__value_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.value",1,active_connection_id_limit__value_domain,"active_connection_id_limit");
    const char *tls__client_hello__cipher_suites_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.cipher_suites",1,tls__client_hello__cipher_suites_domain,"vector[tls.cipher_suite]");
    const char *frame__max_stream_data__id_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.id",1,frame__max_stream_data__id_domain,"stream_id");
    const char *stream_data__begin_domain[1] = {"stream_data"};
    mk_decl("stream_data.begin",1,stream_data__begin_domain,"stream_pos");
    const char *tls__handshake_parser__pos_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.pos",1,tls__handshake_parser__pos_domain,"stream_pos");
    const char *frame__retire_connection_id__seq_num_domain[1] = {"frame.retire_connection_id"};
    mk_decl("frame.retire_connection_id.seq_num",1,frame__retire_connection_id__seq_num_domain,"cid_seq");
    const char *pkt_has_close_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("pkt_has_close",3,pkt_has_close_domain,"Bool");
    const char *trans_params_set_domain[1] = {"cid"};
    mk_decl("trans_params_set",1,trans_params_set_domain,"Bool");
    const char *ip__endpoint__addr_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.addr",1,ip__endpoint__addr_domain,"ip.addr");
    const char *vector__tls__cipher_suite____end_domain[1] = {"vector[tls.cipher_suite]"};
    mk_decl("vector[tls.cipher_suite].end",1,vector__tls__cipher_suite____end_domain,"vector[tls.cipher_suite].domain");
    const char *ip__endpoint__port_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.port",1,ip__endpoint__port_domain,"ip.port");
    const char *active_connection_id_limit__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("active_connection_id_limit.is_set",1,active_connection_id_limit__is_set_domain,"Bool");
    const char *cid_mapped_domain[1] = {"cid"};
    mk_decl("cid_mapped",1,cid_mapped_domain,"Bool");
    const char *last_pkt_num_domain[2] = {"cid","quic_packet_type"};
    mk_decl("last_pkt_num",2,last_pkt_num_domain,"pkt_num");
    mk_const("server_port","ip.port");
    const char *tls__unknown_message__mtype_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.mtype",1,tls__unknown_message__mtype_domain,"tls.message_type");
    const char *initial_max_stream_data_bidi_remote__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_remote.value",1,initial_max_stream_data_bidi_remote__value_domain,"initial_max_stream_data_bidi_remote");
    const char *frame__stream__len_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.len",1,frame__stream__len_domain,"Bool");
    const char *frame__arr__value_domain[2] = {"frame.arr","frame.idx"};
    mk_decl("frame.arr.value",2,frame__arr__value_domain,"frame");
    const char *tls__client_hello__extensions_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.extensions",1,tls__client_hello__extensions_domain,"vector[tls.extension]");
    const char *prot__payload_length_domain[1] = {"prot.header_info"};
    mk_decl("prot.payload_length",1,prot__payload_length_domain,"stream_pos");
    mk_const("http_request","stream_data");
    const char *max_ack_delay__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.is_set",1,max_ack_delay__is_set_domain,"Bool");
    const char *ip__endpoint__protocol_domain[1] = {"ip.endpoint"};
    mk_decl("ip.endpoint.protocol",1,ip__endpoint__protocol_domain,"ip.protocol");
    const char *frame__stream_id_blocked__id_domain[1] = {"frame.stream_id_blocked"};
    mk_decl("frame.stream_id_blocked.id",1,frame__stream_id_blocked__id_domain,"stream_id");
    const char *num_queued_frames_domain[1] = {"cid"};
    mk_decl("num_queued_frames",1,num_queued_frames_domain,"frame.idx");
    const char *quic_packet__payload_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.payload",1,quic_packet__payload_domain,"frame.arr");
    const char *idle_timeout__seconds_16_domain[1] = {"idle_timeout"};
    mk_decl("idle_timeout.seconds_16",1,idle_timeout__seconds_16_domain,"microsecs");
    const char *tls_api__upper__ok_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.ok",1,tls_api__upper__ok_domain,"Bool");
    mk_const("client_port","ip.port");
    const char *initial_max_data__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.is_set",1,initial_max_data__is_set_domain,"Bool");
    const char *initial_max_stream_data_bidi_local__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_local"};
    mk_decl("initial_max_stream_data_bidi_local.stream_pos_32",1,initial_max_stream_data_bidi_local__stream_pos_32_domain,"stream_pos");
    mk_const("client.ep","ip.endpoint");
    const char *frame__arr__end_domain[1] = {"frame.arr"};
    mk_decl("frame.arr.end",1,frame__arr__end_domain,"frame.idx");
    mk_const("max_stream_data","stream_pos");
    const char *quic_packet__seq_num_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.seq_num",1,quic_packet__seq_num_domain,"pkt_num");
    mk_const("force_new_ack","Bool");
    const char *crypto_data_end_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data_end",2,crypto_data_end_domain,"stream_pos");
    const char *initial_max_stream_id_bidi__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.is_set",1,initial_max_stream_id_bidi__is_set_domain,"Bool");
    const char *frame__stop_sending__id_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.id",1,frame__stop_sending__id_domain,"stream_id");
    const char *frame__stream_blocked__id_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.id",1,frame__stream_blocked__id_domain,"stream_id");
    const char *frame__path_response__data_domain[1] = {"frame.path_response"};
    mk_decl("frame.path_response.data",1,frame__path_response__data_domain,"stream_data");
    const char *tls__server_hello__rand_info_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.rand_info",1,tls__server_hello__rand_info_domain,"tls.random");
    const char *stream_app_data_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data",2,stream_app_data_domain,"stream_data");
    const char *ack_delay_exponent__value_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.value",1,ack_delay_exponent__value_domain,"ack_delay_exponent");
    mk_const("server.ep","ip.endpoint");
    const char *initial_max_stream_id_uni__stream_id_16_domain[1] = {"initial_max_stream_id_uni"};
    mk_decl("initial_max_stream_id_uni.stream_id_16",1,initial_max_stream_id_uni__stream_id_16_domain,"stream_id");
    const char *frame__ack__block__arr__end_domain[1] = {"frame.ack.block.arr"};
    mk_decl("frame.ack.block.arr.end",1,frame__ack__block__arr__end_domain,"frame.ack.block.idx");
    const char *vector__tls__extension____value_domain[2] = {"vector[tls.extension]","vector[tls.extension].domain"};
    mk_decl("vector[tls.extension].value",2,vector__tls__extension____value_domain,"tls.extension");
    const char *quic_packet__token_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.token",1,quic_packet__token_domain,"stream_data");
    const char *frame__new_connection_id__seq_num_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.seq_num",1,frame__new_connection_id__seq_num_domain,"cid_seq");
    const char *tls__gmt_unix_time_domain[1] = {"tls.random"};
    mk_decl("tls.gmt_unix_time",1,tls__gmt_unix_time_domain,"tls.gmt");
    const char *crypto_data_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_data",2,crypto_data_domain,"stream_data");
    const char *frame__stream__off_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.off",1,frame__stream__off_domain,"Bool");
    const char *stream_app_pos_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_pos",2,stream_app_pos_domain,"stream_pos");
    const char *initial_max_stream_data_uni__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.value",1,initial_max_stream_data_uni__value_domain,"initial_max_stream_data_uni");
    const char *max_ack_delay__exponent_8_domain[1] = {"max_ack_delay"};
    mk_decl("max_ack_delay.exponent_8",1,max_ack_delay__exponent_8_domain,"microsecs");
    const char *stream_data__value_domain[2] = {"stream_data","stream_pos"};
    mk_decl("stream_data.value",2,stream_data__value_domain,"byte");
    const char *queued_level_domain[1] = {"cid"};
    mk_decl("queued_level",1,queued_level_domain,"quic_packet_type");
    const char *draining_pkt_sent_domain[1] = {"cid"};
    mk_decl("draining_pkt_sent",1,draining_pkt_sent_domain,"Bool");
    const char *frame__stream__fin_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.fin",1,frame__stream__fin_domain,"Bool");
    const char *frame__new_token__data_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.data",1,frame__new_token__data_domain,"stream_data");
    const char *frame__stop_sending__err_code_domain[1] = {"frame.stop_sending"};
    mk_decl("frame.stop_sending.err_code",1,frame__stop_sending__err_code_domain,"error_code");
    const char *frame__application_close__err_code_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.err_code",1,frame__application_close__err_code_domain,"error_code");
    const char *conn_total_data_domain[1] = {"cid"};
    mk_decl("conn_total_data",1,conn_total_data_domain,"stream_pos");
    const char *ack_delay_exponent__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("ack_delay_exponent.is_set",1,ack_delay_exponent__is_set_domain,"Bool");
    const char *established_handshake_keys_domain[1] = {"cid"};
    mk_decl("established_handshake_keys",1,established_handshake_keys_domain,"Bool");
    const char *tls_api__upper__data_domain[1] = {"tls_api.upper.decrypt_result"};
    mk_decl("tls_api.upper.data",1,tls_api__upper__data_domain,"stream_data");
    const char *frame__stream__id_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.id",1,frame__stream__id_domain,"stream_id");
    mk_const("sock","net.socket");
    const char *frame__stream__data_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.data",1,frame__stream__data_domain,"stream_data");
    const char *get_stream_role_domain[1] = {"stream_id"};
    mk_decl("get_stream_role",1,get_stream_role_domain,"role");
    const char *quic_packet__retired_cids__end_domain[1] = {"quic_packet.retired_cids"};
    mk_decl("quic_packet.retired_cids.end",1,quic_packet__retired_cids__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__token_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.token",1,frame__new_connection_id__token_domain,"reset_token");
    const char *vector__tls__compression_method____value_domain[2] = {"vector[tls.compression_method]","vector[tls.compression_method].domain"};
    mk_decl("vector[tls.compression_method].value",2,vector__tls__compression_method____value_domain,"tls.compression_method");
    const char *tls__unknown_extension__etype_domain[1] = {"tls.unknown_extension"};
    mk_decl("tls.unknown_extension.etype",1,tls__unknown_extension__etype_domain,"tls.extension_type");
    const char *initial_max_stream_id_bidi__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_bidi.value",1,initial_max_stream_id_bidi__value_domain,"initial_max_stream_id_bidi");
    const char *frame__ack__ack_delay_domain[1] = {"frame.ack"};
    mk_decl("frame.ack.ack_delay",1,frame__ack__ack_delay_domain,"microsecs");
    const char *tls__handshake_parser__value_domain[1] = {"tls.handshake_parser.result"};
    mk_decl("tls.handshake_parser.value",1,tls__handshake_parser__value_domain,"tls.handshakes");
    mk_const("server.enc_level","quic_packet_type");
    const char *conn_requested_domain[3] = {"ip.endpoint","ip.endpoint","cid"};
    mk_decl("conn_requested",3,conn_requested_domain,"Bool");
    const char *used_cid_domain[1] = {"cid"};
    mk_decl("used_cid",1,used_cid_domain,"Bool");
    const char *conn_closed_domain[1] = {"cid"};
    mk_decl("conn_closed",1,conn_closed_domain,"Bool");
    const char *initial_max_stream_data_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_uni.is_set",1,initial_max_stream_data_uni__is_set_domain,"Bool");
    const char *frame__rst_stream__id_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.id",1,frame__rst_stream__id_domain,"stream_id");
    const char *ack_delay_exponent__exponent_8_domain[1] = {"ack_delay_exponent"};
    mk_decl("ack_delay_exponent.exponent_8",1,ack_delay_exponent__exponent_8_domain,"microsecs");
    const char *frame__rst_stream__err_code_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.err_code",1,frame__rst_stream__err_code_domain,"error_code");
    const char *stream_reset_domain[2] = {"cid","stream_id"};
    mk_decl("stream_reset",2,stream_reset_domain,"Bool");
    const char *frame__new_connection_id__scid_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.scid",1,frame__new_connection_id__scid_domain,"cid");
    const char *vector__tls__handshake____end_domain[1] = {"vector[tls.handshake]"};
    mk_decl("vector[tls.handshake].end",1,vector__tls__handshake____end_domain,"vector[tls.handshake].domain");
    mk_const("the_cid","cid");
    const char *tls__handshakes__end_domain[1] = {"tls.handshakes"};
    mk_decl("tls.handshakes.end",1,tls__handshakes__end_domain,"tls.handshakes.domain");
    const char *max_packet_size__stream_pos_16_domain[1] = {"max_packet_size"};
    mk_decl("max_packet_size.stream_pos_16",1,max_packet_size__stream_pos_16_domain,"stream_pos");
    const char *prot__hdr_long_domain[1] = {"prot.header_info"};
    mk_decl("prot.hdr_long",1,prot__hdr_long_domain,"Bool");
    const char *stream_data__segment_domain[3] = {"stream_data","stream_pos","stream_pos"};
    mk_decl("stream_data.segment",3,stream_data__segment_domain,"stream_data");
    const char *prot__scid_domain[1] = {"prot.header_info"};
    mk_decl("prot.scid",1,prot__scid_domain,"cid");
    const char *prot__arr__value_domain[2] = {"prot.arr","prot.idx"};
    mk_decl("prot.arr.value",2,prot__arr__value_domain,"stream_data");
    const char *frame__stream__length_domain[1] = {"frame.stream"};
    mk_decl("frame.stream.length",1,frame__stream__length_domain,"stream_pos");
    const char *idle_timeout__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("idle_timeout.is_set",1,idle_timeout__is_set_domain,"Bool");
    const char *disable_migration__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("disable_migration.is_set",1,disable_migration__is_set_domain,"Bool");
    const char *frame__stream_blocked__pos_domain[1] = {"frame.stream_blocked"};
    mk_decl("frame.stream_blocked.pos",1,frame__stream_blocked__pos_domain,"stream_pos");
    const char *stateless_reset_token__data_8_domain[1] = {"stateless_reset_token"};
    mk_decl("stateless_reset_token.data_8",1,stateless_reset_token__data_8_domain,"stream_data");
    const char *frame__rst_stream__final_offset_domain[1] = {"frame.rst_stream"};
    mk_decl("frame.rst_stream.final_offset",1,frame__rst_stream__final_offset_domain,"stream_pos");
    const char *tls__client_hello__rand_info_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.rand_info",1,tls__client_hello__rand_info_domain,"tls.random");
    const char *initial_max_stream_data_bidi_local__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_data_bidi_local.is_set",1,initial_max_stream_data_bidi_local__is_set_domain,"Bool");
    const char *initial_max_stream_id_bidi__stream_id_16_domain[1] = {"initial_max_stream_id_bidi"};
    mk_decl("initial_max_stream_id_bidi.stream_id_16",1,initial_max_stream_id_bidi__stream_id_16_domain,"stream_id");
    mk_const("client.enc_level","quic_packet_type");
    mk_const("client_port_alt","ip.port");
    const char *frame__application_close__reason_phrase_length_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase_length",1,frame__application_close__reason_phrase_length_domain,"stream_pos");
    const char *frame__ack__block__gap_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.gap",1,frame__ack__block__gap_domain,"pkt_num");
    const char *frame__ack__block__blocks_domain[1] = {"frame.ack.block"};
    mk_decl("frame.ack.block.blocks",1,frame__ack__block__blocks_domain,"pkt_num");
    const char *max_packet_size__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_packet_size.value",1,max_packet_size__value_domain,"max_packet_size");
    const char *frame__max_stream_data__pos_domain[1] = {"frame.max_stream_data"};
    mk_decl("frame.max_stream_data.pos",1,frame__max_stream_data__pos_domain,"stream_pos");
    const char *tls__client_hello__session_id_domain[1] = {"tls.client_hello"};
    mk_decl("tls.client_hello.session_id",1,tls__client_hello__session_id_domain,"stream_data");
    const char *queued_ack_eliciting_domain[1] = {"cid"};
    mk_decl("queued_ack_eliciting",1,queued_ack_eliciting_domain,"Bool");
    const char *frame__max_data__pos_domain[1] = {"frame.max_data"};
    mk_decl("frame.max_data.pos",1,frame__max_data__pos_domain,"stream_pos");
    const char *vector__tls__cipher_suite____value_domain[2] = {"vector[tls.cipher_suite]","vector[tls.cipher_suite].domain"};
    mk_decl("vector[tls.cipher_suite].value",2,vector__tls__cipher_suite____value_domain,"tls.cipher_suite");
    const char *vector__transport_parameter____begin_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].begin",1,vector__transport_parameter____begin_domain,"vector[transport_parameter].domain");
    const char *frame__path_challenge__data_domain[1] = {"frame.path_challenge"};
    mk_decl("frame.path_challenge.data",1,frame__path_challenge__data_domain,"stream_data");
    const char *initial_max_stream_id_uni__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_stream_id_uni.is_set",1,initial_max_stream_id_uni__is_set_domain,"Bool");
    const char *vector__tls__handshake____value_domain[2] = {"vector[tls.handshake]","vector[tls.handshake].domain"};
    mk_decl("vector[tls.handshake].value",2,vector__tls__handshake____value_domain,"tls.handshake");
    const char *frame__crypto__data_domain[1] = {"frame.crypto"};
    mk_decl("frame.crypto.data",1,frame__crypto__data_domain,"stream_data");
    const char *stream_data__end_domain[1] = {"stream_data"};
    mk_decl("stream_data.end",1,stream_data__end_domain,"stream_pos");
    mk_const("bit.one","bit");
    mk_const("server.tls_id","tls_api.id");
    const char *crypto_length_domain[2] = {"cid","quic_packet_type"};
    mk_decl("crypto_length",2,crypto_length_domain,"stream_pos");
    const char *tls__encrypted_extensions__extensions_domain[1] = {"tls.encrypted_extensions"};
    mk_decl("tls.encrypted_extensions.extensions",1,tls__encrypted_extensions__extensions_domain,"vector[tls.extension]");
    const char *frame__application_close__reason_phrase_domain[1] = {"frame.application_close"};
    mk_decl("frame.application_close.reason_phrase",1,frame__application_close__reason_phrase_domain,"stream_data");
    const char *tls__unknown_message__unknown_message_bytes_domain[1] = {"tls.unknown_message"};
    mk_decl("tls.unknown_message.unknown_message_bytes",1,tls__unknown_message__unknown_message_bytes_domain,"stream_data");
    const char *frame__new_token__length_domain[1] = {"frame.new_token"};
    mk_decl("frame.new_token.length",1,frame__new_token__length_domain,"stream_pos");
    const char *tls__random_bytes_domain[1] = {"tls.random"};
    mk_decl("tls.random_bytes",1,tls__random_bytes_domain,"stream_data");
    const char *is_client_domain[1] = {"cid"};
    mk_decl("is_client",1,is_client_domain,"Bool");
    const char *max_seq_num_domain[1] = {"cid"};
    mk_decl("max_seq_num",1,max_seq_num_domain,"cid_seq");
    const char *quic_packet__arr__value_domain[2] = {"quic_packet.arr","quic_packet.idx"};
    mk_decl("quic_packet.arr.value",2,quic_packet__arr__value_domain,"quic_packet");
    const char *vector__tls__extension____end_domain[1] = {"vector[tls.extension]"};
    mk_decl("vector[tls.extension].end",1,vector__tls__extension____end_domain,"vector[tls.extension].domain");
    const char *vector__transport_parameter____end_domain[1] = {"vector[transport_parameter]"};
    mk_decl("vector[transport_parameter].end",1,vector__transport_parameter____end_domain,"vector[transport_parameter].domain");
    const char *tls_extensions__end_domain[1] = {"tls_extensions"};
    mk_decl("tls_extensions.end",1,tls_extensions__end_domain,"tls_extensions.domain");
    const char *active_connection_id_limit__stream_pos_32_domain[1] = {"active_connection_id_limit"};
    mk_decl("active_connection_id_limit.stream_pos_32",1,active_connection_id_limit__stream_pos_32_domain,"stream_pos");
    const char *quic_packet__ptype_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.ptype",1,quic_packet__ptype_domain,"quic_packet_type");
    const char *get_stream_kind_domain[1] = {"stream_id"};
    mk_decl("get_stream_kind",1,get_stream_kind_domain,"stream_kind");
    const char *frame__connection_close__reason_phrase_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.reason_phrase",1,frame__connection_close__reason_phrase_domain,"stream_data");
    const char *stream_app_data_finished_domain[2] = {"cid","stream_id"};
    mk_decl("stream_app_data_finished",2,stream_app_data_finished_domain,"Bool");
    const char *tls__server_hello__the_cipher_suite_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_cipher_suite",1,tls__server_hello__the_cipher_suite_domain,"tls.cipher_suite");
    mk_const("sock_alt","net.socket");
    const char *nonce_cid_domain[1] = {"cid"};
    mk_decl("nonce_cid",1,nonce_cid_domain,"cid");
    const char *initial_max_data__value_domain[1] = {"trans_params_struct"};
    mk_decl("initial_max_data.value",1,initial_max_data__value_domain,"initial_max_data");
    const char *quic_packet__arr__end_domain[1] = {"quic_packet.arr"};
    mk_decl("quic_packet.arr.end",1,quic_packet__arr__end_domain,"quic_packet.idx");
    const char *frame__new_connection_id__retire_prior_to_domain[1] = {"frame.new_connection_id"};
    mk_decl("frame.new_connection_id.retire_prior_to",1,frame__new_connection_id__retire_prior_to_domain,"cid_seq");
    const char *connected_domain[1] = {"cid"};
    mk_decl("connected",1,connected_domain,"Bool");
    const char *prot__pkt_num_pos_domain[1] = {"prot.header_info"};
    mk_decl("prot.pkt_num_pos",1,prot__pkt_num_pos_domain,"stream_pos");
    const char *conn_seen_domain[1] = {"cid"};
    mk_decl("conn_seen",1,conn_seen_domain,"Bool");
    const char *initial_max_stream_data_bidi_remote__stream_pos_32_domain[1] = {"initial_max_stream_data_bidi_remote"};
    mk_decl("initial_max_stream_data_bidi_remote.stream_pos_32",1,initial_max_stream_data_bidi_remote__stream_pos_32_domain,"stream_pos");
    const char *ack_credit_domain[1] = {"cid"};
    mk_decl("ack_credit",1,ack_credit_domain,"pkt_num");
    const char *max_ack_delay__value_domain[1] = {"trans_params_struct"};
    mk_decl("max_ack_delay.value",1,max_ack_delay__value_domain,"max_ack_delay");
    const char *quic_packet__dst_cid_domain[1] = {"quic_packet"};
    mk_decl("quic_packet.dst_cid",1,quic_packet__dst_cid_domain,"cid");
    const char *stateless_reset_token__is_set_domain[1] = {"trans_params_struct"};
    mk_decl("stateless_reset_token.is_set",1,stateless_reset_token__is_set_domain,"Bool");
    mk_const("server_cid","cid");
    const char *trans_params_domain[1] = {"cid"};
    mk_decl("trans_params",1,trans_params_domain,"trans_params_struct");
    mk_const("_generating","Bool");
    const char *seqnum_to_cid_domain[2] = {"cid","cid_seq"};
    mk_decl("seqnum_to_cid",2,seqnum_to_cid_domain,"cid");
    const char *tls__server_hello__the_compression_method_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.the_compression_method",1,tls__server_hello__the_compression_method_domain,"tls.compression_method");
    const char *cid_to_aid_domain[1] = {"cid"};
    mk_decl("cid_to_aid",1,cid_to_aid_domain,"cid");
    const char *hi_non_probing_domain[1] = {"cid"};
    mk_decl("hi_non_probing",1,hi_non_probing_domain,"pkt_num");
    const char *connected_to_domain[1] = {"cid"};
    mk_decl("connected_to",1,connected_to_domain,"cid");
    const char *tls__server_hello__session_id_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.session_id",1,tls__server_hello__session_id_domain,"stream_data");
    const char *max_stream_data_set_domain[2] = {"cid","stream_id"};
    mk_decl("max_stream_data_set",2,max_stream_data_set_domain,"Bool");
    const char *tls__server_hello__server_version_domain[1] = {"tls.server_hello"};
    mk_decl("tls.server_hello.server_version",1,tls__server_hello__server_version_domain,"tls.protocol_version");
    const char *frame__blocked__pos_domain[1] = {"frame.blocked"};
    mk_decl("frame.blocked.pos",1,frame__blocked__pos_domain,"stream_pos");
    const char *max_stream_domain[2] = {"cid","stream_kind"};
    mk_decl("max_stream",2,max_stream_domain,"stream_id");
    const char *tls_extensions__value_domain[2] = {"tls_extensions","tls_extensions.domain"};
    mk_decl("tls_extensions.value",2,tls_extensions__value_domain,"tls.extension");
    const char *frame__connection_close__frame_type_domain[1] = {"frame.connection_close"};
    mk_decl("frame.connection_close.frame_type",1,frame__connection_close__frame_type_domain,"error_code");
    const char *path_challenge_pending_domain[2] = {"cid","stream_data"};
    mk_decl("path_challenge_pending",2,path_challenge_pending_domain,"Bool");
    const char *sent_pkt_domain[3] = {"cid","quic_packet_type","pkt_num"};
    mk_decl("sent_pkt",3,sent_pkt_domain,"Bool");
    const char *established_1rtt_keys_domain[1] = {"cid"};
    mk_decl("established_1rtt_keys",1,established_1rtt_keys_domain,"Bool");
    const char *__pto__tls__handshake__tls__encrypted_extensions_domain[2] = {"tls.handshake","tls.encrypted_extensions"};
    mk_decl("*>:tls.handshake:tls.encrypted_extensions",2,__pto__tls__handshake__tls__encrypted_extensions_domain,"Bool");
    const char *__pto__frame__frame__blocked_domain[2] = {"frame","frame.blocked"};
    mk_decl("*>:frame:frame.blocked",2,__pto__frame__frame__blocked_domain,"Bool");
    const char *__pto__frame__frame__stream_domain[2] = {"frame","frame.stream"};
    mk_decl("*>:frame:frame.stream",2,__pto__frame__frame__stream_domain,"Bool");
    const char *__pto__frame__frame__application_close_domain[2] = {"frame","frame.application_close"};
    mk_decl("*>:frame:frame.application_close",2,__pto__frame__frame__application_close_domain,"Bool");
    const char *__pto__frame__frame__max_stream_id_domain[2] = {"frame","frame.max_stream_id"};
    mk_decl("*>:frame:frame.max_stream_id",2,__pto__frame__frame__max_stream_id_domain,"Bool");
    const char *__pto__transport_parameter__disable_migration_domain[2] = {"transport_parameter","disable_migration"};
    mk_decl("*>:transport_parameter:disable_migration",2,__pto__transport_parameter__disable_migration_domain,"Bool");
    const char *__pto__frame__frame__ack_domain[2] = {"frame","frame.ack"};
    mk_decl("*>:frame:frame.ack",2,__pto__frame__frame__ack_domain,"Bool");
    const char *__pto__frame__frame__retire_connection_id_domain[2] = {"frame","frame.retire_connection_id"};
    mk_decl("*>:frame:frame.retire_connection_id",2,__pto__frame__frame__retire_connection_id_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_data_domain[2] = {"transport_parameter","initial_max_data"};
    mk_decl("*>:transport_parameter:initial_max_data",2,__pto__transport_parameter__initial_max_data_domain,"Bool");
    const char *__pto__transport_parameter__stateless_reset_token_domain[2] = {"transport_parameter","stateless_reset_token"};
    mk_decl("*>:transport_parameter:stateless_reset_token",2,__pto__transport_parameter__stateless_reset_token_domain,"Bool");
    const char *__pto__tls__extension__tls__unknown_extension_domain[2] = {"tls.extension","tls.unknown_extension"};
    mk_decl("*>:tls.extension:tls.unknown_extension",2,__pto__tls__extension__tls__unknown_extension_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_local_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_local"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_local",2,__pto__transport_parameter__initial_max_stream_data_bidi_local_domain,"Bool");
    const char *__pto__transport_parameter__max_packet_size_domain[2] = {"transport_parameter","max_packet_size"};
    mk_decl("*>:transport_parameter:max_packet_size",2,__pto__transport_parameter__max_packet_size_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_uni_domain[2] = {"transport_parameter","initial_max_stream_data_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_uni",2,__pto__transport_parameter__initial_max_stream_data_uni_domain,"Bool");
    mk_const("__fml:scid","cid");
    const char *__pto__frame__frame__stream_blocked_domain[2] = {"frame","frame.stream_blocked"};
    mk_decl("*>:frame:frame.stream_blocked",2,__pto__frame__frame__stream_blocked_domain,"Bool");
    const char *__pto__frame__frame__max_stream_data_domain[2] = {"frame","frame.max_stream_data"};
    mk_decl("*>:frame:frame.max_stream_data",2,__pto__frame__frame__max_stream_data_domain,"Bool");
    mk_const("__fml:f__frame.crypto.length","stream_pos");
    const char *__pto__frame__frame__crypto_domain[2] = {"frame","frame.crypto"};
    mk_decl("*>:frame:frame.crypto",2,__pto__frame__frame__crypto_domain,"Bool");
    const char *__pto__tls__extension__quic_transport_parameters_domain[2] = {"tls.extension","quic_transport_parameters"};
    mk_decl("*>:tls.extension:quic_transport_parameters",2,__pto__tls__extension__quic_transport_parameters_domain,"Bool");
    const char *__pto__frame__frame__stream_id_blocked_domain[2] = {"frame","frame.stream_id_blocked"};
    mk_decl("*>:frame:frame.stream_id_blocked",2,__pto__frame__frame__stream_id_blocked_domain,"Bool");
    const char *__pto__transport_parameter__idle_timeout_domain[2] = {"transport_parameter","idle_timeout"};
    mk_decl("*>:transport_parameter:idle_timeout",2,__pto__transport_parameter__idle_timeout_domain,"Bool");
    const char *__pto__frame__frame__new_connection_id_domain[2] = {"frame","frame.new_connection_id"};
    mk_decl("*>:frame:frame.new_connection_id",2,__pto__frame__frame__new_connection_id_domain,"Bool");
    mk_const("__fml:f__frame.crypto.offset","stream_pos");
    const char *__pto__tls__handshake__tls__unknown_message_domain[2] = {"tls.handshake","tls.unknown_message"};
    mk_decl("*>:tls.handshake:tls.unknown_message",2,__pto__tls__handshake__tls__unknown_message_domain,"Bool");
    const char *__pto__tls__handshake__tls__client_hello_domain[2] = {"tls.handshake","tls.client_hello"};
    mk_decl("*>:tls.handshake:tls.client_hello",2,__pto__tls__handshake__tls__client_hello_domain,"Bool");
    const char *__pto__frame__frame__connection_close_domain[2] = {"frame","frame.connection_close"};
    mk_decl("*>:frame:frame.connection_close",2,__pto__frame__frame__connection_close_domain,"Bool");
    const char *__pto__transport_parameter__active_connection_id_limit_domain[2] = {"transport_parameter","active_connection_id_limit"};
    mk_decl("*>:transport_parameter:active_connection_id_limit",2,__pto__transport_parameter__active_connection_id_limit_domain,"Bool");
    const char *__pto__frame__frame__stop_sending_domain[2] = {"frame","frame.stop_sending"};
    mk_decl("*>:frame:frame.stop_sending",2,__pto__frame__frame__stop_sending_domain,"Bool");
    mk_const("__fml:dcid","cid");
    const char *__pto__tls__handshake__tls__server_hello_domain[2] = {"tls.handshake","tls.server_hello"};
    mk_decl("*>:tls.handshake:tls.server_hello",2,__pto__tls__handshake__tls__server_hello_domain,"Bool");
    const char *__pto__frame__frame__rst_stream_domain[2] = {"frame","frame.rst_stream"};
    mk_decl("*>:frame:frame.rst_stream",2,__pto__frame__frame__rst_stream_domain,"Bool");
    const char *__pto__frame__frame__new_token_domain[2] = {"frame","frame.new_token"};
    mk_decl("*>:frame:frame.new_token",2,__pto__frame__frame__new_token_domain,"Bool");
    mk_const("__fml:e","quic_packet_type");
    mk_const("__fml:f__frame.crypto.data","stream_data");
    const char *__pto__frame__frame__ping_domain[2] = {"frame","frame.ping"};
    mk_decl("*>:frame:frame.ping",2,__pto__frame__frame__ping_domain,"Bool");
    const char *__pto__transport_parameter__ack_delay_exponent_domain[2] = {"transport_parameter","ack_delay_exponent"};
    mk_decl("*>:transport_parameter:ack_delay_exponent",2,__pto__transport_parameter__ack_delay_exponent_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_bidi_domain[2] = {"transport_parameter","initial_max_stream_id_bidi"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_bidi",2,__pto__transport_parameter__initial_max_stream_id_bidi_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain[2] = {"transport_parameter","initial_max_stream_data_bidi_remote"};
    mk_decl("*>:transport_parameter:initial_max_stream_data_bidi_remote",2,__pto__transport_parameter__initial_max_stream_data_bidi_remote_domain,"Bool");
    const char *__pto__transport_parameter__preferred_address_domain[2] = {"transport_parameter","preferred_address"};
    mk_decl("*>:transport_parameter:preferred_address",2,__pto__transport_parameter__preferred_address_domain,"Bool");
    const char *__pto__frame__frame__max_data_domain[2] = {"frame","frame.max_data"};
    mk_decl("*>:frame:frame.max_data",2,__pto__frame__frame__max_data_domain,"Bool");
    const char *__pto__transport_parameter__max_ack_delay_domain[2] = {"transport_parameter","max_ack_delay"};
    mk_decl("*>:transport_parameter:max_ack_delay",2,__pto__transport_parameter__max_ack_delay_domain,"Bool");
    const char *__pto__transport_parameter__initial_max_stream_id_uni_domain[2] = {"transport_parameter","initial_max_stream_id_uni"};
    mk_decl("*>:transport_parameter:initial_max_stream_id_uni",2,__pto__transport_parameter__initial_max_stream_id_uni_domain,"Bool");
    const char *__pto__frame__frame__path_response_domain[2] = {"frame","frame.path_response"};
    mk_decl("*>:frame:frame.path_response",2,__pto__frame__frame__path_response_domain,"Bool");
    const char *__pto__frame__frame__path_challenge_domain[2] = {"frame","frame.path_challenge"};
    mk_decl("*>:frame:frame.path_challenge",2,__pto__frame__frame__path_challenge_domain,"Bool");
    add("(assert (let ((a!1 (= |__fml:f__frame.crypto.length| "
"              (ite (< (crypto_data_end |__fml:scid| |__fml:e|) "
"                      |__fml:f__frame.crypto.offset|) "
"                   0 "
"                   (- (crypto_data_end |__fml:scid| |__fml:e|) "
"                      |__fml:f__frame.crypto.offset|)))) "
"      (a!2 (forall ((|Z:frame.stream| frame.stream) "
"                    (|Y:frame.stream| frame.stream) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream| |X:frame| |Y:frame.stream|) "
"                      (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|)) "
"                 (= |Y:frame.stream| |Z:frame.stream|)))) "
"      (a!3 (forall ((|Z:frame.ack| frame.ack) "
"                    (|X:frame| frame) "
"                    (|Y:frame.ack| frame.ack)) "
"             (=> (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                      (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|)) "
"                 (= |Y:frame.ack| |Z:frame.ack|)))) "
"      (a!4 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                    (|X:frame| frame) "
"                    (|Z:frame.rst_stream| frame.rst_stream)) "
"             (=> (and (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Y:frame.rst_stream|) "
"                      (|*>:frame:frame.rst_stream| "
"                        |X:frame| "
"                        |Z:frame.rst_stream|)) "
"                 (= |Y:frame.rst_stream| |Z:frame.rst_stream|)))) "
"      (a!5 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                    (|X:frame| frame) "
"                    (|Z:frame.max_stream_id| frame.max_stream_id)) "
"             (=> (and (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Y:frame.max_stream_id|) "
"                      (|*>:frame:frame.max_stream_id| "
"                        |X:frame| "
"                        |Z:frame.max_stream_id|)) "
"                 (= |Y:frame.max_stream_id| |Z:frame.max_stream_id|)))) "
"      (a!6 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                    (|X:frame| frame) "
"                    (|Z:frame.connection_close| frame.connection_close)) "
"             (=> (and (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Y:frame.connection_close|) "
"                      (|*>:frame:frame.connection_close| "
"                        |X:frame| "
"                        |Z:frame.connection_close|)) "
"                 (= |Y:frame.connection_close| |Z:frame.connection_close|)))) "
"      (a!7 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                    (|X:frame| frame) "
"                    (|Y:frame.max_stream_data| frame.max_stream_data)) "
"             (=> (and (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Y:frame.max_stream_data|) "
"                      (|*>:frame:frame.max_stream_data| "
"                        |X:frame| "
"                        |Z:frame.max_stream_data|)) "
"                 (= |Y:frame.max_stream_data| |Z:frame.max_stream_data|)))) "
"      (a!8 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                    (|X:frame| frame)) "
"             (=> (and (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Y:frame.stream_id_blocked|) "
"                      (|*>:frame:frame.stream_id_blocked| "
"                        |X:frame| "
"                        |Z:frame.stream_id_blocked|)) "
"                 (= |Y:frame.stream_id_blocked| |Z:frame.stream_id_blocked|)))) "
"      (a!9 (forall ((|Y:frame.crypto| frame.crypto) "
"                    (|X:frame| frame) "
"                    (|Z:frame.crypto| frame.crypto)) "
"             (=> (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                      (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|)) "
"                 (= |Y:frame.crypto| |Z:frame.crypto|)))) "
"      (a!10 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                       (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|)) "
"                  (= |Y:frame.ping| |Z:frame.ping|)))) "
"      (a!11 (forall ((|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Y:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |Y:frame.application_close| |Z:frame.application_close|)))) "
"      (a!12 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Y:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |Y:frame.new_connection_id| |Z:frame.new_connection_id|)))) "
"      (a!13 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Y:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |Y:frame.path_challenge| |Z:frame.path_challenge|)))) "
"      (a!14 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame.path_response| frame.path_response) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Y:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |Y:frame.path_response| |Z:frame.path_response|)))) "
"      (a!15 (forall ((|Y:frame.new_token| frame.new_token) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Y:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |Y:frame.new_token| |Z:frame.new_token|)))) "
"      (a!16 (forall ((|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_data| frame.max_data)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Y:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|)) "
"                  (= |Y:frame.max_data| |Z:frame.max_data|)))) "
"      (a!17 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Y:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |Y:frame.stream_blocked| |Z:frame.stream_blocked|)))) "
"      (a!18 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Y:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |Y:frame.stop_sending| |Z:frame.stop_sending|)))) "
"      (a!19 (forall ((|Y:frame.blocked| frame.blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|)) "
"                  (= |Y:frame.blocked| |Z:frame.blocked|)))) "
"      (a!20 (forall ((|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame) "
"                     (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Y:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |Y:frame.retire_connection_id| "
"                     |Z:frame.retire_connection_id|)))) "
"      (a!21 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|) "
"                       (|*>:frame:frame.stream| |Y:frame| |Z:frame.stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!22 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|) "
"                       (|*>:frame:frame.ack| |Y:frame| |Z:frame.ack|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!23 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (=> (and (|*>:frame:frame.rst_stream| "
"                         |X:frame| "
"                         |Z:frame.rst_stream|) "
"                       (|*>:frame:frame.rst_stream| "
"                         |Y:frame| "
"                         |Z:frame.rst_stream|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!24 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (=> (and (|*>:frame:frame.max_stream_id| "
"                         |X:frame| "
"                         |Z:frame.max_stream_id|) "
"                       (|*>:frame:frame.max_stream_id| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!25 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (=> (and (|*>:frame:frame.connection_close| "
"                         |X:frame| "
"                         |Z:frame.connection_close|) "
"                       (|*>:frame:frame.connection_close| "
"                         |Y:frame| "
"                         |Z:frame.connection_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!26 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_stream_data| "
"                         |X:frame| "
"                         |Z:frame.max_stream_data|) "
"                       (|*>:frame:frame.max_stream_data| "
"                         |Y:frame| "
"                         |Z:frame.max_stream_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!27 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stream_id_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_id_blocked|) "
"                       (|*>:frame:frame.stream_id_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_id_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!28 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (=> (and (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|) "
"                       (|*>:frame:frame.crypto| |Y:frame| |Z:frame.crypto|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!29 (forall ((|Y:frame| frame) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|) "
"                       (|*>:frame:frame.ping| |Y:frame| |Z:frame.ping|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!30 (forall ((|Y:frame| frame) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.application_close| "
"                         |X:frame| "
"                         |Z:frame.application_close|) "
"                       (|*>:frame:frame.application_close| "
"                         |Y:frame| "
"                         |Z:frame.application_close|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!31 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_connection_id| frame.new_connection_id)) "
"              (=> (and (|*>:frame:frame.new_connection_id| "
"                         |X:frame| "
"                         |Z:frame.new_connection_id|) "
"                       (|*>:frame:frame.new_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.new_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!32 (forall ((|Y:frame| frame) "
"                     (|Z:frame.path_challenge| frame.path_challenge) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_challenge| "
"                         |X:frame| "
"                         |Z:frame.path_challenge|) "
"                       (|*>:frame:frame.path_challenge| "
"                         |Y:frame| "
"                         |Z:frame.path_challenge|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!33 (forall ((|Z:frame.path_response| frame.path_response) "
"                     (|Y:frame| frame) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.path_response| "
"                         |X:frame| "
"                         |Z:frame.path_response|) "
"                       (|*>:frame:frame.path_response| "
"                         |Y:frame| "
"                         |Z:frame.path_response|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!34 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.new_token| frame.new_token)) "
"              (=> (and (|*>:frame:frame.new_token| "
"                         |X:frame| "
"                         |Z:frame.new_token|) "
"                       (|*>:frame:frame.new_token| "
"                         |Y:frame| "
"                         |Z:frame.new_token|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!35 (forall ((|Y:frame| frame) "
"                     (|Z:frame.max_data| frame.max_data) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.max_data| |X:frame| |Z:frame.max_data|) "
"                       (|*>:frame:frame.max_data| |Y:frame| |Z:frame.max_data|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!36 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.stream_blocked| frame.stream_blocked)) "
"              (=> (and (|*>:frame:frame.stream_blocked| "
"                         |X:frame| "
"                         |Z:frame.stream_blocked|) "
"                       (|*>:frame:frame.stream_blocked| "
"                         |Y:frame| "
"                         |Z:frame.stream_blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!37 (forall ((|Y:frame| frame) "
"                     (|Z:frame.stop_sending| frame.stop_sending) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.stop_sending| "
"                         |X:frame| "
"                         |Z:frame.stop_sending|) "
"                       (|*>:frame:frame.stop_sending| "
"                         |Y:frame| "
"                         |Z:frame.stop_sending|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!38 (forall ((|Y:frame| frame) "
"                     (|X:frame| frame) "
"                     (|Z:frame.blocked| frame.blocked)) "
"              (=> (and (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|) "
"                       (|*>:frame:frame.blocked| |Y:frame| |Z:frame.blocked|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!39 (forall ((|Y:frame| frame) "
"                     (|Z:frame.retire_connection_id| frame.retire_connection_id) "
"                     (|X:frame| frame)) "
"              (=> (and (|*>:frame:frame.retire_connection_id| "
"                         |X:frame| "
"                         |Z:frame.retire_connection_id|) "
"                       (|*>:frame:frame.retire_connection_id| "
"                         |Y:frame| "
"                         |Z:frame.retire_connection_id|)) "
"                  (= |X:frame| |Y:frame|)))) "
"      (a!40 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ack| frame.ack)) "
"              (not (and (|*>:frame:frame.ack| |X:frame| |Y:frame.ack|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!41 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.rst_stream| frame.rst_stream) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!42 (forall ((|Y:frame.rst_stream| frame.rst_stream) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Y:frame.rst_stream|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!43 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!44 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!45 (forall ((|Y:frame.max_stream_id| frame.max_stream_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Y:frame.max_stream_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!46 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!47 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!48 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!49 (forall ((|Y:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Y:frame.connection_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!50 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!51 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!52 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!53 (forall ((|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!54 (forall ((|X:frame| frame) "
"                     (|Y:frame.max_stream_data| frame.max_stream_data) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Y:frame.max_stream_data|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!55 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!56 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!57 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!58 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!59 (forall ((|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!60 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Y:frame.stream_id_blocked|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!61 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!62 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!63 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!64 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!65 (forall ((|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!66 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!67 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.crypto| frame.crypto) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.crypto| |X:frame| |Y:frame.crypto|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!68 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!69 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!70 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!71 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!72 (forall ((|Y:frame.ping| frame.ping) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!73 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!74 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.ping| frame.ping)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!75 (forall ((|Y:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.ping| |X:frame| |Y:frame.ping|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!76 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!77 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!78 (forall ((|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!79 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!80 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|Z:frame.connection_close| frame.connection_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!81 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!82 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!83 (forall ((|Y:frame.application_close| frame.application_close) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!84 (forall ((|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame) "
"                     (|Y:frame.application_close| frame.application_close)) "
"              (not (and (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Y:frame.application_close|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!85 (forall ((|Z:frame.stream| frame.stream) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!86 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!87 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!88 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!89 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!90 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.max_stream_data| frame.max_stream_data)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.max_stream_data| "
"                          |X:frame| "
"                          |Z:frame.max_stream_data|))))) "
"      (a!91 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                     (|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.stream_id_blocked| "
"                          |X:frame| "
"                          |Z:frame.stream_id_blocked|))))) "
"      (a!92 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|X:frame| frame) "
"                     (|Z:frame.crypto| frame.crypto)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!93 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.ping| frame.ping) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!94 (forall ((|Y:frame.new_connection_id| frame.new_connection_id) "
"                     (|Z:frame.application_close| frame.application_close) "
"                     (|X:frame| frame)) "
"              (not (and (|*>:frame:frame.new_connection_id| "
"                          |X:frame| "
"                          |Y:frame.new_connection_id|) "
"                        (|*>:frame:frame.application_close| "
"                          |X:frame| "
"                          |Z:frame.application_close|))))) "
"      (a!95 (forall ((|Z:frame.stream| frame.stream) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!96 (forall ((|Z:frame.ack| frame.ack) "
"                     (|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!97 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.rst_stream| frame.rst_stream)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.rst_stream| "
"                          |X:frame| "
"                          |Z:frame.rst_stream|))))) "
"      (a!98 (forall ((|X:frame| frame) "
"                     (|Z:frame.max_stream_id| frame.max_stream_id) "
"                     (|Y:frame.path_challenge| frame.path_challenge)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.max_stream_id| "
"                          |X:frame| "
"                          |Z:frame.max_stream_id|))))) "
"      (a!99 (forall ((|X:frame| frame) "
"                     (|Y:frame.path_challenge| frame.path_challenge) "
"                     (|Z:frame.connection_close| frame.connection_close)) "
"              (not (and (|*>:frame:frame.path_challenge| "
"                          |X:frame| "
"                          |Y:frame.path_challenge|) "
"                        (|*>:frame:frame.connection_close| "
"                          |X:frame| "
"                          |Z:frame.connection_close|))))) "
"      (a!100 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!101 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!102 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!103 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!104 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!105 (forall ((|X:frame| frame) "
"                      (|Y:frame.path_challenge| frame.path_challenge) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Y:frame.path_challenge|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!106 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!107 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!108 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!109 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!110 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!111 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!112 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!113 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!114 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!115 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!116 (forall ((|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!117 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Y:frame.path_response|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!118 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!119 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!120 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!121 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!122 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!123 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!124 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!125 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!126 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!127 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!128 (forall ((|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!129 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!130 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.new_token| frame.new_token) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Y:frame.new_token|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!131 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!132 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!133 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!134 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!135 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!136 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!137 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!138 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!139 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!140 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!141 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!142 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!143 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!144 (forall ((|X:frame| frame) "
"                      (|Y:frame.max_data| frame.max_data) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Y:frame.max_data|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!145 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!146 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!147 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!148 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!149 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!150 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!151 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!152 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!153 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!154 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!155 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!156 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!157 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!158 (forall ((|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!159 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.stream_blocked| frame.stream_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Y:frame.stream_blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!160 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!161 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!162 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!163 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!164 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!165 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!166 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!167 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!168 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!169 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!170 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!171 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!172 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!173 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!174 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!175 (forall ((|Y:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Y:frame.stop_sending|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!176 (forall ((|Z:frame.stream| frame.stream) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!177 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!178 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!179 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!180 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.connection_close| frame.connection_close)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!181 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!182 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!183 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!184 (forall ((|Z:frame.ping| frame.ping) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!185 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!186 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!187 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!188 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!189 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!190 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!191 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!192 (forall ((|Y:frame.blocked| frame.blocked) "
"                      (|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.blocked| |X:frame| |Y:frame.blocked|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!193 (forall ((|Z:frame.stream| frame.stream) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream| |X:frame| |Z:frame.stream|))))) "
"      (a!194 (forall ((|Z:frame.ack| frame.ack) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ack| |X:frame| |Z:frame.ack|))))) "
"      (a!195 (forall ((|X:frame| frame) "
"                      (|Z:frame.rst_stream| frame.rst_stream) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.rst_stream| "
"                           |X:frame| "
"                           |Z:frame.rst_stream|))))) "
"      (a!196 (forall ((|X:frame| frame) "
"                      (|Z:frame.max_stream_id| frame.max_stream_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_id| "
"                           |X:frame| "
"                           |Z:frame.max_stream_id|))))) "
"      (a!197 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|Z:frame.connection_close| frame.connection_close) "
"                      (|X:frame| frame)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.connection_close| "
"                           |X:frame| "
"                           |Z:frame.connection_close|))))) "
"      (a!198 (forall ((|Z:frame.max_stream_data| frame.max_stream_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_stream_data| "
"                           |X:frame| "
"                           |Z:frame.max_stream_data|))))) "
"      (a!199 (forall ((|Z:frame.stream_id_blocked| frame.stream_id_blocked) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_id_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_id_blocked|))))) "
"      (a!200 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.crypto| frame.crypto)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.crypto| |X:frame| |Z:frame.crypto|))))) "
"      (a!201 (forall ((|Z:frame.ping| frame.ping) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.ping| |X:frame| |Z:frame.ping|))))) "
"      (a!202 (forall ((|Z:frame.application_close| frame.application_close) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.application_close| "
"                           |X:frame| "
"                           |Z:frame.application_close|))))) "
"      (a!203 (forall ((|X:frame| frame) "
"                      (|Z:frame.new_connection_id| frame.new_connection_id) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_connection_id| "
"                           |X:frame| "
"                           |Z:frame.new_connection_id|))))) "
"      (a!204 (forall ((|Z:frame.path_challenge| frame.path_challenge) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_challenge| "
"                           |X:frame| "
"                           |Z:frame.path_challenge|))))) "
"      (a!205 (forall ((|Z:frame.path_response| frame.path_response) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.path_response| "
"                           |X:frame| "
"                           |Z:frame.path_response|))))) "
"      (a!206 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.new_token| frame.new_token)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.new_token| "
"                           |X:frame| "
"                           |Z:frame.new_token|))))) "
"      (a!207 (forall ((|Z:frame.max_data| frame.max_data) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.max_data| "
"                           |X:frame| "
"                           |Z:frame.max_data|))))) "
"      (a!208 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.stream_blocked| frame.stream_blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stream_blocked| "
"                           |X:frame| "
"                           |Z:frame.stream_blocked|))))) "
"      (a!209 (forall ((|Z:frame.stop_sending| frame.stop_sending) "
"                      (|X:frame| frame) "
"                      (|Y:frame.retire_connection_id| frame.retire_connection_id)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.stop_sending| "
"                           |X:frame| "
"                           |Z:frame.stop_sending|))))) "
"      (a!210 (forall ((|Y:frame.retire_connection_id| frame.retire_connection_id) "
"                      (|X:frame| frame) "
"                      (|Z:frame.blocked| frame.blocked)) "
"               (not (and (|*>:frame:frame.retire_connection_id| "
"                           |X:frame| "
"                           |Y:frame.retire_connection_id|) "
"                         (|*>:frame:frame.blocked| |X:frame| |Z:frame.blocked|))))) "
"      (a!211 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.unknown_extension| tls.unknown_extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Y:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |Y:tls.unknown_extension| |Z:tls.unknown_extension|)))) "
"      (a!212 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Y:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |Y:quic_transport_parameters| "
"                      |Z:quic_transport_parameters|)))) "
"      (a!213 (forall ((|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:tls.unknown_extension| "
"                          |X:tls.extension| "
"                          |Z:tls.unknown_extension|) "
"                        (|*>:tls.extension:tls.unknown_extension| "
"                          |Y:tls.extension| "
"                          |Z:tls.unknown_extension|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!214 (forall ((|Z:quic_transport_parameters| quic_transport_parameters) "
"                      (|X:tls.extension| tls.extension) "
"                      (|Y:tls.extension| tls.extension)) "
"               (=> (and (|*>:tls.extension:quic_transport_parameters| "
"                          |X:tls.extension| "
"                          |Z:quic_transport_parameters|) "
"                        (|*>:tls.extension:quic_transport_parameters| "
"                          |Y:tls.extension| "
"                          |Z:quic_transport_parameters|)) "
"                   (= |X:tls.extension| |Y:tls.extension|)))) "
"      (a!215 (forall ((|Y:quic_transport_parameters| quic_transport_parameters) "
"                      (|Z:tls.unknown_extension| tls.unknown_extension) "
"                      (|X:tls.extension| tls.extension)) "
"               (not (and (|*>:tls.extension:quic_transport_parameters| "
"                           |X:tls.extension| "
"                           |Y:quic_transport_parameters|) "
"                         (|*>:tls.extension:tls.unknown_extension| "
"                           |X:tls.extension| "
"                           |Z:tls.unknown_extension|))))) "
"      (a!216 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |Y:tls.client_hello| |Z:tls.client_hello|)))) "
"      (a!217 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Y:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |Y:tls.server_hello| |Z:tls.server_hello|)))) "
"      (a!218 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Y:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |Y:tls.encrypted_extensions| |Z:tls.encrypted_extensions|)))) "
"      (a!219 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Y:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |Y:tls.unknown_message| |Z:tls.unknown_message|)))) "
"      (a!220 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (=> (and (|*>:tls.handshake:tls.client_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.client_hello|) "
"                        (|*>:tls.handshake:tls.client_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.client_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!221 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.server_hello| "
"                          |X:tls.handshake| "
"                          |Z:tls.server_hello|) "
"                        (|*>:tls.handshake:tls.server_hello| "
"                          |Y:tls.handshake| "
"                          |Z:tls.server_hello|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!222 (forall ((|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake)) "
"               (=> (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |X:tls.handshake| "
"                          |Z:tls.encrypted_extensions|) "
"                        (|*>:tls.handshake:tls.encrypted_extensions| "
"                          |Y:tls.handshake| "
"                          |Z:tls.encrypted_extensions|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!223 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.handshake| tls.handshake) "
"                      (|Z:tls.unknown_message| tls.unknown_message)) "
"               (=> (and (|*>:tls.handshake:tls.unknown_message| "
"                          |X:tls.handshake| "
"                          |Z:tls.unknown_message|) "
"                        (|*>:tls.handshake:tls.unknown_message| "
"                          |Y:tls.handshake| "
"                          |Z:tls.unknown_message|)) "
"                   (= |X:tls.handshake| |Y:tls.handshake|)))) "
"      (a!224 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.server_hello| tls.server_hello) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Y:tls.server_hello|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!225 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!226 (forall ((|Y:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake)) "
"               (not (and (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Y:tls.encrypted_extensions|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!227 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.client_hello| tls.client_hello) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.client_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.client_hello|))))) "
"      (a!228 (forall ((|Z:tls.server_hello| tls.server_hello) "
"                      (|X:tls.handshake| tls.handshake) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.server_hello| "
"                           |X:tls.handshake| "
"                           |Z:tls.server_hello|))))) "
"      (a!229 (forall ((|X:tls.handshake| tls.handshake) "
"                      (|Z:tls.encrypted_extensions| tls.encrypted_extensions) "
"                      (|Y:tls.unknown_message| tls.unknown_message)) "
"               (not (and (|*>:tls.handshake:tls.unknown_message| "
"                           |X:tls.handshake| "
"                           |Y:tls.unknown_message|) "
"                         (|*>:tls.handshake:tls.encrypted_extensions| "
"                           |X:tls.handshake| "
"                           |Z:tls.encrypted_extensions|))))) "
"      (a!230 (forall ((|Y:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |Y:initial_max_stream_data_bidi_local| "
"                      |Z:initial_max_stream_data_bidi_local|)))) "
"      (a!231 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |Y:initial_max_data| |Z:initial_max_data|)))) "
"      (a!232 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |Y:initial_max_stream_id_bidi| "
"                      |Z:initial_max_stream_id_bidi|)))) "
"      (a!233 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Y:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |Y:idle_timeout| |Z:idle_timeout|)))) "
"      (a!234 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Y:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |Y:preferred_address| |Z:preferred_address|)))) "
"      (a!235 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Y:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |Y:max_packet_size| |Z:max_packet_size|)))) "
"      (a!236 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Y:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |Y:stateless_reset_token| |Z:stateless_reset_token|)))) "
"      (a!237 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Y:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |Y:ack_delay_exponent| |Z:ack_delay_exponent|)))) "
"      (a!238 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |Y:initial_max_stream_id_uni| "
"                      |Z:initial_max_stream_id_uni|)))) "
"      (a!239 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Y:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |Y:disable_migration| |Z:disable_migration|)))) "
"      (a!240 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |Y:initial_max_stream_data_bidi_remote| "
"                      |Z:initial_max_stream_data_bidi_remote|)))) "
"      (a!241 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Y:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |Y:initial_max_stream_data_uni| "
"                      |Z:initial_max_stream_data_uni|)))) "
"      (a!242 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Y:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |Y:max_ack_delay| |Z:max_ack_delay|)))) "
"      (a!243 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Y:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |Y:active_connection_id_limit| "
"                      |Z:active_connection_id_limit|)))) "
"      (a!244 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_local|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!245 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_data| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_data|) "
"                        (|*>:transport_parameter:initial_max_data| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_data|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!246 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|) "
"                        (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_bidi|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!247 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:idle_timeout| "
"                          |X:transport_parameter| "
"                          |Z:idle_timeout|) "
"                        (|*>:transport_parameter:idle_timeout| "
"                          |Y:transport_parameter| "
"                          |Z:idle_timeout|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!248 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (=> (and (|*>:transport_parameter:preferred_address| "
"                          |X:transport_parameter| "
"                          |Z:preferred_address|) "
"                        (|*>:transport_parameter:preferred_address| "
"                          |Y:transport_parameter| "
"                          |Z:preferred_address|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!249 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:max_packet_size| "
"                          |X:transport_parameter| "
"                          |Z:max_packet_size|) "
"                        (|*>:transport_parameter:max_packet_size| "
"                          |Y:transport_parameter| "
"                          |Z:max_packet_size|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!250 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (=> (and (|*>:transport_parameter:stateless_reset_token| "
"                          |X:transport_parameter| "
"                          |Z:stateless_reset_token|) "
"                        (|*>:transport_parameter:stateless_reset_token| "
"                          |Y:transport_parameter| "
"                          |Z:stateless_reset_token|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!251 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (=> (and (|*>:transport_parameter:ack_delay_exponent| "
"                          |X:transport_parameter| "
"                          |Z:ack_delay_exponent|) "
"                        (|*>:transport_parameter:ack_delay_exponent| "
"                          |Y:transport_parameter| "
"                          |Z:ack_delay_exponent|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!252 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_id_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_id_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!253 (forall ((|Z:disable_migration| disable_migration) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:disable_migration| "
"                          |X:transport_parameter| "
"                          |Z:disable_migration|) "
"                        (|*>:transport_parameter:disable_migration| "
"                          |Y:transport_parameter| "
"                          |Z:disable_migration|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!254 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|) "
"                        (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_bidi_remote|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!255 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |X:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|) "
"                        (|*>:transport_parameter:initial_max_stream_data_uni| "
"                          |Y:transport_parameter| "
"                          |Z:initial_max_stream_data_uni|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!256 (forall ((|Y:transport_parameter| transport_parameter) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (=> (and (|*>:transport_parameter:max_ack_delay| "
"                          |X:transport_parameter| "
"                          |Z:max_ack_delay|) "
"                        (|*>:transport_parameter:max_ack_delay| "
"                          |Y:transport_parameter| "
"                          |Z:max_ack_delay|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!257 (forall ((|Z:active_connection_id_limit| active_connection_id_limit) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:transport_parameter| transport_parameter)) "
"               (=> (and (|*>:transport_parameter:active_connection_id_limit| "
"                          |X:transport_parameter| "
"                          |Z:active_connection_id_limit|) "
"                        (|*>:transport_parameter:active_connection_id_limit| "
"                          |Y:transport_parameter| "
"                          |Z:active_connection_id_limit|)) "
"                   (= |X:transport_parameter| |Y:transport_parameter|)))) "
"      (a!258 (forall ((|Y:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_data|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!259 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!260 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_bidi| initial_max_stream_id_bidi)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_bidi|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!261 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!262 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!263 (forall ((|Y:idle_timeout| idle_timeout) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Y:idle_timeout|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!264 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!265 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!266 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!267 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Y:preferred_address|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!268 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!269 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!270 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!271 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!272 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Y:max_packet_size|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!273 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!274 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!275 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!276 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!277 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!278 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Y:stateless_reset_token|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!279 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!280 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!281 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!282 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!283 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!284 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!285 (forall ((|Y:ack_delay_exponent| ack_delay_exponent) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Y:ack_delay_exponent|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!286 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!287 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!288 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!289 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!290 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!291 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!292 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!293 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_id_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!294 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!295 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!296 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!297 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!298 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!299 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!300 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!301 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!302 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Y:disable_migration|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!303 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!304 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!305 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!306 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!307 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!308 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!309 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!310 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!311 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!312 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_bidi_remote|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!313 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!314 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!315 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!316 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!317 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!318 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!319 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!320 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!321 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!322 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!323 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:initial_max_stream_data_uni| initial_max_stream_data_uni)) "
"               (not (and (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Y:initial_max_stream_data_uni|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!324 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!325 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!326 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!327 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!328 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!329 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:max_packet_size| max_packet_size)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!330 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!331 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!332 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_id_uni| initial_max_stream_id_uni)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!333 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:disable_migration| disable_migration)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!334 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!335 (forall ((|Y:max_ack_delay| max_ack_delay) "
"                      (|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter)) "
"               (not (and (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Y:max_ack_delay|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!336 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:initial_max_stream_data_bidi_local| initial_max_stream_data_bidi_local)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_local| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_local|))))) "
"      (a!337 (forall ((|Z:initial_max_data| initial_max_data) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_data| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_data|))))) "
"      (a!338 (forall ((|Z:initial_max_stream_id_bidi| initial_max_stream_id_bidi) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_bidi| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_bidi|))))) "
"      (a!339 (forall ((|Z:idle_timeout| idle_timeout) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:idle_timeout| "
"                           |X:transport_parameter| "
"                           |Z:idle_timeout|))))) "
"      (a!340 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:preferred_address| preferred_address) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:preferred_address| "
"                           |X:transport_parameter| "
"                           |Z:preferred_address|))))) "
"      (a!341 (forall ((|Z:max_packet_size| max_packet_size) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_packet_size| "
"                           |X:transport_parameter| "
"                           |Z:max_packet_size|))))) "
"      (a!342 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Z:stateless_reset_token| stateless_reset_token) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:stateless_reset_token| "
"                           |X:transport_parameter| "
"                           |Z:stateless_reset_token|))))) "
"      (a!343 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:ack_delay_exponent| ack_delay_exponent)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:ack_delay_exponent| "
"                           |X:transport_parameter| "
"                           |Z:ack_delay_exponent|))))) "
"      (a!344 (forall ((|Z:initial_max_stream_id_uni| initial_max_stream_id_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_id_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_id_uni|))))) "
"      (a!345 (forall ((|Z:disable_migration| disable_migration) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:disable_migration| "
"                           |X:transport_parameter| "
"                           |Z:disable_migration|))))) "
"      (a!346 (forall ((|Z:initial_max_stream_data_bidi_remote| initial_max_stream_data_bidi_remote) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_bidi_remote| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_bidi_remote|))))) "
"      (a!347 (forall ((|Z:initial_max_stream_data_uni| initial_max_stream_data_uni) "
"                      (|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:initial_max_stream_data_uni| "
"                           |X:transport_parameter| "
"                           |Z:initial_max_stream_data_uni|))))) "
"      (a!348 (forall ((|X:transport_parameter| transport_parameter) "
"                      (|Y:active_connection_id_limit| active_connection_id_limit) "
"                      (|Z:max_ack_delay| max_ack_delay)) "
"               (not (and (|*>:transport_parameter:active_connection_id_limit| "
"                           |X:transport_parameter| "
"                           |Y:active_connection_id_limit|) "
"                         (|*>:transport_parameter:max_ack_delay| "
"                           |X:transport_parameter| "
"                           |Z:max_ack_delay|))))) "
"      (a!349 (forall ((|X0:cid| (_ BitVec 2))) "
"               (not (< (num_queued_frames |X0:cid|) 0)))) "
"      (a!350 (forall ((|X0:cid| (_ BitVec 2)) "
"                      (|X1:quic_packet_type| quic_packet_type)) "
"               (not (< (crypto_length |X0:cid| |X1:quic_packet_type|) 0)))) "
"      (a!351 (forall ((|X0:cid| (_ BitVec 2)) "
"                      (|X1:quic_packet_type| quic_packet_type)) "
"               (not (< (crypto_data_end |X0:cid| |X1:quic_packet_type|) 0))))) "
"  (and (=> (> (num_queued_frames |__fml:scid|) 0) "
"           (= |__fml:e| (queued_level |__fml:scid|))) "
"       (<= (+ |__fml:f__frame.crypto.offset| |__fml:f__frame.crypto.length|) "
"           (crypto_data_end |__fml:scid| |__fml:e|)) "
"       (or (not _generating) (= |__fml:scid| the_cid)) "
"       (or (not _generating) (> |__fml:f__frame.crypto.length| 0)) "
"       (or (not _generating) "
"           (= |__fml:f__frame.crypto.offset| "
"              (crypto_length |__fml:scid| |__fml:e|))) "
"       (or (not _generating) a!1) "
"       a!2 "
"       a!3 "
"       a!4 "
"       a!5 "
"       a!6 "
"       a!7 "
"       a!8 "
"       a!9 "
"       a!10 "
"       a!11 "
"       a!12 "
"       a!13 "
"       a!14 "
"       a!15 "
"       a!16 "
"       a!17 "
"       a!18 "
"       a!19 "
"       a!20 "
"       a!21 "
"       a!22 "
"       a!23 "
"       a!24 "
"       a!25 "
"       a!26 "
"       a!27 "
"       a!28 "
"       a!29 "
"       a!30 "
"       a!31 "
"       a!32 "
"       a!33 "
"       a!34 "
"       a!35 "
"       a!36 "
"       a!37 "
"       a!38 "
"       a!39 "
"       a!40 "
"       a!41 "
"       a!42 "
"       a!43 "
"       a!44 "
"       a!45 "
"       a!46 "
"       a!47 "
"       a!48 "
"       a!49 "
"       a!50 "
"       a!51 "
"       a!52 "
"       a!53 "
"       a!54 "
"       a!55 "
"       a!56 "
"       a!57 "
"       a!58 "
"       a!59 "
"       a!60 "
"       a!61 "
"       a!62 "
"       a!63 "
"       a!64 "
"       a!65 "
"       a!66 "
"       a!67 "
"       a!68 "
"       a!69 "
"       a!70 "
"       a!71 "
"       a!72 "
"       a!73 "
"       a!74 "
"       a!75 "
"       a!76 "
"       a!77 "
"       a!78 "
"       a!79 "
"       a!80 "
"       a!81 "
"       a!82 "
"       a!83 "
"       a!84 "
"       a!85 "
"       a!86 "
"       a!87 "
"       a!88 "
"       a!89 "
"       a!90 "
"       a!91 "
"       a!92 "
"       a!93 "
"       a!94 "
"       a!95 "
"       a!96 "
"       a!97 "
"       a!98 "
"       a!99 "
"       a!100 "
"       a!101 "
"       a!102 "
"       a!103 "
"       a!104 "
"       a!105 "
"       a!106 "
"       a!107 "
"       a!108 "
"       a!109 "
"       a!110 "
"       a!111 "
"       a!112 "
"       a!113 "
"       a!114 "
"       a!115 "
"       a!116 "
"       a!117 "
"       a!118 "
"       a!119 "
"       a!120 "
"       a!121 "
"       a!122 "
"       a!123 "
"       a!124 "
"       a!125 "
"       a!126 "
"       a!127 "
"       a!128 "
"       a!129 "
"       a!130 "
"       a!131 "
"       a!132 "
"       a!133 "
"       a!134 "
"       a!135 "
"       a!136 "
"       a!137 "
"       a!138 "
"       a!139 "
"       a!140 "
"       a!141 "
"       a!142 "
"       a!143 "
"       a!144 "
"       a!145 "
"       a!146 "
"       a!147 "
"       a!148 "
"       a!149 "
"       a!150 "
"       a!151 "
"       a!152 "
"       a!153 "
"       a!154 "
"       a!155 "
"       a!156 "
"       a!157 "
"       a!158 "
"       a!159 "
"       a!160 "
"       a!161 "
"       a!162 "
"       a!163 "
"       a!164 "
"       a!165 "
"       a!166 "
"       a!167 "
"       a!168 "
"       a!169 "
"       a!170 "
"       a!171 "
"       a!172 "
"       a!173 "
"       a!174 "
"       a!175 "
"       a!176 "
"       a!177 "
"       a!178 "
"       a!179 "
"       a!180 "
"       a!181 "
"       a!182 "
"       a!183 "
"       a!184 "
"       a!185 "
"       a!186 "
"       a!187 "
"       a!188 "
"       a!189 "
"       a!190 "
"       a!191 "
"       a!192 "
"       a!193 "
"       a!194 "
"       a!195 "
"       a!196 "
"       a!197 "
"       a!198 "
"       a!199 "
"       a!200 "
"       a!201 "
"       a!202 "
"       a!203 "
"       a!204 "
"       a!205 "
"       a!206 "
"       a!207 "
"       a!208 "
"       a!209 "
"       a!210 "
"       a!211 "
"       a!212 "
"       a!213 "
"       a!214 "
"       a!215 "
"       a!216 "
"       a!217 "
"       a!218 "
"       a!219 "
"       a!220 "
"       a!221 "
"       a!222 "
"       a!223 "
"       a!224 "
"       a!225 "
"       a!226 "
"       a!227 "
"       a!228 "
"       a!229 "
"       a!230 "
"       a!231 "
"       a!232 "
"       a!233 "
"       a!234 "
"       a!235 "
"       a!236 "
"       a!237 "
"       a!238 "
"       a!239 "
"       a!240 "
"       a!241 "
"       a!242 "
"       a!243 "
"       a!244 "
"       a!245 "
"       a!246 "
"       a!247 "
"       a!248 "
"       a!249 "
"       a!250 "
"       a!251 "
"       a!252 "
"       a!253 "
"       a!254 "
"       a!255 "
"       a!256 "
"       a!257 "
"       a!258 "
"       a!259 "
"       a!260 "
"       a!261 "
"       a!262 "
"       a!263 "
"       a!264 "
"       a!265 "
"       a!266 "
"       a!267 "
"       a!268 "
"       a!269 "
"       a!270 "
"       a!271 "
"       a!272 "
"       a!273 "
"       a!274 "
"       a!275 "
"       a!276 "
"       a!277 "
"       a!278 "
"       a!279 "
"       a!280 "
"       a!281 "
"       a!282 "
"       a!283 "
"       a!284 "
"       a!285 "
"       a!286 "
"       a!287 "
"       a!288 "
"       a!289 "
"       a!290 "
"       a!291 "
"       a!292 "
"       a!293 "
"       a!294 "
"       a!295 "
"       a!296 "
"       a!297 "
"       a!298 "
"       a!299 "
"       a!300 "
"       a!301 "
"       a!302 "
"       a!303 "
"       a!304 "
"       a!305 "
"       a!306 "
"       a!307 "
"       a!308 "
"       a!309 "
"       a!310 "
"       a!311 "
"       a!312 "
"       a!313 "
"       a!314 "
"       a!315 "
"       a!316 "
"       a!317 "
"       a!318 "
"       a!319 "
"       a!320 "
"       a!321 "
"       a!322 "
"       a!323 "
"       a!324 "
"       a!325 "
"       a!326 "
"       a!327 "
"       a!328 "
"       a!329 "
"       a!330 "
"       a!331 "
"       a!332 "
"       a!333 "
"       a!334 "
"       a!335 "
"       a!336 "
"       a!337 "
"       a!338 "
"       a!339 "
"       a!340 "
"       a!341 "
"       a!342 "
"       a!343 "
"       a!344 "
"       a!345 "
"       a!346 "
"       a!347 "
"       a!348 "
"       a!349 "
"       (not (< |__fml:f__frame.crypto.length| 0)) "
"       (not (< |__fml:f__frame.crypto.offset| 0)) "
"       a!350 "
"       a!351)))");
}
bool ext__frame__crypto__handle_gen::generate(quic_server_test_connection_close& obj) {
    push();
    quic_server_test_connection_close::cid::prepare();
    quic_server_test_connection_close::tls__handshake::prepare();
    quic_server_test_connection_close::tls__extension::prepare();
    quic_server_test_connection_close::frame::prepare();
    quic_server_test_connection_close::transport_parameter::prepare();
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("num_queued_frames",ctx.constant("X__0",sort("cid"))),obj.num_queued_frames)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),__to_solver(*this,apply("crypto_data_end",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type"))),obj.crypto_data_end)));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),__to_solver(*this,apply("queued_level",ctx.constant("X__0",sort("cid"))),obj.queued_level)));
    slvr.add(__to_solver(*this,apply("the_cid"),obj.the_cid));
    slvr.add(forall(ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type")),__to_solver(*this,apply("crypto_length",ctx.constant("X__0",sort("cid")),ctx.constant("X__1",sort("quic_packet_type"))),obj.crypto_length)));
    slvr.add(__to_solver(*this,apply("_generating"),obj._generating));
    alits.clear();
    randomize("__fml:f__frame.crypto.length");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"));
    randomize("__fml:e");
    __randomize<quic_server_test_connection_close::stream_data>(*this,apply("__fml:f__frame.crypto.data"));
    randomize("__fml:f__frame.crypto.offset");
    __randomize<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"));

    // std::cout << slvr << std::endl;
    bool __res = solve();
    if (__res) {
        f.length = (unsigned long long)eval_apply("__fml:f__frame.crypto.length");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:dcid"),dcid);
        e = (quic_server_test_connection_close::quic_packet_type)eval_apply("__fml:e");
        f.offset = (unsigned long long)eval_apply("__fml:f__frame.crypto.offset");
                __from_solver<quic_server_test_connection_close::cid>(*this,apply("__fml:scid"),scid);
    hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,quic_server_test_connection_close::stream_data> (&crypto_data) = obj.crypto_data;
        f.data = obj.stream_data__segment(crypto_data[quic_server_test_connection_close::__tup__cid__quic_packet_type(scid,e)],f.offset,(f.offset + f.length));

    }quic_server_test_connection_close::cid::cleanup();
quic_server_test_connection_close::tls__handshake::cleanup();
quic_server_test_connection_close::tls__extension::cleanup();
quic_server_test_connection_close::frame::cleanup();
quic_server_test_connection_close::transport_parameter::cleanup();

    pop();
    obj.___ivy_gen = this;
    return __res;
}
void ext__frame__crypto__handle_gen::execute(quic_server_test_connection_close& obj){
    __ivy_out << "> frame.crypto.handle(" << f << ","  << scid << ","  << dcid << ","  << e << ")" << std::endl;
    obj.ext__frame__crypto__handle(f,scid,dcid,e);
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__unknown_extension &t){
    s<<"{";
    s<< "etype:";
    s << t.etype;
    s<<",";
    s<< "content:";
    s << t.content;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__unknown_extension>(ivy_ser &res, const quic_server_test_connection_close::tls__unknown_extension&t){
    res.open_struct();
    res.open_field("etype");
    __ser<unsigned>(res,t.etype);
    res.close_field();
    res.open_field("content");
    __ser<quic_server_test_connection_close::stream_data>(res,t.content);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__random &t){
    s<<"{";
    s<< "gmt_unix_time:";
    s << t.gmt_unix_time;
    s<<",";
    s<< "random_bytes:";
    s << t.random_bytes;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__random>(ivy_ser &res, const quic_server_test_connection_close::tls__random&t){
    res.open_struct();
    res.open_field("gmt_unix_time");
    __ser<unsigned>(res,t.gmt_unix_time);
    res.close_field();
    res.open_field("random_bytes");
    __ser<quic_server_test_connection_close::stream_data>(res,t.random_bytes);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__client_hello &t){
    s<<"{";
    s<< "client_version:";
    s << t.client_version;
    s<<",";
    s<< "rand_info:";
    s << t.rand_info;
    s<<",";
    s<< "session_id:";
    s << t.session_id;
    s<<",";
    s<< "cipher_suites:";
    s << t.cipher_suites;
    s<<",";
    s<< "compression_methods:";
    s << t.compression_methods;
    s<<",";
    s<< "extensions:";
    s << t.extensions;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__client_hello>(ivy_ser &res, const quic_server_test_connection_close::tls__client_hello&t){
    res.open_struct();
    res.open_field("client_version");
    __ser<unsigned>(res,t.client_version);
    res.close_field();
    res.open_field("rand_info");
    __ser<quic_server_test_connection_close::tls__random>(res,t.rand_info);
    res.close_field();
    res.open_field("session_id");
    __ser<quic_server_test_connection_close::stream_data>(res,t.session_id);
    res.close_field();
    res.open_field("cipher_suites");
    __ser<quic_server_test_connection_close::vector__tls__cipher_suite__>(res,t.cipher_suites);
    res.close_field();
    res.open_field("compression_methods");
    __ser<quic_server_test_connection_close::vector__tls__compression_method__>(res,t.compression_methods);
    res.close_field();
    res.open_field("extensions");
    __ser<quic_server_test_connection_close::vector__tls__extension__>(res,t.extensions);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__server_hello &t){
    s<<"{";
    s<< "server_version:";
    s << t.server_version;
    s<<",";
    s<< "rand_info:";
    s << t.rand_info;
    s<<",";
    s<< "session_id:";
    s << t.session_id;
    s<<",";
    s<< "the_cipher_suite:";
    s << t.the_cipher_suite;
    s<<",";
    s<< "the_compression_method:";
    s << t.the_compression_method;
    s<<",";
    s<< "extensions:";
    s << t.extensions;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__server_hello>(ivy_ser &res, const quic_server_test_connection_close::tls__server_hello&t){
    res.open_struct();
    res.open_field("server_version");
    __ser<unsigned>(res,t.server_version);
    res.close_field();
    res.open_field("rand_info");
    __ser<quic_server_test_connection_close::tls__random>(res,t.rand_info);
    res.close_field();
    res.open_field("session_id");
    __ser<quic_server_test_connection_close::stream_data>(res,t.session_id);
    res.close_field();
    res.open_field("the_cipher_suite");
    __ser<unsigned>(res,t.the_cipher_suite);
    res.close_field();
    res.open_field("the_compression_method");
    __ser<unsigned>(res,t.the_compression_method);
    res.close_field();
    res.open_field("extensions");
    __ser<quic_server_test_connection_close::vector__tls__extension__>(res,t.extensions);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__encrypted_extensions &t){
    s<<"{";
    s<< "extensions:";
    s << t.extensions;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__encrypted_extensions>(ivy_ser &res, const quic_server_test_connection_close::tls__encrypted_extensions&t){
    res.open_struct();
    res.open_field("extensions");
    __ser<quic_server_test_connection_close::vector__tls__extension__>(res,t.extensions);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__unknown_message &t){
    s<<"{";
    s<< "mtype:";
    s << t.mtype;
    s<<",";
    s<< "unknown_message_bytes:";
    s << t.unknown_message_bytes;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__unknown_message>(ivy_ser &res, const quic_server_test_connection_close::tls__unknown_message&t){
    res.open_struct();
    res.open_field("mtype");
    __ser<unsigned>(res,t.mtype);
    res.close_field();
    res.open_field("unknown_message_bytes");
    __ser<quic_server_test_connection_close::stream_data>(res,t.unknown_message_bytes);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::ip__endpoint &t){
    s<<"{";
    s<< "protocol:";
    s << t.protocol;
    s<<",";
    s<< "addr:";
    s << t.addr;
    s<<",";
    s<< "port:";
    s << t.port;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::ip__endpoint>(ivy_ser &res, const quic_server_test_connection_close::ip__endpoint&t){
    res.open_struct();
    res.open_field("protocol");
    __ser<quic_server_test_connection_close::ip__protocol>(res,t.protocol);
    res.close_field();
    res.open_field("addr");
    __ser<unsigned>(res,t.addr);
    res.close_field();
    res.open_field("port");
    __ser<unsigned>(res,t.port);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls__handshake_parser__result &t){
    s<<"{";
    s<< "pos:";
    s << t.pos;
    s<<",";
    s<< "value:";
    s << t.value;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls__handshake_parser__result>(ivy_ser &res, const quic_server_test_connection_close::tls__handshake_parser__result&t){
    res.open_struct();
    res.open_field("pos");
    __ser<unsigned long long>(res,t.pos);
    res.close_field();
    res.open_field("value");
    __ser<quic_server_test_connection_close::tls__handshakes>(res,t.value);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stream &t){
    s<<"{";
    s<< "off:";
    s << t.off;
    s<<",";
    s<< "len:";
    s << t.len;
    s<<",";
    s<< "fin:";
    s << t.fin;
    s<<",";
    s<< "id:";
    s << t.id;
    s<<",";
    s<< "offset:";
    s << t.offset;
    s<<",";
    s<< "length:";
    s << t.length;
    s<<",";
    s<< "data:";
    s << t.data;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__stream>(ivy_ser &res, const quic_server_test_connection_close::frame__stream&t){
    res.open_struct();
    res.open_field("off");
    __ser<bool>(res,t.off);
    res.close_field();
    res.open_field("len");
    __ser<bool>(res,t.len);
    res.close_field();
    res.open_field("fin");
    __ser<bool>(res,t.fin);
    res.close_field();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.open_field("offset");
    __ser<unsigned long long>(res,t.offset);
    res.close_field();
    res.open_field("length");
    __ser<unsigned long long>(res,t.length);
    res.close_field();
    res.open_field("data");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ack__block &t){
    s<<"{";
    s<< "gap:";
    s << t.gap;
    s<<",";
    s<< "blocks:";
    s << t.blocks;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__ack__block>(ivy_ser &res, const quic_server_test_connection_close::frame__ack__block&t){
    res.open_struct();
    res.open_field("gap");
    __ser<unsigned>(res,t.gap);
    res.close_field();
    res.open_field("blocks");
    __ser<unsigned>(res,t.blocks);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ack &t){
    s<<"{";
    s<< "largest_acked:";
    s << t.largest_acked;
    s<<",";
    s<< "ack_delay:";
    s << t.ack_delay;
    s<<",";
    s<< "ack_blocks:";
    s << t.ack_blocks;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__ack>(ivy_ser &res, const quic_server_test_connection_close::frame__ack&t){
    res.open_struct();
    res.open_field("largest_acked");
    __ser<unsigned>(res,t.largest_acked);
    res.close_field();
    res.open_field("ack_delay");
    __ser<int>(res,t.ack_delay);
    res.close_field();
    res.open_field("ack_blocks");
    __ser<quic_server_test_connection_close::frame__ack__block__arr>(res,t.ack_blocks);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__rst_stream &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<",";
    s<< "err_code:";
    s << t.err_code;
    s<<",";
    s<< "final_offset:";
    s << t.final_offset;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__rst_stream>(ivy_ser &res, const quic_server_test_connection_close::frame__rst_stream&t){
    res.open_struct();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.open_field("err_code");
    __ser<unsigned>(res,t.err_code);
    res.close_field();
    res.open_field("final_offset");
    __ser<unsigned long long>(res,t.final_offset);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__max_stream_id &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__max_stream_id>(ivy_ser &res, const quic_server_test_connection_close::frame__max_stream_id&t){
    res.open_struct();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__connection_close &t){
    s<<"{";
    s<< "err_code:";
    s << t.err_code;
    s<<",";
    s<< "frame_type:";
    s << t.frame_type;
    s<<",";
    s<< "reason_phrase_length:";
    s << t.reason_phrase_length;
    s<<",";
    s<< "reason_phrase:";
    s << t.reason_phrase;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__connection_close>(ivy_ser &res, const quic_server_test_connection_close::frame__connection_close&t){
    res.open_struct();
    res.open_field("err_code");
    __ser<unsigned>(res,t.err_code);
    res.close_field();
    res.open_field("frame_type");
    __ser<unsigned>(res,t.frame_type);
    res.close_field();
    res.open_field("reason_phrase_length");
    __ser<unsigned long long>(res,t.reason_phrase_length);
    res.close_field();
    res.open_field("reason_phrase");
    __ser<quic_server_test_connection_close::stream_data>(res,t.reason_phrase);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__max_stream_data &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<",";
    s<< "pos:";
    s << t.pos;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__max_stream_data>(ivy_ser &res, const quic_server_test_connection_close::frame__max_stream_data&t){
    res.open_struct();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.open_field("pos");
    __ser<unsigned long long>(res,t.pos);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stream_id_blocked &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__stream_id_blocked>(ivy_ser &res, const quic_server_test_connection_close::frame__stream_id_blocked&t){
    res.open_struct();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__crypto &t){
    s<<"{";
    s<< "offset:";
    s << t.offset;
    s<<",";
    s<< "length:";
    s << t.length;
    s<<",";
    s<< "data:";
    s << t.data;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__crypto>(ivy_ser &res, const quic_server_test_connection_close::frame__crypto&t){
    res.open_struct();
    res.open_field("offset");
    __ser<unsigned long long>(res,t.offset);
    res.close_field();
    res.open_field("length");
    __ser<unsigned long long>(res,t.length);
    res.close_field();
    res.open_field("data");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__ping &t){
    s<<"{";
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__ping>(ivy_ser &res, const quic_server_test_connection_close::frame__ping&t){
    res.open_struct();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__application_close &t){
    s<<"{";
    s<< "err_code:";
    s << t.err_code;
    s<<",";
    s<< "reason_phrase_length:";
    s << t.reason_phrase_length;
    s<<",";
    s<< "reason_phrase:";
    s << t.reason_phrase;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__application_close>(ivy_ser &res, const quic_server_test_connection_close::frame__application_close&t){
    res.open_struct();
    res.open_field("err_code");
    __ser<unsigned>(res,t.err_code);
    res.close_field();
    res.open_field("reason_phrase_length");
    __ser<unsigned long long>(res,t.reason_phrase_length);
    res.close_field();
    res.open_field("reason_phrase");
    __ser<quic_server_test_connection_close::stream_data>(res,t.reason_phrase);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__new_connection_id &t){
    s<<"{";
    s<< "seq_num:";
    s << t.seq_num;
    s<<",";
    s<< "retire_prior_to:";
    s << t.retire_prior_to;
    s<<",";
    s<< "length:";
    s << t.length;
    s<<",";
    s<< "scid:";
    s << t.scid;
    s<<",";
    s<< "token:";
    s << t.token;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__new_connection_id>(ivy_ser &res, const quic_server_test_connection_close::frame__new_connection_id&t){
    res.open_struct();
    res.open_field("seq_num");
    __ser<unsigned>(res,t.seq_num);
    res.close_field();
    res.open_field("retire_prior_to");
    __ser<unsigned>(res,t.retire_prior_to);
    res.close_field();
    res.open_field("length");
    __ser<unsigned>(res,t.length);
    res.close_field();
    res.open_field("scid");
    __ser<quic_server_test_connection_close::cid>(res,t.scid);
    res.close_field();
    res.open_field("token");
    __ser<unsigned>(res,t.token);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__path_challenge &t){
    s<<"{";
    s<< "data:";
    s << t.data;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__path_challenge>(ivy_ser &res, const quic_server_test_connection_close::frame__path_challenge&t){
    res.open_struct();
    res.open_field("data");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__path_response &t){
    s<<"{";
    s<< "data:";
    s << t.data;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__path_response>(ivy_ser &res, const quic_server_test_connection_close::frame__path_response&t){
    res.open_struct();
    res.open_field("data");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__new_token &t){
    s<<"{";
    s<< "length:";
    s << t.length;
    s<<",";
    s<< "data:";
    s << t.data;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__new_token>(ivy_ser &res, const quic_server_test_connection_close::frame__new_token&t){
    res.open_struct();
    res.open_field("length");
    __ser<unsigned long long>(res,t.length);
    res.close_field();
    res.open_field("data");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__max_data &t){
    s<<"{";
    s<< "pos:";
    s << t.pos;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__max_data>(ivy_ser &res, const quic_server_test_connection_close::frame__max_data&t){
    res.open_struct();
    res.open_field("pos");
    __ser<unsigned long long>(res,t.pos);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stream_blocked &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<",";
    s<< "pos:";
    s << t.pos;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__stream_blocked>(ivy_ser &res, const quic_server_test_connection_close::frame__stream_blocked&t){
    res.open_struct();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.open_field("pos");
    __ser<unsigned long long>(res,t.pos);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__stop_sending &t){
    s<<"{";
    s<< "id:";
    s << t.id;
    s<<",";
    s<< "err_code:";
    s << t.err_code;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__stop_sending>(ivy_ser &res, const quic_server_test_connection_close::frame__stop_sending&t){
    res.open_struct();
    res.open_field("id");
    __ser<unsigned>(res,t.id);
    res.close_field();
    res.open_field("err_code");
    __ser<unsigned>(res,t.err_code);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__blocked &t){
    s<<"{";
    s<< "pos:";
    s << t.pos;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__blocked>(ivy_ser &res, const quic_server_test_connection_close::frame__blocked&t){
    res.open_struct();
    res.open_field("pos");
    __ser<unsigned long long>(res,t.pos);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::frame__retire_connection_id &t){
    s<<"{";
    s<< "seq_num:";
    s << t.seq_num;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::frame__retire_connection_id>(ivy_ser &res, const quic_server_test_connection_close::frame__retire_connection_id&t){
    res.open_struct();
    res.open_field("seq_num");
    __ser<unsigned>(res,t.seq_num);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_data_bidi_local &t){
    s<<"{";
    s<< "stream_pos_32:";
    s << t.stream_pos_32;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_data_bidi_local&t){
    res.open_struct();
    res.open_field("stream_pos_32");
    __ser<unsigned long long>(res,t.stream_pos_32);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_data &t){
    s<<"{";
    s<< "stream_pos_32:";
    s << t.stream_pos_32;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::initial_max_data>(ivy_ser &res, const quic_server_test_connection_close::initial_max_data&t){
    res.open_struct();
    res.open_field("stream_pos_32");
    __ser<unsigned long long>(res,t.stream_pos_32);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_id_bidi &t){
    s<<"{";
    s<< "stream_id_16:";
    s << t.stream_id_16;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_id_bidi>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_id_bidi&t){
    res.open_struct();
    res.open_field("stream_id_16");
    __ser<unsigned>(res,t.stream_id_16);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::idle_timeout &t){
    s<<"{";
    s<< "seconds_16:";
    s << t.seconds_16;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::idle_timeout>(ivy_ser &res, const quic_server_test_connection_close::idle_timeout&t){
    res.open_struct();
    res.open_field("seconds_16");
    __ser<int>(res,t.seconds_16);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::preferred_address &t){
    s<<"{";
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::preferred_address>(ivy_ser &res, const quic_server_test_connection_close::preferred_address&t){
    res.open_struct();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::max_packet_size &t){
    s<<"{";
    s<< "stream_pos_16:";
    s << t.stream_pos_16;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::max_packet_size>(ivy_ser &res, const quic_server_test_connection_close::max_packet_size&t){
    res.open_struct();
    res.open_field("stream_pos_16");
    __ser<unsigned long long>(res,t.stream_pos_16);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::stateless_reset_token &t){
    s<<"{";
    s<< "data_8:";
    s << t.data_8;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::stateless_reset_token>(ivy_ser &res, const quic_server_test_connection_close::stateless_reset_token&t){
    res.open_struct();
    res.open_field("data_8");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data_8);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::ack_delay_exponent &t){
    s<<"{";
    s<< "exponent_8:";
    s << t.exponent_8;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::ack_delay_exponent>(ivy_ser &res, const quic_server_test_connection_close::ack_delay_exponent&t){
    res.open_struct();
    res.open_field("exponent_8");
    __ser<int>(res,t.exponent_8);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_id_uni &t){
    s<<"{";
    s<< "stream_id_16:";
    s << t.stream_id_16;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_id_uni>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_id_uni&t){
    res.open_struct();
    res.open_field("stream_id_16");
    __ser<unsigned>(res,t.stream_id_16);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::disable_migration &t){
    s<<"{";
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::disable_migration>(ivy_ser &res, const quic_server_test_connection_close::disable_migration&t){
    res.open_struct();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_data_bidi_remote &t){
    s<<"{";
    s<< "stream_pos_32:";
    s << t.stream_pos_32;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_data_bidi_remote&t){
    res.open_struct();
    res.open_field("stream_pos_32");
    __ser<unsigned long long>(res,t.stream_pos_32);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::initial_max_stream_data_uni &t){
    s<<"{";
    s<< "stream_pos_32:";
    s << t.stream_pos_32;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::initial_max_stream_data_uni>(ivy_ser &res, const quic_server_test_connection_close::initial_max_stream_data_uni&t){
    res.open_struct();
    res.open_field("stream_pos_32");
    __ser<unsigned long long>(res,t.stream_pos_32);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::max_ack_delay &t){
    s<<"{";
    s<< "exponent_8:";
    s << t.exponent_8;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::max_ack_delay>(ivy_ser &res, const quic_server_test_connection_close::max_ack_delay&t){
    res.open_struct();
    res.open_field("exponent_8");
    __ser<int>(res,t.exponent_8);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::active_connection_id_limit &t){
    s<<"{";
    s<< "stream_pos_32:";
    s << t.stream_pos_32;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::active_connection_id_limit>(ivy_ser &res, const quic_server_test_connection_close::active_connection_id_limit&t){
    res.open_struct();
    res.open_field("stream_pos_32");
    __ser<unsigned long long>(res,t.stream_pos_32);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::trans_params_struct &t){
    s<<"{";
    s<< "initial_max_stream_data_bidi_local__is_set:";
    s << t.initial_max_stream_data_bidi_local__is_set;
    s<<",";
    s<< "initial_max_stream_data_bidi_local__value:";
    s << t.initial_max_stream_data_bidi_local__value;
    s<<",";
    s<< "initial_max_data__is_set:";
    s << t.initial_max_data__is_set;
    s<<",";
    s<< "initial_max_data__value:";
    s << t.initial_max_data__value;
    s<<",";
    s<< "initial_max_stream_id_bidi__is_set:";
    s << t.initial_max_stream_id_bidi__is_set;
    s<<",";
    s<< "initial_max_stream_id_bidi__value:";
    s << t.initial_max_stream_id_bidi__value;
    s<<",";
    s<< "idle_timeout__is_set:";
    s << t.idle_timeout__is_set;
    s<<",";
    s<< "idle_timeout__value:";
    s << t.idle_timeout__value;
    s<<",";
    s<< "preferred_address__is_set:";
    s << t.preferred_address__is_set;
    s<<",";
    s<< "preferred_address__value:";
    s << t.preferred_address__value;
    s<<",";
    s<< "max_packet_size__is_set:";
    s << t.max_packet_size__is_set;
    s<<",";
    s<< "max_packet_size__value:";
    s << t.max_packet_size__value;
    s<<",";
    s<< "stateless_reset_token__is_set:";
    s << t.stateless_reset_token__is_set;
    s<<",";
    s<< "stateless_reset_token__value:";
    s << t.stateless_reset_token__value;
    s<<",";
    s<< "ack_delay_exponent__is_set:";
    s << t.ack_delay_exponent__is_set;
    s<<",";
    s<< "ack_delay_exponent__value:";
    s << t.ack_delay_exponent__value;
    s<<",";
    s<< "initial_max_stream_id_uni__is_set:";
    s << t.initial_max_stream_id_uni__is_set;
    s<<",";
    s<< "initial_max_stream_id_uni__value:";
    s << t.initial_max_stream_id_uni__value;
    s<<",";
    s<< "disable_migration__is_set:";
    s << t.disable_migration__is_set;
    s<<",";
    s<< "disable_migration__value:";
    s << t.disable_migration__value;
    s<<",";
    s<< "initial_max_stream_data_bidi_remote__is_set:";
    s << t.initial_max_stream_data_bidi_remote__is_set;
    s<<",";
    s<< "initial_max_stream_data_bidi_remote__value:";
    s << t.initial_max_stream_data_bidi_remote__value;
    s<<",";
    s<< "initial_max_stream_data_uni__is_set:";
    s << t.initial_max_stream_data_uni__is_set;
    s<<",";
    s<< "initial_max_stream_data_uni__value:";
    s << t.initial_max_stream_data_uni__value;
    s<<",";
    s<< "max_ack_delay__is_set:";
    s << t.max_ack_delay__is_set;
    s<<",";
    s<< "max_ack_delay__value:";
    s << t.max_ack_delay__value;
    s<<",";
    s<< "active_connection_id_limit__is_set:";
    s << t.active_connection_id_limit__is_set;
    s<<",";
    s<< "active_connection_id_limit__value:";
    s << t.active_connection_id_limit__value;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::trans_params_struct>(ivy_ser &res, const quic_server_test_connection_close::trans_params_struct&t){
    res.open_struct();
    res.open_field("initial_max_stream_data_bidi_local__is_set");
    __ser<bool>(res,t.initial_max_stream_data_bidi_local__is_set);
    res.close_field();
    res.open_field("initial_max_stream_data_bidi_local__value");
    __ser<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(res,t.initial_max_stream_data_bidi_local__value);
    res.close_field();
    res.open_field("initial_max_data__is_set");
    __ser<bool>(res,t.initial_max_data__is_set);
    res.close_field();
    res.open_field("initial_max_data__value");
    __ser<quic_server_test_connection_close::initial_max_data>(res,t.initial_max_data__value);
    res.close_field();
    res.open_field("initial_max_stream_id_bidi__is_set");
    __ser<bool>(res,t.initial_max_stream_id_bidi__is_set);
    res.close_field();
    res.open_field("initial_max_stream_id_bidi__value");
    __ser<quic_server_test_connection_close::initial_max_stream_id_bidi>(res,t.initial_max_stream_id_bidi__value);
    res.close_field();
    res.open_field("idle_timeout__is_set");
    __ser<bool>(res,t.idle_timeout__is_set);
    res.close_field();
    res.open_field("idle_timeout__value");
    __ser<quic_server_test_connection_close::idle_timeout>(res,t.idle_timeout__value);
    res.close_field();
    res.open_field("preferred_address__is_set");
    __ser<bool>(res,t.preferred_address__is_set);
    res.close_field();
    res.open_field("preferred_address__value");
    __ser<quic_server_test_connection_close::preferred_address>(res,t.preferred_address__value);
    res.close_field();
    res.open_field("max_packet_size__is_set");
    __ser<bool>(res,t.max_packet_size__is_set);
    res.close_field();
    res.open_field("max_packet_size__value");
    __ser<quic_server_test_connection_close::max_packet_size>(res,t.max_packet_size__value);
    res.close_field();
    res.open_field("stateless_reset_token__is_set");
    __ser<bool>(res,t.stateless_reset_token__is_set);
    res.close_field();
    res.open_field("stateless_reset_token__value");
    __ser<quic_server_test_connection_close::stateless_reset_token>(res,t.stateless_reset_token__value);
    res.close_field();
    res.open_field("ack_delay_exponent__is_set");
    __ser<bool>(res,t.ack_delay_exponent__is_set);
    res.close_field();
    res.open_field("ack_delay_exponent__value");
    __ser<quic_server_test_connection_close::ack_delay_exponent>(res,t.ack_delay_exponent__value);
    res.close_field();
    res.open_field("initial_max_stream_id_uni__is_set");
    __ser<bool>(res,t.initial_max_stream_id_uni__is_set);
    res.close_field();
    res.open_field("initial_max_stream_id_uni__value");
    __ser<quic_server_test_connection_close::initial_max_stream_id_uni>(res,t.initial_max_stream_id_uni__value);
    res.close_field();
    res.open_field("disable_migration__is_set");
    __ser<bool>(res,t.disable_migration__is_set);
    res.close_field();
    res.open_field("disable_migration__value");
    __ser<quic_server_test_connection_close::disable_migration>(res,t.disable_migration__value);
    res.close_field();
    res.open_field("initial_max_stream_data_bidi_remote__is_set");
    __ser<bool>(res,t.initial_max_stream_data_bidi_remote__is_set);
    res.close_field();
    res.open_field("initial_max_stream_data_bidi_remote__value");
    __ser<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(res,t.initial_max_stream_data_bidi_remote__value);
    res.close_field();
    res.open_field("initial_max_stream_data_uni__is_set");
    __ser<bool>(res,t.initial_max_stream_data_uni__is_set);
    res.close_field();
    res.open_field("initial_max_stream_data_uni__value");
    __ser<quic_server_test_connection_close::initial_max_stream_data_uni>(res,t.initial_max_stream_data_uni__value);
    res.close_field();
    res.open_field("max_ack_delay__is_set");
    __ser<bool>(res,t.max_ack_delay__is_set);
    res.close_field();
    res.open_field("max_ack_delay__value");
    __ser<quic_server_test_connection_close::max_ack_delay>(res,t.max_ack_delay__value);
    res.close_field();
    res.open_field("active_connection_id_limit__is_set");
    __ser<bool>(res,t.active_connection_id_limit__is_set);
    res.close_field();
    res.open_field("active_connection_id_limit__value");
    __ser<quic_server_test_connection_close::active_connection_id_limit>(res,t.active_connection_id_limit__value);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_transport_parameters &t){
    s<<"{";
    s<< "transport_parameters:";
    s << t.transport_parameters;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::quic_transport_parameters>(ivy_ser &res, const quic_server_test_connection_close::quic_transport_parameters&t){
    res.open_struct();
    res.open_field("transport_parameters");
    __ser<quic_server_test_connection_close::vector__transport_parameter__>(res,t.transport_parameters);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_packet &t){
    s<<"{";
    s<< "ptype:";
    s << t.ptype;
    s<<",";
    s<< "pversion:";
    s << t.pversion;
    s<<",";
    s<< "dst_cid:";
    s << t.dst_cid;
    s<<",";
    s<< "src_cid:";
    s << t.src_cid;
    s<<",";
    s<< "token:";
    s << t.token;
    s<<",";
    s<< "seq_num:";
    s << t.seq_num;
    s<<",";
    s<< "payload:";
    s << t.payload;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::quic_packet>(ivy_ser &res, const quic_server_test_connection_close::quic_packet&t){
    res.open_struct();
    res.open_field("ptype");
    __ser<quic_server_test_connection_close::quic_packet_type>(res,t.ptype);
    res.close_field();
    res.open_field("pversion");
    __ser<unsigned>(res,t.pversion);
    res.close_field();
    res.open_field("dst_cid");
    __ser<quic_server_test_connection_close::cid>(res,t.dst_cid);
    res.close_field();
    res.open_field("src_cid");
    __ser<quic_server_test_connection_close::cid>(res,t.src_cid);
    res.close_field();
    res.open_field("token");
    __ser<quic_server_test_connection_close::stream_data>(res,t.token);
    res.close_field();
    res.open_field("seq_num");
    __ser<unsigned>(res,t.seq_num);
    res.close_field();
    res.open_field("payload");
    __ser<quic_server_test_connection_close::frame__arr>(res,t.payload);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::prot__header_info &t){
    s<<"{";
    s<< "hdr_long:";
    s << t.hdr_long;
    s<<",";
    s<< "hdr_type:";
    s << t.hdr_type;
    s<<",";
    s<< "dcid:";
    s << t.dcid;
    s<<",";
    s<< "scid:";
    s << t.scid;
    s<<",";
    s<< "payload_length:";
    s << t.payload_length;
    s<<",";
    s<< "payload_length_pos:";
    s << t.payload_length_pos;
    s<<",";
    s<< "pkt_num_pos:";
    s << t.pkt_num_pos;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::prot__header_info>(ivy_ser &res, const quic_server_test_connection_close::prot__header_info&t){
    res.open_struct();
    res.open_field("hdr_long");
    __ser<bool>(res,t.hdr_long);
    res.close_field();
    res.open_field("hdr_type");
    __ser<unsigned>(res,t.hdr_type);
    res.close_field();
    res.open_field("dcid");
    __ser<quic_server_test_connection_close::cid>(res,t.dcid);
    res.close_field();
    res.open_field("scid");
    __ser<quic_server_test_connection_close::cid>(res,t.scid);
    res.close_field();
    res.open_field("payload_length");
    __ser<unsigned long long>(res,t.payload_length);
    res.close_field();
    res.open_field("payload_length_pos");
    __ser<unsigned long long>(res,t.payload_length_pos);
    res.close_field();
    res.open_field("pkt_num_pos");
    __ser<unsigned long long>(res,t.pkt_num_pos);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::tls_api__upper__decrypt_result &t){
    s<<"{";
    s<< "ok:";
    s << t.ok;
    s<<",";
    s<< "data:";
    s << t.data;
    s<<"}";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::tls_api__upper__decrypt_result>(ivy_ser &res, const quic_server_test_connection_close::tls_api__upper__decrypt_result&t){
    res.open_struct();
    res.open_field("ok");
    __ser<bool>(res,t.ok);
    res.close_field();
    res.open_field("data");
    __ser<quic_server_test_connection_close::stream_data>(res,t.data);
    res.close_field();
    res.close_struct();
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::endpoint_id &t){
    if (t == quic_server_test_connection_close::endpoint_id__client) s<<"client";
    if (t == quic_server_test_connection_close::endpoint_id__client_alt) s<<"client_alt";
    if (t == quic_server_test_connection_close::endpoint_id__server) s<<"server";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::endpoint_id>(ivy_ser &res, const quic_server_test_connection_close::endpoint_id&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::ip__protocol &t){
    if (t == quic_server_test_connection_close::ip__udp) s<<"udp";
    if (t == quic_server_test_connection_close::ip__tcp) s<<"tcp";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::ip__protocol>(ivy_ser &res, const quic_server_test_connection_close::ip__protocol&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::quic_packet_type &t){
    if (t == quic_server_test_connection_close::quic_packet_type__initial) s<<"initial";
    if (t == quic_server_test_connection_close::quic_packet_type__zero_rtt) s<<"zero_rtt";
    if (t == quic_server_test_connection_close::quic_packet_type__handshake) s<<"handshake";
    if (t == quic_server_test_connection_close::quic_packet_type__one_rtt) s<<"one_rtt";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::quic_packet_type>(ivy_ser &res, const quic_server_test_connection_close::quic_packet_type&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::role &t){
    if (t == quic_server_test_connection_close::role__client) s<<"client";
    if (t == quic_server_test_connection_close::role__server) s<<"server";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::role>(ivy_ser &res, const quic_server_test_connection_close::role&t){
    __ser(res,(int)t);
}
std::ostream &operator <<(std::ostream &s, const quic_server_test_connection_close::stream_kind &t){
    if (t == quic_server_test_connection_close::unidir) s<<"unidir";
    if (t == quic_server_test_connection_close::bidir) s<<"bidir";
    return s;
}
template <>
void  __ser<quic_server_test_connection_close::stream_kind>(ivy_ser &res, const quic_server_test_connection_close::stream_kind&t){
    __ser(res,(int)t);
}


int ask_ret(long long bound) {
    int res;
    while(true) {
        __ivy_out << "? ";
        std::cin >> res;
        if (res >= 0 && res < bound) 
            return res;
        std::cerr << "value out of range" << std::endl;
    }
}



    class quic_server_test_connection_close_repl : public quic_server_test_connection_close {

    public:

    virtual void ivy_assert(bool truth,const char *msg){
        if (!truth) {
            __ivy_out << "assertion_failed(\"" << msg << "\")" << std::endl;
            std::cerr << msg << ": error: assertion failed\n";
            
            __ivy_exit(1);
        }
    }
    virtual void ivy_assume(bool truth,const char *msg){
        if (!truth) {
            __ivy_out << "assumption_failed(\"" << msg << "\")" << std::endl;
            std::cerr << msg << ": error: assumption failed\n";
            
            __ivy_exit(1);
        }
    }
    quic_server_test_connection_close_repl(quic_server_test_connection_close::cid the_cid, unsigned client_addr, unsigned server_addr, unsigned server_port, quic_server_test_connection_close::cid server_cid, unsigned client_port, unsigned client_port_alt, unsigned long long max_stream_data) : quic_server_test_connection_close(the_cid,client_addr,server_addr,server_port,server_cid,client_port,client_port_alt,max_stream_data){}
    virtual void imp__tls__handshake_event(const ip__endpoint& src, const ip__endpoint& dst, quic_server_test_connection_close::tls__handshake h){}
    virtual void imp__show_aead(int level, const stream_data& pyld, unsigned seq, const stream_data& auth){}
    virtual void imp__undecryptable_packet_event(const ip__endpoint& src, const ip__endpoint& dst, const stream_data& pkt){}
    virtual void imp__recv_packet(const ip__endpoint& src, const ip__endpoint& dst, const quic_packet& pkt){}
    virtual void imp__infer_frame(quic_server_test_connection_close::cid scid, quic_server_test_connection_close::cid dcid, quic_server_test_connection_close::frame f){}

    };

// Override methods to implement low-level network service

bool is_white(int c) {
    return (c == ' ' || c == '\t' || c == '\n' || c == '\r');
}

bool is_ident(int c) {
    return c == '_' || c == '.' || (c >= 'A' &&  c <= 'Z')
        || (c >= 'a' &&  c <= 'z')
        || (c >= '0' &&  c <= '9');
}

void skip_white(const std::string& str, int &pos){
    while (pos < str.size() && is_white(str[pos]))
        pos++;
}

struct syntax_error {
    int pos;
    syntax_error(int pos) : pos(pos) {}
};

void throw_syntax(int pos){
    throw syntax_error(pos);
}

std::string get_ident(const std::string& str, int &pos) {
    std::string res = "";
    while (pos < str.size() && is_ident(str[pos])) {
        res.push_back(str[pos]);
        pos++;
    }
    if (res.size() == 0)
        throw_syntax(pos);
    return res;
}

ivy_value parse_value(const std::string& cmd, int &pos) {
    ivy_value res;
    res.pos = pos;
    skip_white(cmd,pos);
    if (pos < cmd.size() && cmd[pos] == '[') {
        while (true) {
            pos++;
            skip_white(cmd,pos);
            if (pos < cmd.size() && cmd[pos] == ']')
                break;
            res.fields.push_back(parse_value(cmd,pos));
            skip_white(cmd,pos);
            if (pos < cmd.size() && cmd[pos] == ']')
                break;
            if (!(pos < cmd.size() && cmd[pos] == ','))
                throw_syntax(pos);
        }
        pos++;
    }
    else if (pos < cmd.size() && cmd[pos] == '{') {
        while (true) {
            ivy_value field;
            pos++;
            skip_white(cmd,pos);
            field.atom = get_ident(cmd,pos);
            skip_white(cmd,pos);
            if (!(pos < cmd.size() && cmd[pos] == ':'))
                 throw_syntax(pos);
            pos++;
            skip_white(cmd,pos);
            field.fields.push_back(parse_value(cmd,pos));
            res.fields.push_back(field);
            skip_white(cmd,pos);
            if (pos < cmd.size() && cmd[pos] == '}')
                break;
            if (!(pos < cmd.size() && cmd[pos] == ','))
                throw_syntax(pos);
        }
        pos++;
    }
    else if (pos < cmd.size() && cmd[pos] == '"') {
        pos++;
        res.atom = "";
        while (pos < cmd.size() && cmd[pos] != '"') {
            char c = cmd[pos++];
            if (c == '\\') {
                if (pos == cmd.size())
                    throw_syntax(pos);
                c = cmd[pos++];
                c = (c == 'n') ? 10 : (c == 'r') ? 13 : (c == 't') ? 9 : c;
            }
            res.atom.push_back(c);
        }
        if(pos == cmd.size())
            throw_syntax(pos);
        pos++;
    }
    else 
        res.atom = get_ident(cmd,pos);
    return res;
}

void parse_command(const std::string &cmd, std::string &action, std::vector<ivy_value> &args) {
    int pos = 0;
    skip_white(cmd,pos);
    action = get_ident(cmd,pos);
    skip_white(cmd,pos);
    if (pos < cmd.size() && cmd[pos] == '(') {
        pos++;
        skip_white(cmd,pos);
        args.push_back(parse_value(cmd,pos));
        while(true) {
            skip_white(cmd,pos);
            if (!(pos < cmd.size() && cmd[pos] == ','))
                break;
            pos++;
            args.push_back(parse_value(cmd,pos));
        }
        if (!(pos < cmd.size() && cmd[pos] == ')'))
            throw_syntax(pos);
        pos++;
    }
    skip_white(cmd,pos);
    if (pos != cmd.size())
        throw_syntax(pos);
}

struct bad_arity {
    std::string action;
    int num;
    bad_arity(std::string &_action, unsigned _num) : action(_action), num(_num) {}
};

void check_arity(std::vector<ivy_value> &args, unsigned num, std::string &action) {
    if (args.size() != num)
        throw bad_arity(action,num);
}

template <>
quic_server_test_connection_close::ack_delay_exponent _arg<quic_server_test_connection_close::ack_delay_exponent>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::ack_delay_exponent res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "exponent_8") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.exponent_8 = _arg<int>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field exponent_8: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::ack_delay_exponent>(ivy_deser &inp, quic_server_test_connection_close::ack_delay_exponent &res){
    inp.open_struct();
    inp.open_field("exponent_8");
    __deser(inp,res.exponent_8);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::ack_delay_exponent>( gen &g, const  z3::expr &v,quic_server_test_connection_close::ack_delay_exponent &res){
    __from_solver(g,g.apply("ack_delay_exponent.exponent_8",v),res.exponent_8);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::ack_delay_exponent>( gen &g, const  z3::expr &v,quic_server_test_connection_close::ack_delay_exponent &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("ack_delay_exponent.exponent_8",v),val.exponent_8);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::ack_delay_exponent>( gen &g, const  z3::expr &v){
    __randomize<int>(g,g.apply("ack_delay_exponent.exponent_8",v));
}
template <>
quic_server_test_connection_close::active_connection_id_limit _arg<quic_server_test_connection_close::active_connection_id_limit>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::active_connection_id_limit res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_pos_32") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_pos_32 = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_pos_32: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::active_connection_id_limit>(ivy_deser &inp, quic_server_test_connection_close::active_connection_id_limit &res){
    inp.open_struct();
    inp.open_field("stream_pos_32");
    __deser(inp,res.stream_pos_32);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::active_connection_id_limit>( gen &g, const  z3::expr &v,quic_server_test_connection_close::active_connection_id_limit &res){
    __from_solver(g,g.apply("active_connection_id_limit.stream_pos_32",v),res.stream_pos_32);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::active_connection_id_limit>( gen &g, const  z3::expr &v,quic_server_test_connection_close::active_connection_id_limit &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("active_connection_id_limit.stream_pos_32",v),val.stream_pos_32);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::active_connection_id_limit>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("active_connection_id_limit.stream_pos_32",v));
}
template <>
quic_server_test_connection_close::disable_migration _arg<quic_server_test_connection_close::disable_migration>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::disable_migration res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 0) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    return res;
}
template <>
void __deser<quic_server_test_connection_close::disable_migration>(ivy_deser &inp, quic_server_test_connection_close::disable_migration &res){
    inp.open_struct();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::disable_migration>( gen &g, const  z3::expr &v,quic_server_test_connection_close::disable_migration &res){
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::disable_migration>( gen &g, const  z3::expr &v,quic_server_test_connection_close::disable_migration &val){
    z3::expr res = g.ctx.bool_val(1);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::disable_migration>( gen &g, const  z3::expr &v){
}
template <>
quic_server_test_connection_close::frame__ack _arg<quic_server_test_connection_close::frame__ack>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__ack res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "largest_acked") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.largest_acked = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field largest_acked: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "ack_delay") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.ack_delay = _arg<int>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ack_delay: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "ack_blocks") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.ack_blocks = _arg<quic_server_test_connection_close::frame__ack__block__arr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ack_blocks: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__ack>(ivy_deser &inp, quic_server_test_connection_close::frame__ack &res){
    inp.open_struct();
    inp.open_field("largest_acked");
    __deser(inp,res.largest_acked);
    inp.close_field();
    inp.open_field("ack_delay");
    __deser(inp,res.ack_delay);
    inp.close_field();
    inp.open_field("ack_blocks");
    __deser(inp,res.ack_blocks);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__ack>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ack &res){
    __from_solver(g,g.apply("frame.ack.largest_acked",v),res.largest_acked);
    __from_solver(g,g.apply("frame.ack.ack_delay",v),res.ack_delay);
    __from_solver(g,g.apply("frame.ack.ack_blocks",v),res.ack_blocks);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__ack>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ack &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.ack.largest_acked",v),val.largest_acked);
    res = res && __to_solver(g,g.apply("frame.ack.ack_delay",v),val.ack_delay);
    res = res && __to_solver(g,g.apply("frame.ack.ack_blocks",v),val.ack_blocks);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__ack>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.ack.largest_acked",v));
    __randomize<int>(g,g.apply("frame.ack.ack_delay",v));
    __randomize<quic_server_test_connection_close::frame__ack__block__arr>(g,g.apply("frame.ack.ack_blocks",v));
}
template <>
quic_server_test_connection_close::frame__ack__block _arg<quic_server_test_connection_close::frame__ack__block>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__ack__block res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "gap") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.gap = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field gap: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "blocks") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.blocks = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field blocks: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__ack__block>(ivy_deser &inp, quic_server_test_connection_close::frame__ack__block &res){
    inp.open_struct();
    inp.open_field("gap");
    __deser(inp,res.gap);
    inp.close_field();
    inp.open_field("blocks");
    __deser(inp,res.blocks);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__ack__block>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ack__block &res){
    __from_solver(g,g.apply("frame.ack.block.gap",v),res.gap);
    __from_solver(g,g.apply("frame.ack.block.blocks",v),res.blocks);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__ack__block>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ack__block &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.ack.block.gap",v),val.gap);
    res = res && __to_solver(g,g.apply("frame.ack.block.blocks",v),val.blocks);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__ack__block>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.ack.block.gap",v));
    __randomize<unsigned>(g,g.apply("frame.ack.block.blocks",v));
}
template <>
quic_server_test_connection_close::frame__application_close _arg<quic_server_test_connection_close::frame__application_close>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__application_close res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "err_code") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.err_code = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field err_code: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "reason_phrase_length") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.reason_phrase_length = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field reason_phrase_length: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "reason_phrase") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.reason_phrase = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field reason_phrase: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__application_close>(ivy_deser &inp, quic_server_test_connection_close::frame__application_close &res){
    inp.open_struct();
    inp.open_field("err_code");
    __deser(inp,res.err_code);
    inp.close_field();
    inp.open_field("reason_phrase_length");
    __deser(inp,res.reason_phrase_length);
    inp.close_field();
    inp.open_field("reason_phrase");
    __deser(inp,res.reason_phrase);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__application_close>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__application_close &res){
    __from_solver(g,g.apply("frame.application_close.err_code",v),res.err_code);
    __from_solver(g,g.apply("frame.application_close.reason_phrase_length",v),res.reason_phrase_length);
    __from_solver(g,g.apply("frame.application_close.reason_phrase",v),res.reason_phrase);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__application_close>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__application_close &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.application_close.err_code",v),val.err_code);
    res = res && __to_solver(g,g.apply("frame.application_close.reason_phrase_length",v),val.reason_phrase_length);
    res = res && __to_solver(g,g.apply("frame.application_close.reason_phrase",v),val.reason_phrase);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__application_close>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.application_close.err_code",v));
    __randomize<unsigned long long>(g,g.apply("frame.application_close.reason_phrase_length",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.application_close.reason_phrase",v));
}
template <>
quic_server_test_connection_close::frame__blocked _arg<quic_server_test_connection_close::frame__blocked>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__blocked res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "pos") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pos: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__blocked>(ivy_deser &inp, quic_server_test_connection_close::frame__blocked &res){
    inp.open_struct();
    inp.open_field("pos");
    __deser(inp,res.pos);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__blocked>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__blocked &res){
    __from_solver(g,g.apply("frame.blocked.pos",v),res.pos);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__blocked>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__blocked &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.blocked.pos",v),val.pos);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__blocked>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("frame.blocked.pos",v));
}
template <>
quic_server_test_connection_close::frame__connection_close _arg<quic_server_test_connection_close::frame__connection_close>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__connection_close res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 4) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "err_code") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.err_code = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field err_code: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "frame_type") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.frame_type = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field frame_type: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "reason_phrase_length") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.reason_phrase_length = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field reason_phrase_length: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "reason_phrase") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.reason_phrase = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field reason_phrase: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__connection_close>(ivy_deser &inp, quic_server_test_connection_close::frame__connection_close &res){
    inp.open_struct();
    inp.open_field("err_code");
    __deser(inp,res.err_code);
    inp.close_field();
    inp.open_field("frame_type");
    __deser(inp,res.frame_type);
    inp.close_field();
    inp.open_field("reason_phrase_length");
    __deser(inp,res.reason_phrase_length);
    inp.close_field();
    inp.open_field("reason_phrase");
    __deser(inp,res.reason_phrase);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__connection_close>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__connection_close &res){
    __from_solver(g,g.apply("frame.connection_close.err_code",v),res.err_code);
    __from_solver(g,g.apply("frame.connection_close.frame_type",v),res.frame_type);
    __from_solver(g,g.apply("frame.connection_close.reason_phrase_length",v),res.reason_phrase_length);
    __from_solver(g,g.apply("frame.connection_close.reason_phrase",v),res.reason_phrase);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__connection_close>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__connection_close &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.connection_close.err_code",v),val.err_code);
    res = res && __to_solver(g,g.apply("frame.connection_close.frame_type",v),val.frame_type);
    res = res && __to_solver(g,g.apply("frame.connection_close.reason_phrase_length",v),val.reason_phrase_length);
    res = res && __to_solver(g,g.apply("frame.connection_close.reason_phrase",v),val.reason_phrase);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__connection_close>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.connection_close.err_code",v));
    __randomize<unsigned>(g,g.apply("frame.connection_close.frame_type",v));
    __randomize<unsigned long long>(g,g.apply("frame.connection_close.reason_phrase_length",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.connection_close.reason_phrase",v));
}
template <>
quic_server_test_connection_close::frame__crypto _arg<quic_server_test_connection_close::frame__crypto>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__crypto res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "offset") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.offset = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field offset: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "length") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.length = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field length: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "data") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.data = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__crypto>(ivy_deser &inp, quic_server_test_connection_close::frame__crypto &res){
    inp.open_struct();
    inp.open_field("offset");
    __deser(inp,res.offset);
    inp.close_field();
    inp.open_field("length");
    __deser(inp,res.length);
    inp.close_field();
    inp.open_field("data");
    __deser(inp,res.data);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__crypto>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__crypto &res){
    __from_solver(g,g.apply("frame.crypto.offset",v),res.offset);
    __from_solver(g,g.apply("frame.crypto.length",v),res.length);
    __from_solver(g,g.apply("frame.crypto.data",v),res.data);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__crypto>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__crypto &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.crypto.offset",v),val.offset);
    res = res && __to_solver(g,g.apply("frame.crypto.length",v),val.length);
    res = res && __to_solver(g,g.apply("frame.crypto.data",v),val.data);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__crypto>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("frame.crypto.offset",v));
    __randomize<unsigned long long>(g,g.apply("frame.crypto.length",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.crypto.data",v));
}
template <>
quic_server_test_connection_close::frame__max_data _arg<quic_server_test_connection_close::frame__max_data>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__max_data res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "pos") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pos: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__max_data>(ivy_deser &inp, quic_server_test_connection_close::frame__max_data &res){
    inp.open_struct();
    inp.open_field("pos");
    __deser(inp,res.pos);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__max_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__max_data &res){
    __from_solver(g,g.apply("frame.max_data.pos",v),res.pos);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__max_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__max_data &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.max_data.pos",v),val.pos);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__max_data>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("frame.max_data.pos",v));
}
template <>
quic_server_test_connection_close::frame__max_stream_data _arg<quic_server_test_connection_close::frame__max_stream_data>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__max_stream_data res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "pos") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pos: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__max_stream_data>(ivy_deser &inp, quic_server_test_connection_close::frame__max_stream_data &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.open_field("pos");
    __deser(inp,res.pos);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__max_stream_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__max_stream_data &res){
    __from_solver(g,g.apply("frame.max_stream_data.id",v),res.id);
    __from_solver(g,g.apply("frame.max_stream_data.pos",v),res.pos);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__max_stream_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__max_stream_data &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.max_stream_data.id",v),val.id);
    res = res && __to_solver(g,g.apply("frame.max_stream_data.pos",v),val.pos);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__max_stream_data>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.max_stream_data.id",v));
    __randomize<unsigned long long>(g,g.apply("frame.max_stream_data.pos",v));
}
template <>
quic_server_test_connection_close::frame__max_stream_id _arg<quic_server_test_connection_close::frame__max_stream_id>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__max_stream_id res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__max_stream_id>(ivy_deser &inp, quic_server_test_connection_close::frame__max_stream_id &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__max_stream_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__max_stream_id &res){
    __from_solver(g,g.apply("frame.max_stream_id.id",v),res.id);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__max_stream_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__max_stream_id &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.max_stream_id.id",v),val.id);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__max_stream_id>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.max_stream_id.id",v));
}
template <>
quic_server_test_connection_close::frame__new_connection_id _arg<quic_server_test_connection_close::frame__new_connection_id>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__new_connection_id res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 5) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "seq_num") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.seq_num = _arg<unsigned>(tmp_args,0,256);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field seq_num: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "retire_prior_to") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.retire_prior_to = _arg<unsigned>(tmp_args,0,256);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field retire_prior_to: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "length") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.length = _arg<unsigned>(tmp_args,0,16);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field length: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "scid") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.scid = _arg<quic_server_test_connection_close::cid>(tmp_args,0,13);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field scid: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "token") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.token = _arg<unsigned>(tmp_args,0,2147483648);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field token: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__new_connection_id>(ivy_deser &inp, quic_server_test_connection_close::frame__new_connection_id &res){
    inp.open_struct();
    inp.open_field("seq_num");
    __deser(inp,res.seq_num);
    inp.close_field();
    inp.open_field("retire_prior_to");
    __deser(inp,res.retire_prior_to);
    inp.close_field();
    inp.open_field("length");
    __deser(inp,res.length);
    inp.close_field();
    inp.open_field("scid");
    __deser(inp,res.scid);
    inp.close_field();
    inp.open_field("token");
    __deser(inp,res.token);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__new_connection_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__new_connection_id &res){
    __from_solver(g,g.apply("frame.new_connection_id.seq_num",v),res.seq_num);
    __from_solver(g,g.apply("frame.new_connection_id.retire_prior_to",v),res.retire_prior_to);
    __from_solver(g,g.apply("frame.new_connection_id.length",v),res.length);
    __from_solver(g,g.apply("frame.new_connection_id.scid",v),res.scid);
    __from_solver(g,g.apply("frame.new_connection_id.token",v),res.token);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__new_connection_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__new_connection_id &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.new_connection_id.seq_num",v),val.seq_num);
    res = res && __to_solver(g,g.apply("frame.new_connection_id.retire_prior_to",v),val.retire_prior_to);
    res = res && __to_solver(g,g.apply("frame.new_connection_id.length",v),val.length);
    res = res && __to_solver(g,g.apply("frame.new_connection_id.scid",v),val.scid);
    res = res && __to_solver(g,g.apply("frame.new_connection_id.token",v),val.token);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__new_connection_id>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.new_connection_id.seq_num",v));
    __randomize<unsigned>(g,g.apply("frame.new_connection_id.retire_prior_to",v));
    __randomize<unsigned>(g,g.apply("frame.new_connection_id.length",v));
    __randomize<quic_server_test_connection_close::cid>(g,g.apply("frame.new_connection_id.scid",v));
    __randomize<unsigned>(g,g.apply("frame.new_connection_id.token",v));
}
template <>
quic_server_test_connection_close::frame__new_token _arg<quic_server_test_connection_close::frame__new_token>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__new_token res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "length") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.length = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field length: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "data") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.data = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__new_token>(ivy_deser &inp, quic_server_test_connection_close::frame__new_token &res){
    inp.open_struct();
    inp.open_field("length");
    __deser(inp,res.length);
    inp.close_field();
    inp.open_field("data");
    __deser(inp,res.data);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__new_token>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__new_token &res){
    __from_solver(g,g.apply("frame.new_token.length",v),res.length);
    __from_solver(g,g.apply("frame.new_token.data",v),res.data);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__new_token>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__new_token &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.new_token.length",v),val.length);
    res = res && __to_solver(g,g.apply("frame.new_token.data",v),val.data);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__new_token>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("frame.new_token.length",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.new_token.data",v));
}
template <>
quic_server_test_connection_close::frame__path_challenge _arg<quic_server_test_connection_close::frame__path_challenge>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__path_challenge res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "data") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.data = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__path_challenge>(ivy_deser &inp, quic_server_test_connection_close::frame__path_challenge &res){
    inp.open_struct();
    inp.open_field("data");
    __deser(inp,res.data);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__path_challenge>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__path_challenge &res){
    __from_solver(g,g.apply("frame.path_challenge.data",v),res.data);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__path_challenge>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__path_challenge &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.path_challenge.data",v),val.data);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__path_challenge>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.path_challenge.data",v));
}
template <>
quic_server_test_connection_close::frame__path_response _arg<quic_server_test_connection_close::frame__path_response>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__path_response res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "data") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.data = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__path_response>(ivy_deser &inp, quic_server_test_connection_close::frame__path_response &res){
    inp.open_struct();
    inp.open_field("data");
    __deser(inp,res.data);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__path_response>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__path_response &res){
    __from_solver(g,g.apply("frame.path_response.data",v),res.data);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__path_response>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__path_response &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.path_response.data",v),val.data);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__path_response>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.path_response.data",v));
}
template <>
quic_server_test_connection_close::frame__ping _arg<quic_server_test_connection_close::frame__ping>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__ping res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 0) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__ping>(ivy_deser &inp, quic_server_test_connection_close::frame__ping &res){
    inp.open_struct();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__ping>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ping &res){
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__ping>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__ping &val){
    z3::expr res = g.ctx.bool_val(1);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__ping>( gen &g, const  z3::expr &v){
}
template <>
quic_server_test_connection_close::frame__retire_connection_id _arg<quic_server_test_connection_close::frame__retire_connection_id>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__retire_connection_id res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "seq_num") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.seq_num = _arg<unsigned>(tmp_args,0,256);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field seq_num: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__retire_connection_id>(ivy_deser &inp, quic_server_test_connection_close::frame__retire_connection_id &res){
    inp.open_struct();
    inp.open_field("seq_num");
    __deser(inp,res.seq_num);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__retire_connection_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__retire_connection_id &res){
    __from_solver(g,g.apply("frame.retire_connection_id.seq_num",v),res.seq_num);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__retire_connection_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__retire_connection_id &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.retire_connection_id.seq_num",v),val.seq_num);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__retire_connection_id>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.retire_connection_id.seq_num",v));
}
template <>
quic_server_test_connection_close::frame__rst_stream _arg<quic_server_test_connection_close::frame__rst_stream>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__rst_stream res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "err_code") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.err_code = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field err_code: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "final_offset") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.final_offset = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field final_offset: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__rst_stream>(ivy_deser &inp, quic_server_test_connection_close::frame__rst_stream &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.open_field("err_code");
    __deser(inp,res.err_code);
    inp.close_field();
    inp.open_field("final_offset");
    __deser(inp,res.final_offset);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__rst_stream>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__rst_stream &res){
    __from_solver(g,g.apply("frame.rst_stream.id",v),res.id);
    __from_solver(g,g.apply("frame.rst_stream.err_code",v),res.err_code);
    __from_solver(g,g.apply("frame.rst_stream.final_offset",v),res.final_offset);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__rst_stream>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__rst_stream &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.rst_stream.id",v),val.id);
    res = res && __to_solver(g,g.apply("frame.rst_stream.err_code",v),val.err_code);
    res = res && __to_solver(g,g.apply("frame.rst_stream.final_offset",v),val.final_offset);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__rst_stream>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.rst_stream.id",v));
    __randomize<unsigned>(g,g.apply("frame.rst_stream.err_code",v));
    __randomize<unsigned long long>(g,g.apply("frame.rst_stream.final_offset",v));
}
template <>
quic_server_test_connection_close::frame__stop_sending _arg<quic_server_test_connection_close::frame__stop_sending>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__stop_sending res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "err_code") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.err_code = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field err_code: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__stop_sending>(ivy_deser &inp, quic_server_test_connection_close::frame__stop_sending &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.open_field("err_code");
    __deser(inp,res.err_code);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__stop_sending>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stop_sending &res){
    __from_solver(g,g.apply("frame.stop_sending.id",v),res.id);
    __from_solver(g,g.apply("frame.stop_sending.err_code",v),res.err_code);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__stop_sending>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stop_sending &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.stop_sending.id",v),val.id);
    res = res && __to_solver(g,g.apply("frame.stop_sending.err_code",v),val.err_code);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__stop_sending>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.stop_sending.id",v));
    __randomize<unsigned>(g,g.apply("frame.stop_sending.err_code",v));
}
template <>
quic_server_test_connection_close::frame__stream _arg<quic_server_test_connection_close::frame__stream>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__stream res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 7) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "off") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.off = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field off: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "len") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.len = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field len: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "fin") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.fin = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field fin: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "offset") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.offset = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field offset: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "length") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.length = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field length: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "data") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.data = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__stream>(ivy_deser &inp, quic_server_test_connection_close::frame__stream &res){
    inp.open_struct();
    inp.open_field("off");
    __deser(inp,res.off);
    inp.close_field();
    inp.open_field("len");
    __deser(inp,res.len);
    inp.close_field();
    inp.open_field("fin");
    __deser(inp,res.fin);
    inp.close_field();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.open_field("offset");
    __deser(inp,res.offset);
    inp.close_field();
    inp.open_field("length");
    __deser(inp,res.length);
    inp.close_field();
    inp.open_field("data");
    __deser(inp,res.data);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__stream>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stream &res){
    __from_solver(g,g.apply("frame.stream.off",v),res.off);
    __from_solver(g,g.apply("frame.stream.len",v),res.len);
    __from_solver(g,g.apply("frame.stream.fin",v),res.fin);
    __from_solver(g,g.apply("frame.stream.id",v),res.id);
    __from_solver(g,g.apply("frame.stream.offset",v),res.offset);
    __from_solver(g,g.apply("frame.stream.length",v),res.length);
    __from_solver(g,g.apply("frame.stream.data",v),res.data);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__stream>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stream &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.stream.off",v),val.off);
    res = res && __to_solver(g,g.apply("frame.stream.len",v),val.len);
    res = res && __to_solver(g,g.apply("frame.stream.fin",v),val.fin);
    res = res && __to_solver(g,g.apply("frame.stream.id",v),val.id);
    res = res && __to_solver(g,g.apply("frame.stream.offset",v),val.offset);
    res = res && __to_solver(g,g.apply("frame.stream.length",v),val.length);
    res = res && __to_solver(g,g.apply("frame.stream.data",v),val.data);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__stream>( gen &g, const  z3::expr &v){
    __randomize<bool>(g,g.apply("frame.stream.off",v));
    __randomize<bool>(g,g.apply("frame.stream.len",v));
    __randomize<bool>(g,g.apply("frame.stream.fin",v));
    __randomize<unsigned>(g,g.apply("frame.stream.id",v));
    __randomize<unsigned long long>(g,g.apply("frame.stream.offset",v));
    __randomize<unsigned long long>(g,g.apply("frame.stream.length",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("frame.stream.data",v));
}
template <>
quic_server_test_connection_close::frame__stream_blocked _arg<quic_server_test_connection_close::frame__stream_blocked>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__stream_blocked res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "pos") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pos: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__stream_blocked>(ivy_deser &inp, quic_server_test_connection_close::frame__stream_blocked &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.open_field("pos");
    __deser(inp,res.pos);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__stream_blocked>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stream_blocked &res){
    __from_solver(g,g.apply("frame.stream_blocked.id",v),res.id);
    __from_solver(g,g.apply("frame.stream_blocked.pos",v),res.pos);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__stream_blocked>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stream_blocked &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.stream_blocked.id",v),val.id);
    res = res && __to_solver(g,g.apply("frame.stream_blocked.pos",v),val.pos);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__stream_blocked>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.stream_blocked.id",v));
    __randomize<unsigned long long>(g,g.apply("frame.stream_blocked.pos",v));
}
template <>
quic_server_test_connection_close::frame__stream_id_blocked _arg<quic_server_test_connection_close::frame__stream_id_blocked>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::frame__stream_id_blocked res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "id") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.id = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field id: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::frame__stream_id_blocked>(ivy_deser &inp, quic_server_test_connection_close::frame__stream_id_blocked &res){
    inp.open_struct();
    inp.open_field("id");
    __deser(inp,res.id);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::frame__stream_id_blocked>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stream_id_blocked &res){
    __from_solver(g,g.apply("frame.stream_id_blocked.id",v),res.id);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::frame__stream_id_blocked>( gen &g, const  z3::expr &v,quic_server_test_connection_close::frame__stream_id_blocked &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("frame.stream_id_blocked.id",v),val.id);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::frame__stream_id_blocked>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("frame.stream_id_blocked.id",v));
}
template <>
quic_server_test_connection_close::idle_timeout _arg<quic_server_test_connection_close::idle_timeout>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::idle_timeout res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "seconds_16") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.seconds_16 = _arg<int>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field seconds_16: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::idle_timeout>(ivy_deser &inp, quic_server_test_connection_close::idle_timeout &res){
    inp.open_struct();
    inp.open_field("seconds_16");
    __deser(inp,res.seconds_16);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::idle_timeout>( gen &g, const  z3::expr &v,quic_server_test_connection_close::idle_timeout &res){
    __from_solver(g,g.apply("idle_timeout.seconds_16",v),res.seconds_16);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::idle_timeout>( gen &g, const  z3::expr &v,quic_server_test_connection_close::idle_timeout &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("idle_timeout.seconds_16",v),val.seconds_16);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::idle_timeout>( gen &g, const  z3::expr &v){
    __randomize<int>(g,g.apply("idle_timeout.seconds_16",v));
}
template <>
quic_server_test_connection_close::initial_max_data _arg<quic_server_test_connection_close::initial_max_data>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::initial_max_data res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_pos_32") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_pos_32 = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_pos_32: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::initial_max_data>(ivy_deser &inp, quic_server_test_connection_close::initial_max_data &res){
    inp.open_struct();
    inp.open_field("stream_pos_32");
    __deser(inp,res.stream_pos_32);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::initial_max_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_data &res){
    __from_solver(g,g.apply("initial_max_data.stream_pos_32",v),res.stream_pos_32);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::initial_max_data>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_data &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_data.stream_pos_32",v),val.stream_pos_32);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::initial_max_data>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("initial_max_data.stream_pos_32",v));
}
template <>
quic_server_test_connection_close::initial_max_stream_data_bidi_local _arg<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::initial_max_stream_data_bidi_local res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_pos_32") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_pos_32 = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_pos_32: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_data_bidi_local &res){
    inp.open_struct();
    inp.open_field("stream_pos_32");
    __deser(inp,res.stream_pos_32);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_local>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_data_bidi_local &res){
    __from_solver(g,g.apply("initial_max_stream_data_bidi_local.stream_pos_32",v),res.stream_pos_32);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_local>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_data_bidi_local &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_bidi_local.stream_pos_32",v),val.stream_pos_32);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_local>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("initial_max_stream_data_bidi_local.stream_pos_32",v));
}
template <>
quic_server_test_connection_close::initial_max_stream_data_bidi_remote _arg<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::initial_max_stream_data_bidi_remote res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_pos_32") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_pos_32 = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_pos_32: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_data_bidi_remote &res){
    inp.open_struct();
    inp.open_field("stream_pos_32");
    __deser(inp,res.stream_pos_32);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_data_bidi_remote &res){
    __from_solver(g,g.apply("initial_max_stream_data_bidi_remote.stream_pos_32",v),res.stream_pos_32);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_data_bidi_remote &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_bidi_remote.stream_pos_32",v),val.stream_pos_32);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("initial_max_stream_data_bidi_remote.stream_pos_32",v));
}
template <>
quic_server_test_connection_close::initial_max_stream_data_uni _arg<quic_server_test_connection_close::initial_max_stream_data_uni>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::initial_max_stream_data_uni res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_pos_32") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_pos_32 = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_pos_32: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::initial_max_stream_data_uni>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_data_uni &res){
    inp.open_struct();
    inp.open_field("stream_pos_32");
    __deser(inp,res.stream_pos_32);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::initial_max_stream_data_uni>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_data_uni &res){
    __from_solver(g,g.apply("initial_max_stream_data_uni.stream_pos_32",v),res.stream_pos_32);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::initial_max_stream_data_uni>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_data_uni &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_uni.stream_pos_32",v),val.stream_pos_32);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::initial_max_stream_data_uni>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("initial_max_stream_data_uni.stream_pos_32",v));
}
template <>
quic_server_test_connection_close::initial_max_stream_id_bidi _arg<quic_server_test_connection_close::initial_max_stream_id_bidi>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::initial_max_stream_id_bidi res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_id_16") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_id_16 = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_id_16: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::initial_max_stream_id_bidi>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_id_bidi &res){
    inp.open_struct();
    inp.open_field("stream_id_16");
    __deser(inp,res.stream_id_16);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::initial_max_stream_id_bidi>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_id_bidi &res){
    __from_solver(g,g.apply("initial_max_stream_id_bidi.stream_id_16",v),res.stream_id_16);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::initial_max_stream_id_bidi>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_id_bidi &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_stream_id_bidi.stream_id_16",v),val.stream_id_16);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::initial_max_stream_id_bidi>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("initial_max_stream_id_bidi.stream_id_16",v));
}
template <>
quic_server_test_connection_close::initial_max_stream_id_uni _arg<quic_server_test_connection_close::initial_max_stream_id_uni>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::initial_max_stream_id_uni res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_id_16") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_id_16 = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_id_16: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::initial_max_stream_id_uni>(ivy_deser &inp, quic_server_test_connection_close::initial_max_stream_id_uni &res){
    inp.open_struct();
    inp.open_field("stream_id_16");
    __deser(inp,res.stream_id_16);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::initial_max_stream_id_uni>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_id_uni &res){
    __from_solver(g,g.apply("initial_max_stream_id_uni.stream_id_16",v),res.stream_id_16);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::initial_max_stream_id_uni>( gen &g, const  z3::expr &v,quic_server_test_connection_close::initial_max_stream_id_uni &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_stream_id_uni.stream_id_16",v),val.stream_id_16);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::initial_max_stream_id_uni>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("initial_max_stream_id_uni.stream_id_16",v));
}
template <>
quic_server_test_connection_close::ip__endpoint _arg<quic_server_test_connection_close::ip__endpoint>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::ip__endpoint res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 3) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "protocol") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.protocol = _arg<quic_server_test_connection_close::ip__protocol>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field protocol: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "addr") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.addr = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field addr: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "port") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.port = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field port: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::ip__endpoint>(ivy_deser &inp, quic_server_test_connection_close::ip__endpoint &res){
    inp.open_struct();
    inp.open_field("protocol");
    __deser(inp,res.protocol);
    inp.close_field();
    inp.open_field("addr");
    __deser(inp,res.addr);
    inp.close_field();
    inp.open_field("port");
    __deser(inp,res.port);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::ip__endpoint>( gen &g, const  z3::expr &v,quic_server_test_connection_close::ip__endpoint &res){
    __from_solver(g,g.apply("ip.endpoint.protocol",v),res.protocol);
    __from_solver(g,g.apply("ip.endpoint.addr",v),res.addr);
    __from_solver(g,g.apply("ip.endpoint.port",v),res.port);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::ip__endpoint>( gen &g, const  z3::expr &v,quic_server_test_connection_close::ip__endpoint &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("ip.endpoint.protocol",v),val.protocol);
    res = res && __to_solver(g,g.apply("ip.endpoint.addr",v),val.addr);
    res = res && __to_solver(g,g.apply("ip.endpoint.port",v),val.port);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::ip__endpoint>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::ip__protocol>(g,g.apply("ip.endpoint.protocol",v));
    __randomize<unsigned>(g,g.apply("ip.endpoint.addr",v));
    __randomize<unsigned>(g,g.apply("ip.endpoint.port",v));
}
template <>
quic_server_test_connection_close::max_ack_delay _arg<quic_server_test_connection_close::max_ack_delay>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::max_ack_delay res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "exponent_8") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.exponent_8 = _arg<int>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field exponent_8: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::max_ack_delay>(ivy_deser &inp, quic_server_test_connection_close::max_ack_delay &res){
    inp.open_struct();
    inp.open_field("exponent_8");
    __deser(inp,res.exponent_8);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::max_ack_delay>( gen &g, const  z3::expr &v,quic_server_test_connection_close::max_ack_delay &res){
    __from_solver(g,g.apply("max_ack_delay.exponent_8",v),res.exponent_8);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::max_ack_delay>( gen &g, const  z3::expr &v,quic_server_test_connection_close::max_ack_delay &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("max_ack_delay.exponent_8",v),val.exponent_8);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::max_ack_delay>( gen &g, const  z3::expr &v){
    __randomize<int>(g,g.apply("max_ack_delay.exponent_8",v));
}
template <>
quic_server_test_connection_close::max_packet_size _arg<quic_server_test_connection_close::max_packet_size>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::max_packet_size res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "stream_pos_16") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.stream_pos_16 = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stream_pos_16: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::max_packet_size>(ivy_deser &inp, quic_server_test_connection_close::max_packet_size &res){
    inp.open_struct();
    inp.open_field("stream_pos_16");
    __deser(inp,res.stream_pos_16);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::max_packet_size>( gen &g, const  z3::expr &v,quic_server_test_connection_close::max_packet_size &res){
    __from_solver(g,g.apply("max_packet_size.stream_pos_16",v),res.stream_pos_16);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::max_packet_size>( gen &g, const  z3::expr &v,quic_server_test_connection_close::max_packet_size &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("max_packet_size.stream_pos_16",v),val.stream_pos_16);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::max_packet_size>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("max_packet_size.stream_pos_16",v));
}
template <>
quic_server_test_connection_close::preferred_address _arg<quic_server_test_connection_close::preferred_address>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::preferred_address res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 0) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    return res;
}
template <>
void __deser<quic_server_test_connection_close::preferred_address>(ivy_deser &inp, quic_server_test_connection_close::preferred_address &res){
    inp.open_struct();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::preferred_address>( gen &g, const  z3::expr &v,quic_server_test_connection_close::preferred_address &res){
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::preferred_address>( gen &g, const  z3::expr &v,quic_server_test_connection_close::preferred_address &val){
    z3::expr res = g.ctx.bool_val(1);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::preferred_address>( gen &g, const  z3::expr &v){
}
template <>
quic_server_test_connection_close::prot__header_info _arg<quic_server_test_connection_close::prot__header_info>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::prot__header_info res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 7) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "hdr_long") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.hdr_long = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field hdr_long: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "hdr_type") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.hdr_type = _arg<unsigned>(tmp_args,0,128);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field hdr_type: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "dcid") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.dcid = _arg<quic_server_test_connection_close::cid>(tmp_args,0,13);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field dcid: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "scid") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.scid = _arg<quic_server_test_connection_close::cid>(tmp_args,0,13);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field scid: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "payload_length") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.payload_length = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field payload_length: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "payload_length_pos") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.payload_length_pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field payload_length_pos: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "pkt_num_pos") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.pkt_num_pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pkt_num_pos: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::prot__header_info>(ivy_deser &inp, quic_server_test_connection_close::prot__header_info &res){
    inp.open_struct();
    inp.open_field("hdr_long");
    __deser(inp,res.hdr_long);
    inp.close_field();
    inp.open_field("hdr_type");
    __deser(inp,res.hdr_type);
    inp.close_field();
    inp.open_field("dcid");
    __deser(inp,res.dcid);
    inp.close_field();
    inp.open_field("scid");
    __deser(inp,res.scid);
    inp.close_field();
    inp.open_field("payload_length");
    __deser(inp,res.payload_length);
    inp.close_field();
    inp.open_field("payload_length_pos");
    __deser(inp,res.payload_length_pos);
    inp.close_field();
    inp.open_field("pkt_num_pos");
    __deser(inp,res.pkt_num_pos);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::prot__header_info>( gen &g, const  z3::expr &v,quic_server_test_connection_close::prot__header_info &res){
    __from_solver(g,g.apply("prot.hdr_long",v),res.hdr_long);
    __from_solver(g,g.apply("prot.hdr_type",v),res.hdr_type);
    __from_solver(g,g.apply("prot.dcid",v),res.dcid);
    __from_solver(g,g.apply("prot.scid",v),res.scid);
    __from_solver(g,g.apply("prot.payload_length",v),res.payload_length);
    __from_solver(g,g.apply("prot.payload_length_pos",v),res.payload_length_pos);
    __from_solver(g,g.apply("prot.pkt_num_pos",v),res.pkt_num_pos);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::prot__header_info>( gen &g, const  z3::expr &v,quic_server_test_connection_close::prot__header_info &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("prot.hdr_long",v),val.hdr_long);
    res = res && __to_solver(g,g.apply("prot.hdr_type",v),val.hdr_type);
    res = res && __to_solver(g,g.apply("prot.dcid",v),val.dcid);
    res = res && __to_solver(g,g.apply("prot.scid",v),val.scid);
    res = res && __to_solver(g,g.apply("prot.payload_length",v),val.payload_length);
    res = res && __to_solver(g,g.apply("prot.payload_length_pos",v),val.payload_length_pos);
    res = res && __to_solver(g,g.apply("prot.pkt_num_pos",v),val.pkt_num_pos);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::prot__header_info>( gen &g, const  z3::expr &v){
    __randomize<bool>(g,g.apply("prot.hdr_long",v));
    __randomize<unsigned>(g,g.apply("prot.hdr_type",v));
    __randomize<quic_server_test_connection_close::cid>(g,g.apply("prot.dcid",v));
    __randomize<quic_server_test_connection_close::cid>(g,g.apply("prot.scid",v));
    __randomize<unsigned long long>(g,g.apply("prot.payload_length",v));
    __randomize<unsigned long long>(g,g.apply("prot.payload_length_pos",v));
    __randomize<unsigned long long>(g,g.apply("prot.pkt_num_pos",v));
}
template <>
quic_server_test_connection_close::quic_packet _arg<quic_server_test_connection_close::quic_packet>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::quic_packet res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 7) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ptype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ptype = _arg<quic_server_test_connection_close::quic_packet_type>(tmp_args,0,4);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ptype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "pversion") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.pversion = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pversion: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "dst_cid") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.dst_cid = _arg<quic_server_test_connection_close::cid>(tmp_args,0,13);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field dst_cid: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "src_cid") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.src_cid = _arg<quic_server_test_connection_close::cid>(tmp_args,0,13);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field src_cid: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "token") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.token = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field token: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "seq_num") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.seq_num = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field seq_num: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "payload") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.payload = _arg<quic_server_test_connection_close::frame__arr>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field payload: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::quic_packet>(ivy_deser &inp, quic_server_test_connection_close::quic_packet &res){
    inp.open_struct();
    inp.open_field("ptype");
    __deser(inp,res.ptype);
    inp.close_field();
    inp.open_field("pversion");
    __deser(inp,res.pversion);
    inp.close_field();
    inp.open_field("dst_cid");
    __deser(inp,res.dst_cid);
    inp.close_field();
    inp.open_field("src_cid");
    __deser(inp,res.src_cid);
    inp.close_field();
    inp.open_field("token");
    __deser(inp,res.token);
    inp.close_field();
    inp.open_field("seq_num");
    __deser(inp,res.seq_num);
    inp.close_field();
    inp.open_field("payload");
    __deser(inp,res.payload);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::quic_packet>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_packet &res){
    __from_solver(g,g.apply("quic_packet.ptype",v),res.ptype);
    __from_solver(g,g.apply("quic_packet.pversion",v),res.pversion);
    __from_solver(g,g.apply("quic_packet.dst_cid",v),res.dst_cid);
    __from_solver(g,g.apply("quic_packet.src_cid",v),res.src_cid);
    __from_solver(g,g.apply("quic_packet.token",v),res.token);
    __from_solver(g,g.apply("quic_packet.seq_num",v),res.seq_num);
    __from_solver(g,g.apply("quic_packet.payload",v),res.payload);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::quic_packet>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_packet &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("quic_packet.ptype",v),val.ptype);
    res = res && __to_solver(g,g.apply("quic_packet.pversion",v),val.pversion);
    res = res && __to_solver(g,g.apply("quic_packet.dst_cid",v),val.dst_cid);
    res = res && __to_solver(g,g.apply("quic_packet.src_cid",v),val.src_cid);
    res = res && __to_solver(g,g.apply("quic_packet.token",v),val.token);
    res = res && __to_solver(g,g.apply("quic_packet.seq_num",v),val.seq_num);
    res = res && __to_solver(g,g.apply("quic_packet.payload",v),val.payload);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::quic_packet>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::quic_packet_type>(g,g.apply("quic_packet.ptype",v));
    __randomize<unsigned>(g,g.apply("quic_packet.pversion",v));
    __randomize<quic_server_test_connection_close::cid>(g,g.apply("quic_packet.dst_cid",v));
    __randomize<quic_server_test_connection_close::cid>(g,g.apply("quic_packet.src_cid",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("quic_packet.token",v));
    __randomize<unsigned>(g,g.apply("quic_packet.seq_num",v));
    __randomize<quic_server_test_connection_close::frame__arr>(g,g.apply("quic_packet.payload",v));
}
template <>
quic_server_test_connection_close::quic_transport_parameters _arg<quic_server_test_connection_close::quic_transport_parameters>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::quic_transport_parameters res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "transport_parameters") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.transport_parameters = _arg<quic_server_test_connection_close::vector__transport_parameter__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field transport_parameters: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::quic_transport_parameters>(ivy_deser &inp, quic_server_test_connection_close::quic_transport_parameters &res){
    inp.open_struct();
    inp.open_field("transport_parameters");
    __deser(inp,res.transport_parameters);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::quic_transport_parameters>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_transport_parameters &res){
    __from_solver(g,g.apply("quic_transport_parameters.transport_parameters",v),res.transport_parameters);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::quic_transport_parameters>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_transport_parameters &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("quic_transport_parameters.transport_parameters",v),val.transport_parameters);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::quic_transport_parameters>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::vector__transport_parameter__>(g,g.apply("quic_transport_parameters.transport_parameters",v));
}
template <>
quic_server_test_connection_close::stateless_reset_token _arg<quic_server_test_connection_close::stateless_reset_token>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::stateless_reset_token res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "data_8") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.data_8 = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data_8: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::stateless_reset_token>(ivy_deser &inp, quic_server_test_connection_close::stateless_reset_token &res){
    inp.open_struct();
    inp.open_field("data_8");
    __deser(inp,res.data_8);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::stateless_reset_token>( gen &g, const  z3::expr &v,quic_server_test_connection_close::stateless_reset_token &res){
    __from_solver(g,g.apply("stateless_reset_token.data_8",v),res.data_8);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::stateless_reset_token>( gen &g, const  z3::expr &v,quic_server_test_connection_close::stateless_reset_token &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("stateless_reset_token.data_8",v),val.data_8);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::stateless_reset_token>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("stateless_reset_token.data_8",v));
}
template <>
quic_server_test_connection_close::tls__client_hello _arg<quic_server_test_connection_close::tls__client_hello>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__client_hello res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 6) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "client_version") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.client_version = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field client_version: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "rand_info") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.rand_info = _arg<quic_server_test_connection_close::tls__random>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field rand_info: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "session_id") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.session_id = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field session_id: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "cipher_suites") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.cipher_suites = _arg<quic_server_test_connection_close::vector__tls__cipher_suite__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field cipher_suites: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "compression_methods") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.compression_methods = _arg<quic_server_test_connection_close::vector__tls__compression_method__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field compression_methods: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "extensions") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.extensions = _arg<quic_server_test_connection_close::vector__tls__extension__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field extensions: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__client_hello>(ivy_deser &inp, quic_server_test_connection_close::tls__client_hello &res){
    inp.open_struct();
    inp.open_field("client_version");
    __deser(inp,res.client_version);
    inp.close_field();
    inp.open_field("rand_info");
    __deser(inp,res.rand_info);
    inp.close_field();
    inp.open_field("session_id");
    __deser(inp,res.session_id);
    inp.close_field();
    inp.open_field("cipher_suites");
    __deser(inp,res.cipher_suites);
    inp.close_field();
    inp.open_field("compression_methods");
    __deser(inp,res.compression_methods);
    inp.close_field();
    inp.open_field("extensions");
    __deser(inp,res.extensions);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__client_hello>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__client_hello &res){
    __from_solver(g,g.apply("tls.client_hello.client_version",v),res.client_version);
    __from_solver(g,g.apply("tls.client_hello.rand_info",v),res.rand_info);
    __from_solver(g,g.apply("tls.client_hello.session_id",v),res.session_id);
    __from_solver(g,g.apply("tls.client_hello.cipher_suites",v),res.cipher_suites);
    __from_solver(g,g.apply("tls.client_hello.compression_methods",v),res.compression_methods);
    __from_solver(g,g.apply("tls.client_hello.extensions",v),res.extensions);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__client_hello>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__client_hello &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.client_hello.client_version",v),val.client_version);
    res = res && __to_solver(g,g.apply("tls.client_hello.rand_info",v),val.rand_info);
    res = res && __to_solver(g,g.apply("tls.client_hello.session_id",v),val.session_id);
    res = res && __to_solver(g,g.apply("tls.client_hello.cipher_suites",v),val.cipher_suites);
    res = res && __to_solver(g,g.apply("tls.client_hello.compression_methods",v),val.compression_methods);
    res = res && __to_solver(g,g.apply("tls.client_hello.extensions",v),val.extensions);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__client_hello>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("tls.client_hello.client_version",v));
    __randomize<quic_server_test_connection_close::tls__random>(g,g.apply("tls.client_hello.rand_info",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("tls.client_hello.session_id",v));
    __randomize<quic_server_test_connection_close::vector__tls__cipher_suite__>(g,g.apply("tls.client_hello.cipher_suites",v));
    __randomize<quic_server_test_connection_close::vector__tls__compression_method__>(g,g.apply("tls.client_hello.compression_methods",v));
    __randomize<quic_server_test_connection_close::vector__tls__extension__>(g,g.apply("tls.client_hello.extensions",v));
}
template <>
quic_server_test_connection_close::tls__encrypted_extensions _arg<quic_server_test_connection_close::tls__encrypted_extensions>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__encrypted_extensions res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 1) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "extensions") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.extensions = _arg<quic_server_test_connection_close::vector__tls__extension__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field extensions: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__encrypted_extensions>(ivy_deser &inp, quic_server_test_connection_close::tls__encrypted_extensions &res){
    inp.open_struct();
    inp.open_field("extensions");
    __deser(inp,res.extensions);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__encrypted_extensions>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__encrypted_extensions &res){
    __from_solver(g,g.apply("tls.encrypted_extensions.extensions",v),res.extensions);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__encrypted_extensions>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__encrypted_extensions &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.encrypted_extensions.extensions",v),val.extensions);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__encrypted_extensions>( gen &g, const  z3::expr &v){
    __randomize<quic_server_test_connection_close::vector__tls__extension__>(g,g.apply("tls.encrypted_extensions.extensions",v));
}
template <>
quic_server_test_connection_close::tls__handshake_parser__result _arg<quic_server_test_connection_close::tls__handshake_parser__result>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__handshake_parser__result res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "pos") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.pos = _arg<unsigned long long>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field pos: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "value") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.value = _arg<quic_server_test_connection_close::tls__handshakes>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field value: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__handshake_parser__result>(ivy_deser &inp, quic_server_test_connection_close::tls__handshake_parser__result &res){
    inp.open_struct();
    inp.open_field("pos");
    __deser(inp,res.pos);
    inp.close_field();
    inp.open_field("value");
    __deser(inp,res.value);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__handshake_parser__result>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__handshake_parser__result &res){
    __from_solver(g,g.apply("tls.handshake_parser.pos",v),res.pos);
    __from_solver(g,g.apply("tls.handshake_parser.value",v),res.value);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__handshake_parser__result>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__handshake_parser__result &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.handshake_parser.pos",v),val.pos);
    res = res && __to_solver(g,g.apply("tls.handshake_parser.value",v),val.value);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__handshake_parser__result>( gen &g, const  z3::expr &v){
    __randomize<unsigned long long>(g,g.apply("tls.handshake_parser.pos",v));
    __randomize<quic_server_test_connection_close::tls__handshakes>(g,g.apply("tls.handshake_parser.value",v));
}
template <>
quic_server_test_connection_close::tls__random _arg<quic_server_test_connection_close::tls__random>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__random res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "gmt_unix_time") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.gmt_unix_time = _arg<unsigned>(tmp_args,0,4294967296);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field gmt_unix_time: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "random_bytes") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.random_bytes = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field random_bytes: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__random>(ivy_deser &inp, quic_server_test_connection_close::tls__random &res){
    inp.open_struct();
    inp.open_field("gmt_unix_time");
    __deser(inp,res.gmt_unix_time);
    inp.close_field();
    inp.open_field("random_bytes");
    __deser(inp,res.random_bytes);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__random>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__random &res){
    __from_solver(g,g.apply("tls.gmt_unix_time",v),res.gmt_unix_time);
    __from_solver(g,g.apply("tls.random_bytes",v),res.random_bytes);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__random>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__random &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.gmt_unix_time",v),val.gmt_unix_time);
    res = res && __to_solver(g,g.apply("tls.random_bytes",v),val.random_bytes);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__random>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("tls.gmt_unix_time",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("tls.random_bytes",v));
}
template <>
quic_server_test_connection_close::tls__server_hello _arg<quic_server_test_connection_close::tls__server_hello>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__server_hello res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 6) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "server_version") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.server_version = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field server_version: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "rand_info") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.rand_info = _arg<quic_server_test_connection_close::tls__random>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field rand_info: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "session_id") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.session_id = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field session_id: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "the_cipher_suite") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.the_cipher_suite = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field the_cipher_suite: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "the_compression_method") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.the_compression_method = _arg<unsigned>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field the_compression_method: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "extensions") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.extensions = _arg<quic_server_test_connection_close::vector__tls__extension__>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field extensions: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__server_hello>(ivy_deser &inp, quic_server_test_connection_close::tls__server_hello &res){
    inp.open_struct();
    inp.open_field("server_version");
    __deser(inp,res.server_version);
    inp.close_field();
    inp.open_field("rand_info");
    __deser(inp,res.rand_info);
    inp.close_field();
    inp.open_field("session_id");
    __deser(inp,res.session_id);
    inp.close_field();
    inp.open_field("the_cipher_suite");
    __deser(inp,res.the_cipher_suite);
    inp.close_field();
    inp.open_field("the_compression_method");
    __deser(inp,res.the_compression_method);
    inp.close_field();
    inp.open_field("extensions");
    __deser(inp,res.extensions);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__server_hello>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__server_hello &res){
    __from_solver(g,g.apply("tls.server_hello.server_version",v),res.server_version);
    __from_solver(g,g.apply("tls.server_hello.rand_info",v),res.rand_info);
    __from_solver(g,g.apply("tls.server_hello.session_id",v),res.session_id);
    __from_solver(g,g.apply("tls.server_hello.the_cipher_suite",v),res.the_cipher_suite);
    __from_solver(g,g.apply("tls.server_hello.the_compression_method",v),res.the_compression_method);
    __from_solver(g,g.apply("tls.server_hello.extensions",v),res.extensions);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__server_hello>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__server_hello &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.server_hello.server_version",v),val.server_version);
    res = res && __to_solver(g,g.apply("tls.server_hello.rand_info",v),val.rand_info);
    res = res && __to_solver(g,g.apply("tls.server_hello.session_id",v),val.session_id);
    res = res && __to_solver(g,g.apply("tls.server_hello.the_cipher_suite",v),val.the_cipher_suite);
    res = res && __to_solver(g,g.apply("tls.server_hello.the_compression_method",v),val.the_compression_method);
    res = res && __to_solver(g,g.apply("tls.server_hello.extensions",v),val.extensions);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__server_hello>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("tls.server_hello.server_version",v));
    __randomize<quic_server_test_connection_close::tls__random>(g,g.apply("tls.server_hello.rand_info",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("tls.server_hello.session_id",v));
    __randomize<unsigned>(g,g.apply("tls.server_hello.the_cipher_suite",v));
    __randomize<unsigned>(g,g.apply("tls.server_hello.the_compression_method",v));
    __randomize<quic_server_test_connection_close::vector__tls__extension__>(g,g.apply("tls.server_hello.extensions",v));
}
template <>
quic_server_test_connection_close::tls__unknown_extension _arg<quic_server_test_connection_close::tls__unknown_extension>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__unknown_extension res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "etype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.etype = _arg<unsigned>(tmp_args,0,65536);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field etype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "content") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.content = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field content: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__unknown_extension>(ivy_deser &inp, quic_server_test_connection_close::tls__unknown_extension &res){
    inp.open_struct();
    inp.open_field("etype");
    __deser(inp,res.etype);
    inp.close_field();
    inp.open_field("content");
    __deser(inp,res.content);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__unknown_extension>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__unknown_extension &res){
    __from_solver(g,g.apply("tls.unknown_extension.etype",v),res.etype);
    __from_solver(g,g.apply("tls.unknown_extension.content",v),res.content);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__unknown_extension>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__unknown_extension &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.unknown_extension.etype",v),val.etype);
    res = res && __to_solver(g,g.apply("tls.unknown_extension.content",v),val.content);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__unknown_extension>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("tls.unknown_extension.etype",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("tls.unknown_extension.content",v));
}
template <>
quic_server_test_connection_close::tls__unknown_message _arg<quic_server_test_connection_close::tls__unknown_message>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls__unknown_message res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "mtype") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.mtype = _arg<unsigned>(tmp_args,0,256);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field mtype: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "unknown_message_bytes") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.unknown_message_bytes = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field unknown_message_bytes: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls__unknown_message>(ivy_deser &inp, quic_server_test_connection_close::tls__unknown_message &res){
    inp.open_struct();
    inp.open_field("mtype");
    __deser(inp,res.mtype);
    inp.close_field();
    inp.open_field("unknown_message_bytes");
    __deser(inp,res.unknown_message_bytes);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls__unknown_message>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__unknown_message &res){
    __from_solver(g,g.apply("tls.unknown_message.mtype",v),res.mtype);
    __from_solver(g,g.apply("tls.unknown_message.unknown_message_bytes",v),res.unknown_message_bytes);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls__unknown_message>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls__unknown_message &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls.unknown_message.mtype",v),val.mtype);
    res = res && __to_solver(g,g.apply("tls.unknown_message.unknown_message_bytes",v),val.unknown_message_bytes);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls__unknown_message>( gen &g, const  z3::expr &v){
    __randomize<unsigned>(g,g.apply("tls.unknown_message.mtype",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("tls.unknown_message.unknown_message_bytes",v));
}
template <>
quic_server_test_connection_close::tls_api__upper__decrypt_result _arg<quic_server_test_connection_close::tls_api__upper__decrypt_result>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::tls_api__upper__decrypt_result res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 2) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "ok") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.ok = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ok: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "data") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.data = _arg<quic_server_test_connection_close::stream_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field data: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::tls_api__upper__decrypt_result>(ivy_deser &inp, quic_server_test_connection_close::tls_api__upper__decrypt_result &res){
    inp.open_struct();
    inp.open_field("ok");
    __deser(inp,res.ok);
    inp.close_field();
    inp.open_field("data");
    __deser(inp,res.data);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::tls_api__upper__decrypt_result>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls_api__upper__decrypt_result &res){
    __from_solver(g,g.apply("tls_api.upper.ok",v),res.ok);
    __from_solver(g,g.apply("tls_api.upper.data",v),res.data);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::tls_api__upper__decrypt_result>( gen &g, const  z3::expr &v,quic_server_test_connection_close::tls_api__upper__decrypt_result &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("tls_api.upper.ok",v),val.ok);
    res = res && __to_solver(g,g.apply("tls_api.upper.data",v),val.data);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::tls_api__upper__decrypt_result>( gen &g, const  z3::expr &v){
    __randomize<bool>(g,g.apply("tls_api.upper.ok",v));
    __randomize<quic_server_test_connection_close::stream_data>(g,g.apply("tls_api.upper.data",v));
}
template <>
quic_server_test_connection_close::trans_params_struct _arg<quic_server_test_connection_close::trans_params_struct>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    quic_server_test_connection_close::trans_params_struct res;
    ivy_value &arg = args[idx];
    if (arg.atom.size() || arg.fields.size() != 28) throw out_of_bounds("wrong number of fields",args[idx].pos);
    std::vector<ivy_value> tmp_args(1);
    if (arg.fields[0].is_member()){
        tmp_args[0] = arg.fields[0].fields[0];
        if (arg.fields[0].atom != "initial_max_stream_data_bidi_local__is_set") throw out_of_bounds("unexpected field: " + arg.fields[0].atom,arg.fields[0].pos);
    }
    else{
        tmp_args[0] = arg.fields[0];
    }
    try{
        res.initial_max_stream_data_bidi_local__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_data_bidi_local__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[1].is_member()){
        tmp_args[0] = arg.fields[1].fields[0];
        if (arg.fields[1].atom != "initial_max_stream_data_bidi_local__value") throw out_of_bounds("unexpected field: " + arg.fields[1].atom,arg.fields[1].pos);
    }
    else{
        tmp_args[0] = arg.fields[1];
    }
    try{
        res.initial_max_stream_data_bidi_local__value = _arg<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_data_bidi_local__value: " + err.txt,err.pos);
    }
    if (arg.fields[2].is_member()){
        tmp_args[0] = arg.fields[2].fields[0];
        if (arg.fields[2].atom != "initial_max_data__is_set") throw out_of_bounds("unexpected field: " + arg.fields[2].atom,arg.fields[2].pos);
    }
    else{
        tmp_args[0] = arg.fields[2];
    }
    try{
        res.initial_max_data__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_data__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[3].is_member()){
        tmp_args[0] = arg.fields[3].fields[0];
        if (arg.fields[3].atom != "initial_max_data__value") throw out_of_bounds("unexpected field: " + arg.fields[3].atom,arg.fields[3].pos);
    }
    else{
        tmp_args[0] = arg.fields[3];
    }
    try{
        res.initial_max_data__value = _arg<quic_server_test_connection_close::initial_max_data>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_data__value: " + err.txt,err.pos);
    }
    if (arg.fields[4].is_member()){
        tmp_args[0] = arg.fields[4].fields[0];
        if (arg.fields[4].atom != "initial_max_stream_id_bidi__is_set") throw out_of_bounds("unexpected field: " + arg.fields[4].atom,arg.fields[4].pos);
    }
    else{
        tmp_args[0] = arg.fields[4];
    }
    try{
        res.initial_max_stream_id_bidi__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_id_bidi__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[5].is_member()){
        tmp_args[0] = arg.fields[5].fields[0];
        if (arg.fields[5].atom != "initial_max_stream_id_bidi__value") throw out_of_bounds("unexpected field: " + arg.fields[5].atom,arg.fields[5].pos);
    }
    else{
        tmp_args[0] = arg.fields[5];
    }
    try{
        res.initial_max_stream_id_bidi__value = _arg<quic_server_test_connection_close::initial_max_stream_id_bidi>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_id_bidi__value: " + err.txt,err.pos);
    }
    if (arg.fields[6].is_member()){
        tmp_args[0] = arg.fields[6].fields[0];
        if (arg.fields[6].atom != "idle_timeout__is_set") throw out_of_bounds("unexpected field: " + arg.fields[6].atom,arg.fields[6].pos);
    }
    else{
        tmp_args[0] = arg.fields[6];
    }
    try{
        res.idle_timeout__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field idle_timeout__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[7].is_member()){
        tmp_args[0] = arg.fields[7].fields[0];
        if (arg.fields[7].atom != "idle_timeout__value") throw out_of_bounds("unexpected field: " + arg.fields[7].atom,arg.fields[7].pos);
    }
    else{
        tmp_args[0] = arg.fields[7];
    }
    try{
        res.idle_timeout__value = _arg<quic_server_test_connection_close::idle_timeout>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field idle_timeout__value: " + err.txt,err.pos);
    }
    if (arg.fields[8].is_member()){
        tmp_args[0] = arg.fields[8].fields[0];
        if (arg.fields[8].atom != "preferred_address__is_set") throw out_of_bounds("unexpected field: " + arg.fields[8].atom,arg.fields[8].pos);
    }
    else{
        tmp_args[0] = arg.fields[8];
    }
    try{
        res.preferred_address__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field preferred_address__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[9].is_member()){
        tmp_args[0] = arg.fields[9].fields[0];
        if (arg.fields[9].atom != "preferred_address__value") throw out_of_bounds("unexpected field: " + arg.fields[9].atom,arg.fields[9].pos);
    }
    else{
        tmp_args[0] = arg.fields[9];
    }
    try{
        res.preferred_address__value = _arg<quic_server_test_connection_close::preferred_address>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field preferred_address__value: " + err.txt,err.pos);
    }
    if (arg.fields[10].is_member()){
        tmp_args[0] = arg.fields[10].fields[0];
        if (arg.fields[10].atom != "max_packet_size__is_set") throw out_of_bounds("unexpected field: " + arg.fields[10].atom,arg.fields[10].pos);
    }
    else{
        tmp_args[0] = arg.fields[10];
    }
    try{
        res.max_packet_size__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field max_packet_size__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[11].is_member()){
        tmp_args[0] = arg.fields[11].fields[0];
        if (arg.fields[11].atom != "max_packet_size__value") throw out_of_bounds("unexpected field: " + arg.fields[11].atom,arg.fields[11].pos);
    }
    else{
        tmp_args[0] = arg.fields[11];
    }
    try{
        res.max_packet_size__value = _arg<quic_server_test_connection_close::max_packet_size>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field max_packet_size__value: " + err.txt,err.pos);
    }
    if (arg.fields[12].is_member()){
        tmp_args[0] = arg.fields[12].fields[0];
        if (arg.fields[12].atom != "stateless_reset_token__is_set") throw out_of_bounds("unexpected field: " + arg.fields[12].atom,arg.fields[12].pos);
    }
    else{
        tmp_args[0] = arg.fields[12];
    }
    try{
        res.stateless_reset_token__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stateless_reset_token__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[13].is_member()){
        tmp_args[0] = arg.fields[13].fields[0];
        if (arg.fields[13].atom != "stateless_reset_token__value") throw out_of_bounds("unexpected field: " + arg.fields[13].atom,arg.fields[13].pos);
    }
    else{
        tmp_args[0] = arg.fields[13];
    }
    try{
        res.stateless_reset_token__value = _arg<quic_server_test_connection_close::stateless_reset_token>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field stateless_reset_token__value: " + err.txt,err.pos);
    }
    if (arg.fields[14].is_member()){
        tmp_args[0] = arg.fields[14].fields[0];
        if (arg.fields[14].atom != "ack_delay_exponent__is_set") throw out_of_bounds("unexpected field: " + arg.fields[14].atom,arg.fields[14].pos);
    }
    else{
        tmp_args[0] = arg.fields[14];
    }
    try{
        res.ack_delay_exponent__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ack_delay_exponent__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[15].is_member()){
        tmp_args[0] = arg.fields[15].fields[0];
        if (arg.fields[15].atom != "ack_delay_exponent__value") throw out_of_bounds("unexpected field: " + arg.fields[15].atom,arg.fields[15].pos);
    }
    else{
        tmp_args[0] = arg.fields[15];
    }
    try{
        res.ack_delay_exponent__value = _arg<quic_server_test_connection_close::ack_delay_exponent>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field ack_delay_exponent__value: " + err.txt,err.pos);
    }
    if (arg.fields[16].is_member()){
        tmp_args[0] = arg.fields[16].fields[0];
        if (arg.fields[16].atom != "initial_max_stream_id_uni__is_set") throw out_of_bounds("unexpected field: " + arg.fields[16].atom,arg.fields[16].pos);
    }
    else{
        tmp_args[0] = arg.fields[16];
    }
    try{
        res.initial_max_stream_id_uni__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_id_uni__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[17].is_member()){
        tmp_args[0] = arg.fields[17].fields[0];
        if (arg.fields[17].atom != "initial_max_stream_id_uni__value") throw out_of_bounds("unexpected field: " + arg.fields[17].atom,arg.fields[17].pos);
    }
    else{
        tmp_args[0] = arg.fields[17];
    }
    try{
        res.initial_max_stream_id_uni__value = _arg<quic_server_test_connection_close::initial_max_stream_id_uni>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_id_uni__value: " + err.txt,err.pos);
    }
    if (arg.fields[18].is_member()){
        tmp_args[0] = arg.fields[18].fields[0];
        if (arg.fields[18].atom != "disable_migration__is_set") throw out_of_bounds("unexpected field: " + arg.fields[18].atom,arg.fields[18].pos);
    }
    else{
        tmp_args[0] = arg.fields[18];
    }
    try{
        res.disable_migration__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field disable_migration__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[19].is_member()){
        tmp_args[0] = arg.fields[19].fields[0];
        if (arg.fields[19].atom != "disable_migration__value") throw out_of_bounds("unexpected field: " + arg.fields[19].atom,arg.fields[19].pos);
    }
    else{
        tmp_args[0] = arg.fields[19];
    }
    try{
        res.disable_migration__value = _arg<quic_server_test_connection_close::disable_migration>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field disable_migration__value: " + err.txt,err.pos);
    }
    if (arg.fields[20].is_member()){
        tmp_args[0] = arg.fields[20].fields[0];
        if (arg.fields[20].atom != "initial_max_stream_data_bidi_remote__is_set") throw out_of_bounds("unexpected field: " + arg.fields[20].atom,arg.fields[20].pos);
    }
    else{
        tmp_args[0] = arg.fields[20];
    }
    try{
        res.initial_max_stream_data_bidi_remote__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_data_bidi_remote__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[21].is_member()){
        tmp_args[0] = arg.fields[21].fields[0];
        if (arg.fields[21].atom != "initial_max_stream_data_bidi_remote__value") throw out_of_bounds("unexpected field: " + arg.fields[21].atom,arg.fields[21].pos);
    }
    else{
        tmp_args[0] = arg.fields[21];
    }
    try{
        res.initial_max_stream_data_bidi_remote__value = _arg<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_data_bidi_remote__value: " + err.txt,err.pos);
    }
    if (arg.fields[22].is_member()){
        tmp_args[0] = arg.fields[22].fields[0];
        if (arg.fields[22].atom != "initial_max_stream_data_uni__is_set") throw out_of_bounds("unexpected field: " + arg.fields[22].atom,arg.fields[22].pos);
    }
    else{
        tmp_args[0] = arg.fields[22];
    }
    try{
        res.initial_max_stream_data_uni__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_data_uni__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[23].is_member()){
        tmp_args[0] = arg.fields[23].fields[0];
        if (arg.fields[23].atom != "initial_max_stream_data_uni__value") throw out_of_bounds("unexpected field: " + arg.fields[23].atom,arg.fields[23].pos);
    }
    else{
        tmp_args[0] = arg.fields[23];
    }
    try{
        res.initial_max_stream_data_uni__value = _arg<quic_server_test_connection_close::initial_max_stream_data_uni>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field initial_max_stream_data_uni__value: " + err.txt,err.pos);
    }
    if (arg.fields[24].is_member()){
        tmp_args[0] = arg.fields[24].fields[0];
        if (arg.fields[24].atom != "max_ack_delay__is_set") throw out_of_bounds("unexpected field: " + arg.fields[24].atom,arg.fields[24].pos);
    }
    else{
        tmp_args[0] = arg.fields[24];
    }
    try{
        res.max_ack_delay__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field max_ack_delay__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[25].is_member()){
        tmp_args[0] = arg.fields[25].fields[0];
        if (arg.fields[25].atom != "max_ack_delay__value") throw out_of_bounds("unexpected field: " + arg.fields[25].atom,arg.fields[25].pos);
    }
    else{
        tmp_args[0] = arg.fields[25];
    }
    try{
        res.max_ack_delay__value = _arg<quic_server_test_connection_close::max_ack_delay>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field max_ack_delay__value: " + err.txt,err.pos);
    }
    if (arg.fields[26].is_member()){
        tmp_args[0] = arg.fields[26].fields[0];
        if (arg.fields[26].atom != "active_connection_id_limit__is_set") throw out_of_bounds("unexpected field: " + arg.fields[26].atom,arg.fields[26].pos);
    }
    else{
        tmp_args[0] = arg.fields[26];
    }
    try{
        res.active_connection_id_limit__is_set = _arg<bool>(tmp_args,0,2);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field active_connection_id_limit__is_set: " + err.txt,err.pos);
    }
    if (arg.fields[27].is_member()){
        tmp_args[0] = arg.fields[27].fields[0];
        if (arg.fields[27].atom != "active_connection_id_limit__value") throw out_of_bounds("unexpected field: " + arg.fields[27].atom,arg.fields[27].pos);
    }
    else{
        tmp_args[0] = arg.fields[27];
    }
    try{
        res.active_connection_id_limit__value = _arg<quic_server_test_connection_close::active_connection_id_limit>(tmp_args,0,0);
;
    }
    catch(const out_of_bounds &err){
        throw out_of_bounds("in field active_connection_id_limit__value: " + err.txt,err.pos);
    }
    return res;
}
template <>
void __deser<quic_server_test_connection_close::trans_params_struct>(ivy_deser &inp, quic_server_test_connection_close::trans_params_struct &res){
    inp.open_struct();
    inp.open_field("initial_max_stream_data_bidi_local__is_set");
    __deser(inp,res.initial_max_stream_data_bidi_local__is_set);
    inp.close_field();
    inp.open_field("initial_max_stream_data_bidi_local__value");
    __deser(inp,res.initial_max_stream_data_bidi_local__value);
    inp.close_field();
    inp.open_field("initial_max_data__is_set");
    __deser(inp,res.initial_max_data__is_set);
    inp.close_field();
    inp.open_field("initial_max_data__value");
    __deser(inp,res.initial_max_data__value);
    inp.close_field();
    inp.open_field("initial_max_stream_id_bidi__is_set");
    __deser(inp,res.initial_max_stream_id_bidi__is_set);
    inp.close_field();
    inp.open_field("initial_max_stream_id_bidi__value");
    __deser(inp,res.initial_max_stream_id_bidi__value);
    inp.close_field();
    inp.open_field("idle_timeout__is_set");
    __deser(inp,res.idle_timeout__is_set);
    inp.close_field();
    inp.open_field("idle_timeout__value");
    __deser(inp,res.idle_timeout__value);
    inp.close_field();
    inp.open_field("preferred_address__is_set");
    __deser(inp,res.preferred_address__is_set);
    inp.close_field();
    inp.open_field("preferred_address__value");
    __deser(inp,res.preferred_address__value);
    inp.close_field();
    inp.open_field("max_packet_size__is_set");
    __deser(inp,res.max_packet_size__is_set);
    inp.close_field();
    inp.open_field("max_packet_size__value");
    __deser(inp,res.max_packet_size__value);
    inp.close_field();
    inp.open_field("stateless_reset_token__is_set");
    __deser(inp,res.stateless_reset_token__is_set);
    inp.close_field();
    inp.open_field("stateless_reset_token__value");
    __deser(inp,res.stateless_reset_token__value);
    inp.close_field();
    inp.open_field("ack_delay_exponent__is_set");
    __deser(inp,res.ack_delay_exponent__is_set);
    inp.close_field();
    inp.open_field("ack_delay_exponent__value");
    __deser(inp,res.ack_delay_exponent__value);
    inp.close_field();
    inp.open_field("initial_max_stream_id_uni__is_set");
    __deser(inp,res.initial_max_stream_id_uni__is_set);
    inp.close_field();
    inp.open_field("initial_max_stream_id_uni__value");
    __deser(inp,res.initial_max_stream_id_uni__value);
    inp.close_field();
    inp.open_field("disable_migration__is_set");
    __deser(inp,res.disable_migration__is_set);
    inp.close_field();
    inp.open_field("disable_migration__value");
    __deser(inp,res.disable_migration__value);
    inp.close_field();
    inp.open_field("initial_max_stream_data_bidi_remote__is_set");
    __deser(inp,res.initial_max_stream_data_bidi_remote__is_set);
    inp.close_field();
    inp.open_field("initial_max_stream_data_bidi_remote__value");
    __deser(inp,res.initial_max_stream_data_bidi_remote__value);
    inp.close_field();
    inp.open_field("initial_max_stream_data_uni__is_set");
    __deser(inp,res.initial_max_stream_data_uni__is_set);
    inp.close_field();
    inp.open_field("initial_max_stream_data_uni__value");
    __deser(inp,res.initial_max_stream_data_uni__value);
    inp.close_field();
    inp.open_field("max_ack_delay__is_set");
    __deser(inp,res.max_ack_delay__is_set);
    inp.close_field();
    inp.open_field("max_ack_delay__value");
    __deser(inp,res.max_ack_delay__value);
    inp.close_field();
    inp.open_field("active_connection_id_limit__is_set");
    __deser(inp,res.active_connection_id_limit__is_set);
    inp.close_field();
    inp.open_field("active_connection_id_limit__value");
    __deser(inp,res.active_connection_id_limit__value);
    inp.close_field();
    inp.close_struct();
}
template <>
void  __from_solver<quic_server_test_connection_close::trans_params_struct>( gen &g, const  z3::expr &v,quic_server_test_connection_close::trans_params_struct &res){
    __from_solver(g,g.apply("initial_max_stream_data_bidi_local.is_set",v),res.initial_max_stream_data_bidi_local__is_set);
    __from_solver(g,g.apply("initial_max_stream_data_bidi_local.value",v),res.initial_max_stream_data_bidi_local__value);
    __from_solver(g,g.apply("initial_max_data.is_set",v),res.initial_max_data__is_set);
    __from_solver(g,g.apply("initial_max_data.value",v),res.initial_max_data__value);
    __from_solver(g,g.apply("initial_max_stream_id_bidi.is_set",v),res.initial_max_stream_id_bidi__is_set);
    __from_solver(g,g.apply("initial_max_stream_id_bidi.value",v),res.initial_max_stream_id_bidi__value);
    __from_solver(g,g.apply("idle_timeout.is_set",v),res.idle_timeout__is_set);
    __from_solver(g,g.apply("idle_timeout.value",v),res.idle_timeout__value);
    __from_solver(g,g.apply("preferred_address.is_set",v),res.preferred_address__is_set);
    __from_solver(g,g.apply("preferred_address.value",v),res.preferred_address__value);
    __from_solver(g,g.apply("max_packet_size.is_set",v),res.max_packet_size__is_set);
    __from_solver(g,g.apply("max_packet_size.value",v),res.max_packet_size__value);
    __from_solver(g,g.apply("stateless_reset_token.is_set",v),res.stateless_reset_token__is_set);
    __from_solver(g,g.apply("stateless_reset_token.value",v),res.stateless_reset_token__value);
    __from_solver(g,g.apply("ack_delay_exponent.is_set",v),res.ack_delay_exponent__is_set);
    __from_solver(g,g.apply("ack_delay_exponent.value",v),res.ack_delay_exponent__value);
    __from_solver(g,g.apply("initial_max_stream_id_uni.is_set",v),res.initial_max_stream_id_uni__is_set);
    __from_solver(g,g.apply("initial_max_stream_id_uni.value",v),res.initial_max_stream_id_uni__value);
    __from_solver(g,g.apply("disable_migration.is_set",v),res.disable_migration__is_set);
    __from_solver(g,g.apply("disable_migration.value",v),res.disable_migration__value);
    __from_solver(g,g.apply("initial_max_stream_data_bidi_remote.is_set",v),res.initial_max_stream_data_bidi_remote__is_set);
    __from_solver(g,g.apply("initial_max_stream_data_bidi_remote.value",v),res.initial_max_stream_data_bidi_remote__value);
    __from_solver(g,g.apply("initial_max_stream_data_uni.is_set",v),res.initial_max_stream_data_uni__is_set);
    __from_solver(g,g.apply("initial_max_stream_data_uni.value",v),res.initial_max_stream_data_uni__value);
    __from_solver(g,g.apply("max_ack_delay.is_set",v),res.max_ack_delay__is_set);
    __from_solver(g,g.apply("max_ack_delay.value",v),res.max_ack_delay__value);
    __from_solver(g,g.apply("active_connection_id_limit.is_set",v),res.active_connection_id_limit__is_set);
    __from_solver(g,g.apply("active_connection_id_limit.value",v),res.active_connection_id_limit__value);
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::trans_params_struct>( gen &g, const  z3::expr &v,quic_server_test_connection_close::trans_params_struct &val){
    z3::expr res = g.ctx.bool_val(1);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_bidi_local.is_set",v),val.initial_max_stream_data_bidi_local__is_set);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_bidi_local.value",v),val.initial_max_stream_data_bidi_local__value);
    res = res && __to_solver(g,g.apply("initial_max_data.is_set",v),val.initial_max_data__is_set);
    res = res && __to_solver(g,g.apply("initial_max_data.value",v),val.initial_max_data__value);
    res = res && __to_solver(g,g.apply("initial_max_stream_id_bidi.is_set",v),val.initial_max_stream_id_bidi__is_set);
    res = res && __to_solver(g,g.apply("initial_max_stream_id_bidi.value",v),val.initial_max_stream_id_bidi__value);
    res = res && __to_solver(g,g.apply("idle_timeout.is_set",v),val.idle_timeout__is_set);
    res = res && __to_solver(g,g.apply("idle_timeout.value",v),val.idle_timeout__value);
    res = res && __to_solver(g,g.apply("preferred_address.is_set",v),val.preferred_address__is_set);
    res = res && __to_solver(g,g.apply("preferred_address.value",v),val.preferred_address__value);
    res = res && __to_solver(g,g.apply("max_packet_size.is_set",v),val.max_packet_size__is_set);
    res = res && __to_solver(g,g.apply("max_packet_size.value",v),val.max_packet_size__value);
    res = res && __to_solver(g,g.apply("stateless_reset_token.is_set",v),val.stateless_reset_token__is_set);
    res = res && __to_solver(g,g.apply("stateless_reset_token.value",v),val.stateless_reset_token__value);
    res = res && __to_solver(g,g.apply("ack_delay_exponent.is_set",v),val.ack_delay_exponent__is_set);
    res = res && __to_solver(g,g.apply("ack_delay_exponent.value",v),val.ack_delay_exponent__value);
    res = res && __to_solver(g,g.apply("initial_max_stream_id_uni.is_set",v),val.initial_max_stream_id_uni__is_set);
    res = res && __to_solver(g,g.apply("initial_max_stream_id_uni.value",v),val.initial_max_stream_id_uni__value);
    res = res && __to_solver(g,g.apply("disable_migration.is_set",v),val.disable_migration__is_set);
    res = res && __to_solver(g,g.apply("disable_migration.value",v),val.disable_migration__value);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_bidi_remote.is_set",v),val.initial_max_stream_data_bidi_remote__is_set);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_bidi_remote.value",v),val.initial_max_stream_data_bidi_remote__value);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_uni.is_set",v),val.initial_max_stream_data_uni__is_set);
    res = res && __to_solver(g,g.apply("initial_max_stream_data_uni.value",v),val.initial_max_stream_data_uni__value);
    res = res && __to_solver(g,g.apply("max_ack_delay.is_set",v),val.max_ack_delay__is_set);
    res = res && __to_solver(g,g.apply("max_ack_delay.value",v),val.max_ack_delay__value);
    res = res && __to_solver(g,g.apply("active_connection_id_limit.is_set",v),val.active_connection_id_limit__is_set);
    res = res && __to_solver(g,g.apply("active_connection_id_limit.value",v),val.active_connection_id_limit__value);
    return res;
}
template <>
void  __randomize<quic_server_test_connection_close::trans_params_struct>( gen &g, const  z3::expr &v){
    __randomize<bool>(g,g.apply("initial_max_stream_data_bidi_local.is_set",v));
    __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_local>(g,g.apply("initial_max_stream_data_bidi_local.value",v));
    __randomize<bool>(g,g.apply("initial_max_data.is_set",v));
    __randomize<quic_server_test_connection_close::initial_max_data>(g,g.apply("initial_max_data.value",v));
    __randomize<bool>(g,g.apply("initial_max_stream_id_bidi.is_set",v));
    __randomize<quic_server_test_connection_close::initial_max_stream_id_bidi>(g,g.apply("initial_max_stream_id_bidi.value",v));
    __randomize<bool>(g,g.apply("idle_timeout.is_set",v));
    __randomize<quic_server_test_connection_close::idle_timeout>(g,g.apply("idle_timeout.value",v));
    __randomize<bool>(g,g.apply("preferred_address.is_set",v));
    __randomize<quic_server_test_connection_close::preferred_address>(g,g.apply("preferred_address.value",v));
    __randomize<bool>(g,g.apply("max_packet_size.is_set",v));
    __randomize<quic_server_test_connection_close::max_packet_size>(g,g.apply("max_packet_size.value",v));
    __randomize<bool>(g,g.apply("stateless_reset_token.is_set",v));
    __randomize<quic_server_test_connection_close::stateless_reset_token>(g,g.apply("stateless_reset_token.value",v));
    __randomize<bool>(g,g.apply("ack_delay_exponent.is_set",v));
    __randomize<quic_server_test_connection_close::ack_delay_exponent>(g,g.apply("ack_delay_exponent.value",v));
    __randomize<bool>(g,g.apply("initial_max_stream_id_uni.is_set",v));
    __randomize<quic_server_test_connection_close::initial_max_stream_id_uni>(g,g.apply("initial_max_stream_id_uni.value",v));
    __randomize<bool>(g,g.apply("disable_migration.is_set",v));
    __randomize<quic_server_test_connection_close::disable_migration>(g,g.apply("disable_migration.value",v));
    __randomize<bool>(g,g.apply("initial_max_stream_data_bidi_remote.is_set",v));
    __randomize<quic_server_test_connection_close::initial_max_stream_data_bidi_remote>(g,g.apply("initial_max_stream_data_bidi_remote.value",v));
    __randomize<bool>(g,g.apply("initial_max_stream_data_uni.is_set",v));
    __randomize<quic_server_test_connection_close::initial_max_stream_data_uni>(g,g.apply("initial_max_stream_data_uni.value",v));
    __randomize<bool>(g,g.apply("max_ack_delay.is_set",v));
    __randomize<quic_server_test_connection_close::max_ack_delay>(g,g.apply("max_ack_delay.value",v));
    __randomize<bool>(g,g.apply("active_connection_id_limit.is_set",v));
    __randomize<quic_server_test_connection_close::active_connection_id_limit>(g,g.apply("active_connection_id_limit.value",v));
}
template <>
quic_server_test_connection_close::endpoint_id _arg<quic_server_test_connection_close::endpoint_id>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "client") return quic_server_test_connection_close::endpoint_id__client;
    if(arg.atom == "client_alt") return quic_server_test_connection_close::endpoint_id__client_alt;
    if(arg.atom == "server") return quic_server_test_connection_close::endpoint_id__server;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<quic_server_test_connection_close::endpoint_id>(ivy_deser &inp, quic_server_test_connection_close::endpoint_id &res){
    int __res;
    __deser(inp,__res);
    res = (quic_server_test_connection_close::endpoint_id)__res;
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::endpoint_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::endpoint_id &val){
    int thing = val;
    return __to_solver<int>(g,v,thing);
}
template <>
void  __from_solver<quic_server_test_connection_close::endpoint_id>( gen &g, const  z3::expr &v,quic_server_test_connection_close::endpoint_id &res){
    int temp;
    __from_solver<int>(g,v,temp);
    res = (quic_server_test_connection_close::endpoint_id)temp;
}
template <>
void  __randomize<quic_server_test_connection_close::endpoint_id>( gen &g, const  z3::expr &v){
    __randomize<int>(g,v);
}
template <>
quic_server_test_connection_close::ip__protocol _arg<quic_server_test_connection_close::ip__protocol>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "udp") return quic_server_test_connection_close::ip__udp;
    if(arg.atom == "tcp") return quic_server_test_connection_close::ip__tcp;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<quic_server_test_connection_close::ip__protocol>(ivy_deser &inp, quic_server_test_connection_close::ip__protocol &res){
    int __res;
    __deser(inp,__res);
    res = (quic_server_test_connection_close::ip__protocol)__res;
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::ip__protocol>( gen &g, const  z3::expr &v,quic_server_test_connection_close::ip__protocol &val){
    int thing = val;
    return __to_solver<int>(g,v,thing);
}
template <>
void  __from_solver<quic_server_test_connection_close::ip__protocol>( gen &g, const  z3::expr &v,quic_server_test_connection_close::ip__protocol &res){
    int temp;
    __from_solver<int>(g,v,temp);
    res = (quic_server_test_connection_close::ip__protocol)temp;
}
template <>
void  __randomize<quic_server_test_connection_close::ip__protocol>( gen &g, const  z3::expr &v){
    __randomize<int>(g,v);
}
template <>
quic_server_test_connection_close::quic_packet_type _arg<quic_server_test_connection_close::quic_packet_type>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "initial") return quic_server_test_connection_close::quic_packet_type__initial;
    if(arg.atom == "zero_rtt") return quic_server_test_connection_close::quic_packet_type__zero_rtt;
    if(arg.atom == "handshake") return quic_server_test_connection_close::quic_packet_type__handshake;
    if(arg.atom == "one_rtt") return quic_server_test_connection_close::quic_packet_type__one_rtt;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<quic_server_test_connection_close::quic_packet_type>(ivy_deser &inp, quic_server_test_connection_close::quic_packet_type &res){
    int __res;
    __deser(inp,__res);
    res = (quic_server_test_connection_close::quic_packet_type)__res;
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::quic_packet_type>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_packet_type &val){
    int thing = val;
    return __to_solver<int>(g,v,thing);
}
template <>
void  __from_solver<quic_server_test_connection_close::quic_packet_type>( gen &g, const  z3::expr &v,quic_server_test_connection_close::quic_packet_type &res){
    int temp;
    __from_solver<int>(g,v,temp);
    res = (quic_server_test_connection_close::quic_packet_type)temp;
}
template <>
void  __randomize<quic_server_test_connection_close::quic_packet_type>( gen &g, const  z3::expr &v){
    __randomize<int>(g,v);
}
template <>
quic_server_test_connection_close::role _arg<quic_server_test_connection_close::role>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "client") return quic_server_test_connection_close::role__client;
    if(arg.atom == "server") return quic_server_test_connection_close::role__server;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<quic_server_test_connection_close::role>(ivy_deser &inp, quic_server_test_connection_close::role &res){
    int __res;
    __deser(inp,__res);
    res = (quic_server_test_connection_close::role)__res;
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::role>( gen &g, const  z3::expr &v,quic_server_test_connection_close::role &val){
    int thing = val;
    return __to_solver<int>(g,v,thing);
}
template <>
void  __from_solver<quic_server_test_connection_close::role>( gen &g, const  z3::expr &v,quic_server_test_connection_close::role &res){
    int temp;
    __from_solver<int>(g,v,temp);
    res = (quic_server_test_connection_close::role)temp;
}
template <>
void  __randomize<quic_server_test_connection_close::role>( gen &g, const  z3::expr &v){
    __randomize<int>(g,v);
}
template <>
quic_server_test_connection_close::stream_kind _arg<quic_server_test_connection_close::stream_kind>(std::vector<ivy_value> &args, unsigned idx, long long bound){
    ivy_value &arg = args[idx];
    if (arg.atom.size() == 0 || arg.fields.size() != 0) throw out_of_bounds(idx,arg.pos);
    if(arg.atom == "unidir") return quic_server_test_connection_close::unidir;
    if(arg.atom == "bidir") return quic_server_test_connection_close::bidir;
    throw out_of_bounds("bad value: " + arg.atom,arg.pos);
}
template <>
void __deser<quic_server_test_connection_close::stream_kind>(ivy_deser &inp, quic_server_test_connection_close::stream_kind &res){
    int __res;
    __deser(inp,__res);
    res = (quic_server_test_connection_close::stream_kind)__res;
}
template <>
z3::expr  __to_solver<quic_server_test_connection_close::stream_kind>( gen &g, const  z3::expr &v,quic_server_test_connection_close::stream_kind &val){
    int thing = val;
    return __to_solver<int>(g,v,thing);
}
template <>
void  __from_solver<quic_server_test_connection_close::stream_kind>( gen &g, const  z3::expr &v,quic_server_test_connection_close::stream_kind &res){
    int temp;
    __from_solver<int>(g,v,temp);
    res = (quic_server_test_connection_close::stream_kind)temp;
}
template <>
void  __randomize<quic_server_test_connection_close::stream_kind>( gen &g, const  z3::expr &v){
    __randomize<int>(g,v);
}
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::cid,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::cid,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::cid,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::cid,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__unsigned,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__unsigned,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__unsigned,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__stream_kind,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__stream_kind,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1) && __to_solver(g,v.arg(2),it->first.arg2);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__quic_packet_type,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__ip__endpoint__cid,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__ip__endpoint__cid,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__quic_packet_type__unsigned_long_long,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1) && __to_solver(g,v.arg(2),it->first.arg2);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__ip__endpoint,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__ip__endpoint,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__ip__endpoint__ip__endpoint__cid,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1) && __to_solver(g,v.arg(2),it->first.arg2);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};
template<typename R> class to_solver_class<hash_thunk<quic_server_test_connection_close::__tup__cid__stream_data,R> >{
    public:;
    z3::expr operator()( gen &g, const  z3::expr &v, hash_thunk<quic_server_test_connection_close::__tup__cid__stream_data,R> &val){
        z3::expr res = g.ctx.bool_val(true);
        z3::expr disj = g.ctx.bool_val(false);
        z3::expr bg = dynamic_cast<z3_thunk<quic_server_test_connection_close::__tup__cid__stream_data,R> *>(val.fun)->to_z3(g,v);
        for(typename hash_map<quic_server_test_connection_close::__tup__cid__stream_data,R>::iterator it=val.memo.begin(), en = val.memo.end(); it != en; it++){
            z3::expr asgn = __to_solver(g,v,it->second);
            z3::expr cond = __to_solver(g,v.arg(0),it->first.arg0) && __to_solver(g,v.arg(1),it->first.arg1);
            res = res && implies(cond,asgn);
            disj = disj || cond;
        }
        res = res && (disj || bg);
        return res;
    }
};


class stdin_reader: public reader {
    std::string buf;
    std::string eof_flag;

public:
    bool eof(){
      return eof_flag.size();
    }
    virtual int fdes(){
        return 0;
    }
    virtual void read() {
        char tmp[257];
        int chars = ::read(0,tmp,256);
        if (chars == 0) {  // EOF
            if (buf.size())
                process(buf);
            eof_flag = "eof";
        }
        tmp[chars] = 0;
        buf += std::string(tmp);
        size_t pos;
        while ((pos = buf.find('\n')) != std::string::npos) {
            std::string line = buf.substr(0,pos+1);
            buf.erase(0,pos+1);
            process(line);
        }
    }
    virtual void process(const std::string &line) {
        __ivy_out << line;
    }
};

class cmd_reader: public stdin_reader {
    int lineno;
public:
    quic_server_test_connection_close_repl &ivy;    

    cmd_reader(quic_server_test_connection_close_repl &_ivy) : ivy(_ivy) {
        lineno = 1;
        if (isatty(fdes()))
            __ivy_out << "> "; __ivy_out.flush();
    }

    virtual void process(const std::string &cmd) {
        std::string action;
        std::vector<ivy_value> args;
        try {
            parse_command(cmd,action,args);
            ivy.__lock();

                if (action == "_finalize") {
                    check_arity(args,0,action);
                    ivy.ext___finalize();
                }
                else
    
                if (action == "client_send_event") {
                    check_arity(args,5,action);
                    ivy.ext__client_send_event(_arg<quic_server_test_connection_close::ip__endpoint>(args,0,0),_arg<quic_server_test_connection_close::ip__endpoint>(args,1,0),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<unsigned>(args,3,65536),_arg<unsigned long long>(args,4,0));
                }
                else
    
                if (action == "frame.ack.handle") {
                    check_arity(args,4,action);
                    ivy.ext__frame__ack__handle(_arg<quic_server_test_connection_close::frame__ack>(args,0,0),_arg<quic_server_test_connection_close::cid>(args,1,13),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<quic_server_test_connection_close::quic_packet_type>(args,3,4));
                }
                else
    
                if (action == "frame.connection_close.handle") {
                    check_arity(args,4,action);
                    ivy.ext__frame__connection_close__handle(_arg<quic_server_test_connection_close::frame__connection_close>(args,0,0),_arg<quic_server_test_connection_close::cid>(args,1,13),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<quic_server_test_connection_close::quic_packet_type>(args,3,4));
                }
                else
    
                if (action == "frame.crypto.handle") {
                    check_arity(args,4,action);
                    ivy.ext__frame__crypto__handle(_arg<quic_server_test_connection_close::frame__crypto>(args,0,0),_arg<quic_server_test_connection_close::cid>(args,1,13),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<quic_server_test_connection_close::quic_packet_type>(args,3,4));
                }
                else
    
                if (action == "frame.path_response.handle") {
                    check_arity(args,4,action);
                    ivy.ext__frame__path_response__handle(_arg<quic_server_test_connection_close::frame__path_response>(args,0,0),_arg<quic_server_test_connection_close::cid>(args,1,13),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<quic_server_test_connection_close::quic_packet_type>(args,3,4));
                }
                else
    
                if (action == "frame.stream.handle") {
                    check_arity(args,4,action);
                    ivy.ext__frame__stream__handle(_arg<quic_server_test_connection_close::frame__stream>(args,0,0),_arg<quic_server_test_connection_close::cid>(args,1,13),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<quic_server_test_connection_close::quic_packet_type>(args,3,4));
                }
                else
    
                if (action == "packet_event") {
                    check_arity(args,3,action);
                    ivy.ext__packet_event(_arg<quic_server_test_connection_close::ip__endpoint>(args,0,0),_arg<quic_server_test_connection_close::ip__endpoint>(args,1,0),_arg<quic_server_test_connection_close::quic_packet>(args,2,0));
                }
                else
    
                if (action == "tls_recv_event") {
                    check_arity(args,7,action);
                    ivy.ext__tls_recv_event(_arg<quic_server_test_connection_close::ip__endpoint>(args,0,0),_arg<quic_server_test_connection_close::ip__endpoint>(args,1,0),_arg<quic_server_test_connection_close::cid>(args,2,13),_arg<quic_server_test_connection_close::cid>(args,3,13),_arg<quic_server_test_connection_close::quic_packet_type>(args,4,4),_arg<unsigned long long>(args,5,0),_arg<unsigned long long>(args,6,0));
                }
                else
    
            {
                std::cerr << "undefined action: " << action << std::endl;
            }
            ivy.__unlock();
        }
        catch (syntax_error& err) {
            ivy.__unlock();
            std::cerr << "line " << lineno << ":" << err.pos << ": syntax error" << std::endl;
        }
        catch (out_of_bounds &err) {
            ivy.__unlock();
            std::cerr << "line " << lineno << ":" << err.pos << ": " << err.txt << " bad value" << std::endl;
        }
        catch (bad_arity &err) {
            ivy.__unlock();
            std::cerr << "action " << err.action << " takes " << err.num  << " input parameters" << std::endl;
        }
        if (isatty(fdes()))
            __ivy_out << "> "; __ivy_out.flush();
        lineno++;
    }
};



int main(int argc, char **argv){
        int test_iters = 100;
        int runs = 1;
    quic_server_test_connection_close::cid p__the_cid;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("0xd",pos);
        p__the_cid =  _arg<quic_server_test_connection_close::cid>(arg_values,0,13);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 88: parameter the_cid out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 88: syntax error in parameter value the_cid\n";
        __ivy_exit(1);
    }
    unsigned p__client_addr;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("0x7f000001",pos);
        p__client_addr =  _arg<unsigned>(arg_values,0,4294967296);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 89: parameter client_addr out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 89: syntax error in parameter value client_addr\n";
        __ivy_exit(1);
    }
    unsigned p__server_addr;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("0x7f000001",pos);
        p__server_addr =  _arg<unsigned>(arg_values,0,4294967296);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 90: parameter server_addr out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 90: syntax error in parameter value server_addr\n";
        __ivy_exit(1);
    }
    unsigned p__server_port;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("4443",pos);
        p__server_port =  _arg<unsigned>(arg_values,0,65536);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 91: parameter server_port out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 91: syntax error in parameter value server_port\n";
        __ivy_exit(1);
    }
    quic_server_test_connection_close::cid p__server_cid;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("0xb",pos);
        p__server_cid =  _arg<quic_server_test_connection_close::cid>(arg_values,0,13);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 92: parameter server_cid out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 92: syntax error in parameter value server_cid\n";
        __ivy_exit(1);
    }
    unsigned p__client_port;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("4987",pos);
        p__client_port =  _arg<unsigned>(arg_values,0,65536);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 93: parameter client_port out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 93: syntax error in parameter value client_port\n";
        __ivy_exit(1);
    }
    unsigned p__client_port_alt;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("4988",pos);
        p__client_port_alt =  _arg<unsigned>(arg_values,0,65536);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 94: parameter client_port_alt out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 94: syntax error in parameter value client_port_alt\n";
        __ivy_exit(1);
    }
    unsigned long long p__max_stream_data;
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value("0x2000",pos);
        p__max_stream_data =  _arg<unsigned long long>(arg_values,0,0);
    }
    catch(out_of_bounds &) {
        std::cerr << "quic_server_test.ivy: line 95: parameter max_stream_data out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "quic_server_test.ivy: line 95: syntax error in parameter value max_stream_data\n";
        __ivy_exit(1);
    }

    int seed = 1;
    int sleep_ms = 10;
    int final_ms = 0; 
    
    std::vector<char *> pargs; // positional args
    pargs.push_back(argv[0]);
    for (int i = 1; i < argc; i++) {
        std::string arg = argv[i];
        size_t p = arg.find('=');
        if (p == std::string::npos)
            pargs.push_back(argv[i]);
        else {
            std::string param = arg.substr(0,p);
            std::string value = arg.substr(p+1);
            if (param == "the_cid") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__the_cid =  _arg<quic_server_test_connection_close::cid>(arg_values,0,13);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter the_cid out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value the_cid\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "client_addr") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__client_addr =  _arg<unsigned>(arg_values,0,4294967296);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter client_addr out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value client_addr\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "server_addr") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__server_addr =  _arg<unsigned>(arg_values,0,4294967296);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter server_addr out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value server_addr\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "server_port") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__server_port =  _arg<unsigned>(arg_values,0,65536);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter server_port out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value server_port\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "server_cid") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__server_cid =  _arg<quic_server_test_connection_close::cid>(arg_values,0,13);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter server_cid out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value server_cid\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "client_port") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__client_port =  _arg<unsigned>(arg_values,0,65536);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter client_port out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value client_port\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "client_port_alt") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__client_port_alt =  _arg<unsigned>(arg_values,0,65536);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter client_port_alt out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value client_port_alt\n";
        __ivy_exit(1);
    }
                continue;
            }
            if (param == "max_stream_data") {
    try {
        int pos = 0;
        std::vector<ivy_value> arg_values; arg_values.resize(1); arg_values[0] = parse_value(value,pos);
        p__max_stream_data =  _arg<unsigned long long>(arg_values,0,0);
    }
    catch(out_of_bounds &) {
        std::cerr << "parameter max_stream_data out of bounds\n";
        __ivy_exit(1);
    }
    catch(syntax_error &) {
        std::cerr << "syntax error in parameter value max_stream_data\n";
        __ivy_exit(1);
    }
                continue;
            }

            if (param == "out") {
                __ivy_out.open(value.c_str());
                if (!__ivy_out) {
                    std::cerr << "cannot open to write: " << value << std::endl;
                    return 1;
                }
            }
            else if (param == "iters") {
                test_iters = atoi(value.c_str());
            }
            else if (param == "runs") {
                runs = atoi(value.c_str());
            }
            else if (param == "seed") {
                seed = atoi(value.c_str());
            }
            else if (param == "delay") {
                sleep_ms = atoi(value.c_str());
            }
            else if (param == "wait") {
                final_ms = atoi(value.c_str());
            }
            else if (param == "modelfile") {
                __ivy_modelfile.open(value.c_str());
                if (!__ivy_modelfile) {
                    std::cerr << "cannot open to write: " << value << std::endl;
                    return 1;
                }
            }
            else {
                std::cerr << "unknown option: " << param << std::endl;
                return 1;
            }
        }
    }
    srand(seed);
    if (!__ivy_out.is_open())
        __ivy_out.basic_ios<char>::rdbuf(std::cout.rdbuf());
    argc = pargs.size();
    argv = &pargs[0];
    if (argc == 2){
        argc--;
        int fd = _open(argv[argc],0);
        if (fd < 0){
            std::cerr << "cannot open to read: " << argv[argc] << "\n";
            __ivy_exit(1);
        }
        _dup2(fd, 0);
    }
    if (argc != 1){
        std::cerr << "usage: quic_server_test_connection_close \n";
        __ivy_exit(1);
    }
    std::vector<std::string> args;
    std::vector<ivy_value> arg_values(0);
    for(int i = 1; i < argc;i++){args.push_back(argv[i]);}

#ifdef _WIN32
    // Boilerplate from windows docs

    {
        WORD wVersionRequested;
        WSADATA wsaData;
        int err;

    /* Use the MAKEWORD(lowbyte, highbyte) macro declared in Windef.h */
        wVersionRequested = MAKEWORD(2, 2);

        err = WSAStartup(wVersionRequested, &wsaData);
        if (err != 0) {
            /* Tell the user that we could not find a usable */
            /* Winsock DLL.                                  */
            printf("WSAStartup failed with error: %d\n", err);
            return 1;
        }

    /* Confirm that the WinSock DLL supports 2.2.*/
    /* Note that if the DLL supports versions greater    */
    /* than 2.2 in addition to 2.2, it will still return */
    /* 2.2 in wVersion since that is the version we      */
    /* requested.                                        */

        if (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2) {
            /* Tell the user that we could not find a usable */
            /* WinSock DLL.                                  */
            printf("Could not find a usable version of Winsock.dll\n");
            WSACleanup();
            return 1;
        }
    }
#endif
    for(int runidx = 0; runidx < runs; runidx++) {
    initializing = true;
    quic_server_test_connection_close_repl ivy(p__the_cid,p__client_addr,p__server_addr,p__server_port,p__server_cid,p__client_port,p__client_port_alt,p__max_stream_data);
    for(unsigned i = 0; i < argc; i++) {ivy.__argv.push_back(argv[i]);}
    ivy._generating = false;

        ivy.__unlock();
        initializing = false;
        for(int rdridx = 0; rdridx < readers.size(); rdridx++) {
            readers[rdridx]->bind();
        }
                    
        init_gen my_init_gen;
        my_init_gen.generate(ivy);
        std::vector<gen *> generators;
        std::vector<double> weights;

        generators.push_back(new ext__client_send_event_gen);
        weights.push_back(1.0);
        generators.push_back(new ext__frame__ack__handle_gen);
        weights.push_back(1.0);
        generators.push_back(new ext__frame__connection_close__handle_gen);
        weights.push_back(0.2);
        generators.push_back(new ext__frame__crypto__handle_gen);
        weights.push_back(1.0);
        generators.push_back(new ext__frame__path_response__handle_gen);
        weights.push_back(1.0);
        generators.push_back(new ext__frame__stream__handle_gen);
        weights.push_back(1.0);
        generators.push_back(new ext__packet_event_gen);
        weights.push_back(1.0);
        generators.push_back(new ext__tls_recv_event_gen);
        weights.push_back(1.0);
        double totalweight = 7.2;
        int num_gens = 8;


#ifdef _WIN32
    LARGE_INTEGER freq;
    QueryPerformanceFrequency(&freq);
#endif
    for(int cycle = 0; cycle < test_iters; cycle++) {

        int choices = num_gens + readers.size() + timers.size();
        int rnd = choices ? (rand() % choices) : 0;
        if (rnd < num_gens) {
            double frnd = totalweight * (((double)rand())/(((double)RAND_MAX)+1.0));
            int idx = 0;
            double sum = 0.0;
            while (idx < num_gens-1) {
                sum += weights[idx];
                if (frnd < sum)
                    break;
                idx++;
            }
            gen &g = *generators[idx];
            ivy.__lock();
#ifdef _WIN32
            LARGE_INTEGER before;
            QueryPerformanceCounter(&before);
#endif
            ivy._generating = true;
            bool sat = g.generate(ivy);
#ifdef _WIN32
            LARGE_INTEGER after;
            QueryPerformanceCounter(&after);
//            __ivy_out << "idx: " << idx << " sat: " << sat << " time: " << (((double)(after.QuadPart-before.QuadPart))/freq.QuadPart) << std::endl;
#endif
            if (sat){
                g.execute(ivy);
                ivy._generating = false;
                ivy.__unlock();
#ifdef _WIN32
                Sleep(sleep_ms);
#endif
            }
            else {
                ivy._generating = false;
                ivy.__unlock();
                cycle--;
            }
            continue;
        }


        fd_set rdfds;
        FD_ZERO(&rdfds);
        int maxfds = 0;

        for (unsigned i = 0; i < readers.size(); i++) {
            reader *r = readers[i];
            int fds = r->fdes();
            if (fds >= 0) {
                FD_SET(fds,&rdfds);
            }
            if (fds > maxfds)
                maxfds = fds;
        }

#ifdef _WIN32
        int timer_min = 15;
#else
        int timer_min = 1;
#endif

        struct timeval timeout;
        timeout.tv_sec = timer_min/1000;
        timeout.tv_usec = 1000 * (timer_min % 1000);

#ifdef _WIN32
        int foo;
        if (readers.size() == 0){  // winsock can't handle empty fdset!
            Sleep(timer_min);
            foo = 0;
        }
        else
            foo = select(maxfds+1,&rdfds,0,0,&timeout);
#else
        int foo = select(maxfds+1,&rdfds,0,0,&timeout);
#endif

        if (foo < 0)
#ifdef _WIN32
            {std::cerr << "select failed: " << WSAGetLastError() << std::endl; __ivy_exit(1);}
#else
            {perror("select failed"); __ivy_exit(1);}
#endif
        
        if (foo == 0){
            // std::cout << "TIMEOUT\n";            
           cycle--;
           for (unsigned i = 0; i < timers.size(); i++){
               if (timer_min >= timers[i]->ms_delay()) {
                   cycle++;
                   break;
               }
           }
           for (unsigned i = 0; i < timers.size(); i++)
               timers[i]->timeout(timer_min);
        }
        else {
            for (unsigned i = 0; i < readers.size(); i++) {
                reader *r = readers[i];
                if (FD_ISSET(r->fdes(),&rdfds))
                    r->read();
            }
        }            
    }
    ivy.__lock(); ivy.ext___finalize(); ivy.__unlock();
#ifdef _WIN32
                Sleep(final_ms);  // HACK: wait for late responses
#endif
    __ivy_out << "test_completed" << std::endl;
    for (unsigned i = 0; i < readers.size(); i++)
        delete readers[i];
    readers.clear();
    for (unsigned i = 0; i < timers.size(); i++)
        delete timers[i];
    timers.clear();


    }
    return 0;
}
